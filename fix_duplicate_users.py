#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –æ—Å—Ç–∞–≤–ª—è—è —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ
"""
import sqlite3
import sys
import os

def fix_duplicate_users():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    db_path = "data/bot.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        cursor.execute("""
            SELECT first_name, COUNT(*) as count 
            FROM users 
            WHERE first_name IS NOT NULL AND first_name != '' 
            GROUP BY first_name 
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        """)
        
        duplicates = cursor.fetchall()
        
        if not duplicates:
            print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–º–µ–Ω: {len(duplicates)}")
        for name, count in duplicates:
            print(f"  - {name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        fixed_count = 0
        
        for duplicate_name, count in duplicates:
            print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è '{duplicate_name}'...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º
            cursor.execute("""
                SELECT id, first_name, last_name, username, telegram_id, phone, created_at, registration_date
                FROM users 
                WHERE first_name = ? 
                ORDER BY 
                    CASE 
                        WHEN registration_date IS NOT NULL THEN registration_date 
                        WHEN created_at IS NOT NULL THEN created_at 
                        ELSE '1970-01-01' 
                    END ASC
            """, (duplicate_name,))
            
            users = cursor.fetchall()
            
            if len(users) <= 1:
                continue
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
            main_user = users[0]
            duplicate_users = users[1:]
            
            print(f"  üìå –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {main_user[0]} (—Å–æ–∑–¥–∞–Ω: {main_user[6] or main_user[7] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})")
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for dup_user in duplicate_users:
                dup_id = dup_user[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —É –¥—É–±–ª–∏–∫–∞—Ç–∞
                cursor.execute("SELECT COUNT(*) FROM projects WHERE user_id = ?", (dup_id,))
                projects_count = cursor.fetchone()[0]
                
                if projects_count > 0:
                    print(f"  üîÑ –ü–µ—Ä–µ–Ω–æ—Å {projects_count} –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {dup_id} –∫ ID {main_user[0]}")
                    
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ–µ–∫—Ç—ã
                    cursor.execute("""
                        UPDATE projects 
                        SET user_id = ? 
                        WHERE user_id = ?
                    """, (main_user[0], dup_id))
                
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                cursor.execute("DELETE FROM users WHERE id = ?", (dup_id,))
                print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {dup_id}")
            
            fixed_count += len(duplicate_users)
        
        conn.commit()
        conn.close()
        
        print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {fixed_count}")
        print(f"   –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≥—Ä—É–ø–ø: {len(duplicates)}")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def show_users_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    db_path = "data/bot.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        cursor.execute("""
            SELECT COUNT(DISTINCT user_id) 
            FROM projects 
            WHERE user_id IS NOT NULL
        """)
        users_with_projects = cursor.fetchone()[0]
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏: {users_with_projects}")
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤
        cursor.execute("""
            SELECT u.first_name, u.last_name, u.username, COUNT(p.id) as projects_count
            FROM users u
            LEFT JOIN projects p ON u.id = p.user_id
            GROUP BY u.id, u.first_name, u.last_name, u.username
            HAVING projects_count > 0
            ORDER BY projects_count DESC
            LIMIT 10
        """)
        
        top_users = cursor.fetchall()
        if top_users:
            print("\n   –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:")
            for user in top_users:
                name = f"{user[0] or ''} {user[1] or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                username = f"@{user[2]}" if user[2] else "–±–µ–∑ username"
                print(f"     - {name} ({username}): {user[3]} –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    print("üßπ –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    show_users_stats()
    
    if fix_duplicate_users():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        show_users_stats()
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)