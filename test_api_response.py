#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API Avito
"""

import asyncio
import aiohttp
import os
from dotenv import load_dotenv
import json

load_dotenv()

AVITO_CLIENT_ID = os.getenv("AVITO_CLIENT_ID")
AVITO_CLIENT_SECRET = os.getenv("AVITO_CLIENT_SECRET") 
AVITO_USER_ID = int(os.getenv("AVITO_USER_ID", "216012096"))

async def diagnose_api():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    print("="*60)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API AVITO")
    print("="*60)
    print(f"Client ID: {AVITO_CLIENT_ID[:10]}...")
    print(f"User ID: {AVITO_USER_ID}")
    print()
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    try:
        token = await get_token()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–æ–≤...")
    await test_chats_request(token)
    
async def get_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    auth_url = "https://api.avito.ru/token"
    
    data = {
        "grant_type": "client_credentials",
        "client_id": AVITO_CLIENT_ID,
        "client_secret": AVITO_CLIENT_SECRET,
        "scope": "messenger:read messenger:write"
    }
    
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(auth_url, data=data, headers=headers) as response:
            if response.status != 200:
                error_text = await response.text()
                raise Exception(f"Token request failed: {response.status} - {error_text}")
            
            result = await response.json()
            return result["access_token"]

async def test_chats_request(token):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–æ–≤"""
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }
    
    params = {
        "limit": 50,
        "offset": 0,
        "unread_only": "false",
        "chat_types": "u2i,u2u"
    }
    
    url = f"https://api.avito.ru/messenger/v2/accounts/{AVITO_USER_ID}/chats"
    
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: Authorization: Bearer {token[:20]}...")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, params=params) as response:
                print(f"\nüì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
                
                # –ü–æ–ª—É—á–∞–µ–º raw —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                response_bytes = await response.read()
                response_text = response_bytes.decode('utf-8', errors='replace')
                
                print(f"üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response_bytes)} –±–∞–π—Ç")
                print(f"üî§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {response.charset or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"üìù Content-Type: {response.content_type}")
                
                print(f"\nüîç Raw –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                print("‚îÄ" * 50)
                print(response_text[:500])
                print("‚îÄ" * 50)
                
                if response.status == 200:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
                        data = json.loads(response_text)
                        print(f"\n‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                        print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                        
                        if isinstance(data, dict):
                            print(f"üîë –ö–ª—é—á–∏: {list(data.keys())}")
                            
                            if 'chats' in data:
                                chats = data['chats']
                                print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
                                
                                if chats:
                                    print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞:")
                                    first_chat = chats[0]
                                    for key, value in first_chat.items():
                                        if isinstance(value, (str, int, bool)):
                                            print(f"  {key}: {value}")
                                        else:
                                            print(f"  {key}: {type(value)} (length: {len(value) if hasattr(value, '__len__') else 'N/A'})")
                            else:
                                print("‚ö†Ô∏è –ö–ª—é—á 'chats' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                                
                        elif isinstance(data, list):
                            print(f"üìã –ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ —Å {len(data)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                            
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        print(f"üîç –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {e.pos}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
                        start = max(0, e.pos - 50)
                        end = min(len(response_text), e.pos + 50)
                        print(f"üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:")
                        print(response_text[start:end])
                        
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status}")
                    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏: {response_text}")
                    
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(diagnose_api())