#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

async def run_admin_panel():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    import uvicorn
    from fastapi import FastAPI
    from fastapi.staticfiles import StaticFiles
    from app.admin.app import admin_router
    from app.config.settings import settings
    from app.database.database import init_db
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(title="Bot Admin Panel", description="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è Telegram –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Avito polling —Å–µ—Ä–≤–∏—Å –≤ —Ñ–æ–Ω–µ
    async def start_avito_polling():
        try:
            from app.services.avito_polling_service import polling_service
            from app.config.settings import settings
            
            print("üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Avito polling...")
            
            if not settings.BOT_TOKEN:
                print("‚ö†Ô∏è  BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
                
            if not settings.ADMIN_CHAT_ID:
                print("‚ö†Ô∏è  ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
                
            print(f"‚úÖ BOT_TOKEN: {'***' + settings.BOT_TOKEN[-4:] if settings.BOT_TOKEN else '–ù–ï –ó–ê–î–ê–ù'}")
            print(f"‚úÖ ADMIN_CHAT_ID: {settings.ADMIN_CHAT_ID}")
            
            print("üîî –ó–∞–ø—É—Å–∫–∞–µ–º Avito polling —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            print(f"üìã Polling –∞–∫—Ç–∏–≤–µ–Ω: {polling_service.polling_active}")
            print(f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: {polling_service.auto_response_enabled}")
            print(f"üìû Notification service: {polling_service.notification_service is not None}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ background task
            task = asyncio.create_task(polling_service.start_polling(interval=30))
            print("‚úÖ Avito polling —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–≤—ã–µ –ª–æ–≥–∏
            await asyncio.sleep(2)
            print("üîç –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª polling –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ 28 —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Avito polling: {e}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
    
    @app.on_event("startup")
    async def startup_event():
        await start_avito_polling()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    try:
        app.mount("/static", StaticFiles(directory="app/admin/static"), name="static")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {e}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω —Ä–æ—É—Ç—ã
    app.include_router(admin_router, prefix="/admin")
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç —Å –∫–æ—Ä–Ω—è –Ω–∞ –∞–¥–º–∏–Ω–∫—É
    @app.get("/")
    async def redirect_to_admin():
        from fastapi.responses import RedirectResponse
        return RedirectResponse(url="/admin/")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    config = uvicorn.Config(
        app=app,
        host="0.0.0.0",  # –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
        port=settings.ADMIN_PORT,
        reload=False,
        log_level="info"
    )
    
    server = uvicorn.Server(config)
    
    print(f"üöÄ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://127.0.0.1:{settings.ADMIN_PORT}")
    print(f"üìä –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:{settings.ADMIN_PORT}/admin/")
    print(f"üë§ –õ–æ–≥–∏–Ω: {settings.ADMIN_USERNAME}")
    print(f"üîê –ü–∞—Ä–æ–ª—å: {settings.ADMIN_PASSWORD}")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    await server.serve()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...")
    print("=" * 50)
    
    try:
        asyncio.run(run_admin_panel())
    except KeyboardInterrupt:
        print("\nüëã –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
