#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
echo "=================================="

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /var/www/bot_business_card

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
echo "üîç –ò—â–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
find . -name "*.db" -type f 2>/dev/null

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILES=(
    "app.db"
    "data/app.db" 
    "business_card_bot.db"
    "data/business_card_bot.db"
    "bot.db"
    "data/bot.db"
)

# –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
DB_PATH=""
for db_file in "${DB_FILES[@]}"; do
    if [ -f "$db_file" ]; then
        DB_PATH="$db_file"
        echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: $DB_PATH"
        break
    fi
done

if [ -z "$DB_PATH" ]; then
    echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    echo "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: app.db"
    DB_PATH="app.db"
fi

echo "üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $DB_PATH"

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Python
echo "üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏..."

python3 << EOF
import sqlite3
import sys

def check_column_exists(cursor, table_name, column_name):
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in cursor.fetchall()]
    return column_name in columns

def check_table_exists(cursor, table_name):
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
    return cursor.fetchone() is not None

try:
    conn = sqlite3.connect('$DB_PATH')
    cursor = conn.cursor()
    
    print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É clients
    if check_table_exists(cursor, 'clients'):
        print("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É clients...")
        client_columns = [
            'avito_chat_id',
            'avito_user_id', 
            'avito_status',
            'avito_dialog_history',
            'avito_notes',
            'avito_follow_up',
            'telegram_user_id'
        ]
        
        for column in client_columns:
            if not check_column_exists(cursor, 'clients', column):
                print(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º clients.{column}")
                cursor.execute(f"ALTER TABLE clients ADD COLUMN {column} TEXT")
            else:
                print(f"  ‚úÖ clients.{column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ clients –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É leads
    if check_table_exists(cursor, 'leads'):
        print("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É leads...")
        if not check_column_exists(cursor, 'leads', 'source_type'):
            print("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º leads.source_type")
            cursor.execute("ALTER TABLE leads ADD COLUMN source_type TEXT")
        else:
            print("  ‚úÖ leads.source_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ leads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()
    conn.close()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    sys.exit(1)
EOF

echo ""
echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
pm2 restart bot-business-card || pm2 restart all

echo ""
echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."