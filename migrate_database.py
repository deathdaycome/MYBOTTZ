#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î
"""

import sqlite3
import json
import sys
from pathlib import Path
from datetime import datetime

class DatabaseMigrator:
    def __init__(self, local_db_path, server_db_path=None):
        self.local_db_path = local_db_path
        self.server_db_path = server_db_path or local_db_path
        self.migration_log = []
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        self.migration_log.append(log_entry)
        print(log_entry)
    
    def backup_database(self, db_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î"""
        backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        try:
            import shutil
            shutil.copy2(db_path, backup_path)
            self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            return backup_path
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def get_server_table_schema(self, conn, table_name):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name})")
        return {row[1]: row for row in cursor.fetchall()}
    
    def alter_users_table(self, conn):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É users –¥–æ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        self.log("üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã users...")
        
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        current_schema = self.get_server_table_schema(conn, "users")
        
        # –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        new_columns = [
            ("bot_token", "VARCHAR(500)"),
            ("timeweb_login", "VARCHAR(255)"),
            ("timeweb_password", "VARCHAR(255)"),
            ("user_telegram_id", "VARCHAR(50)"),
            ("chat_id", "VARCHAR(50)"),
            ("bot_configured", "BOOLEAN DEFAULT FALSE")
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        for col_name, col_type in new_columns:
            if col_name not in current_schema:
                try:
                    cursor.execute(f"ALTER TABLE users ADD COLUMN {col_name} {col_type}")
                    self.log(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col_name}")
                except sqlite3.OperationalError as e:
                    if "duplicate column name" in str(e).lower():
                        self.log(f"   ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {e}")
        
        conn.commit()
        self.log("‚úÖ –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã users –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def sync_data_smart(self, local_conn, server_conn, table_name, unique_field="id"):
        """–£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        self.log(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
        
        local_cursor = local_conn.cursor()
        server_cursor = server_conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            local_cursor.execute(f"SELECT * FROM {table_name}")
            local_data = local_cursor.fetchall()
            
            if not local_data:
                self.log(f"   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                return
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
            local_cursor.execute(f"PRAGMA table_info({table_name})")
            columns_info = local_cursor.fetchall()
            column_names = [col[1] for col in columns_info]
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            server_cursor.execute(f"PRAGMA table_info({table_name})")
            server_columns_info = server_cursor.fetchall()
            server_column_names = [col[1] for col in server_columns_info]
            
            # –ù–∞–π—Ç–∏ –æ–±—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            common_columns = [col for col in column_names if col in server_column_names]
            
            if not common_columns:
                self.log(f"   ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                return
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if unique_field in server_column_names:
                server_cursor.execute(f"SELECT {unique_field} FROM {table_name}")
                existing_ids = {row[0] for row in server_cursor.fetchall()}
            else:
                existing_ids = set()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            placeholders = ", ".join(["?" for _ in common_columns])
            columns_str = ", ".join(common_columns)
            insert_query = f"INSERT OR IGNORE INTO {table_name} ({columns_str}) VALUES ({placeholders})"
            
            inserted_count = 0
            skipped_count = 0
            
            for row in local_data:
                # –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å—Ç—Ä–æ–∫–∏
                row_dict = dict(zip(column_names, row))
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                if unique_field in row_dict and row_dict[unique_field] in existing_ids:
                    skipped_count += 1
                    continue
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                values = [row_dict.get(col) for col in common_columns]
                
                try:
                    server_cursor.execute(insert_query, values)
                    inserted_count += 1
                except sqlite3.IntegrityError as e:
                    if "UNIQUE constraint failed" in str(e):
                        skipped_count += 1
                    else:
                        self.log(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ {table_name}: {e}")
            
            server_conn.commit()
            self.log(f"   ‚úÖ {table_name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {inserted_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}")
            
        except Exception as e:
            self.log(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {table_name}: {e}")
    
    def migrate(self, target_db_path=None):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        if target_db_path:
            self.server_db_path = target_db_path
            
        self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if not Path(self.local_db_path).exists():
            self.log(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.local_db_path}")
            return False
        
        # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î
        if Path(self.server_db_path).exists():
            backup_path = self.backup_database(self.server_db_path)
            if not backup_path:
                return False
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–∞–º
            local_conn = sqlite3.connect(self.local_db_path)
            server_conn = sqlite3.connect(self.server_db_path)
            
            # 1. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É users
            self.alter_users_table(server_conn)
            
            # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            critical_tables = [
                ("users", "telegram_id"),
                ("portfolio", "id"),
                ("projects", "id"),
                ("finance_transactions", "id"),
                ("finance_categories", "id"),
                ("admin_users", "username"),
                ("settings", "key"),
                ("faq", "id"),
                ("project_statuses", "id"),
                ("contractors", "id"),
                ("service_providers", "id"),
                ("tasks", "id"),
                ("money_categories", "id"),
                ("money_transactions", "id"),
                ("receipt_files", "id"),
                ("revision_message_files", "id"),
                ("task_comments", "id")
            ]
            
            for table_name, unique_field in critical_tables:
                self.sync_data_smart(local_conn, server_conn, table_name, unique_field)
            
            # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            local_conn.close()
            server_conn.close()
            
            self.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –º–∏–≥—Ä–∞—Ü–∏–∏
            log_file = f"migration_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(self.migration_log))
            self.log(f"üìã –õ–æ–≥ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    local_db = "data/bot.db"
    
    if len(sys.argv) > 1:
        server_db = sys.argv[1]
        print(f"–¶–µ–ª–µ–≤–∞—è –ë–î: {server_db}")
    else:
        server_db = "data/bot.db"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–æ–π –∂–µ –ë–î
        print("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∫–∞–∫ —Ü–µ–ª–µ–≤—É—é")
    
    migrator = DatabaseMigrator(local_db, server_db)
    success = migrator.migrate()
    
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ë–î.")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        sys.exit(1)

if __name__ == "__main__":
    main()