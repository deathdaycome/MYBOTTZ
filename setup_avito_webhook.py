#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Avito webhooks
–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.services.avito_service import get_avito_service, init_avito_service
from app.config.settings import settings
from app.config.logging import get_logger

logger = get_logger(__name__)

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Avito"""
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Avito Webhook...")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Avito —Å–µ—Ä–≤–∏—Å
        if not settings.AVITO_CLIENT_ID or not settings.AVITO_CLIENT_SECRET or not settings.AVITO_USER_ID:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Avito:")
            print(f"   AVITO_CLIENT_ID: {'‚úÖ' if settings.AVITO_CLIENT_ID else '‚ùå'}")
            print(f"   AVITO_CLIENT_SECRET: {'‚úÖ' if settings.AVITO_CLIENT_SECRET else '‚ùå'}")
            print(f"   AVITO_USER_ID: {'‚úÖ' if settings.AVITO_USER_ID else '‚ùå'}")
            return False
        
        print(f"‚úÖ AVITO_CLIENT_ID: {settings.AVITO_CLIENT_ID[:10]}...")
        print(f"‚úÖ AVITO_USER_ID: {settings.AVITO_USER_ID}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        avito_service = init_avito_service(
            settings.AVITO_CLIENT_ID,
            settings.AVITO_CLIENT_SECRET,
            int(settings.AVITO_USER_ID)
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL webhook
        webhook_url = f"https://{settings.DOMAIN}/admin/avito/webhook"
        print(f"üîó Webhook URL: {webhook_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook endpoint
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook endpoint...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook
        print("üì° –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook –≤ Avito API...")
        
        try:
            success = await avito_service.subscribe_webhook(webhook_url)
            if success:
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                print("üéâ –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL webhook –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                webhook_file = project_root / "WEBHOOK_URL.txt"
                with open(webhook_file, "w") as f:
                    f.write(webhook_url)
                print(f"üíæ Webhook URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {webhook_file}")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å webhook")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook: {e}")
            logger.error(f"Webhook registration error: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        logger.error(f"Webhook setup error: {e}")
        return False

async def unsubscribe_webhook():
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç webhook (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    
    print("üîß –û—Ç–ø–∏—Å–∫–∞ –æ—Ç Avito Webhook...")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL
        webhook_file = project_root / "WEBHOOK_URL.txt"
        if not webhook_file.exists():
            print("‚ùå –§–∞–π–ª —Å URL webhook –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(webhook_file, "r") as f:
            webhook_url = f.read().strip()
        
        print(f"üîó Webhook URL: {webhook_url}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        avito_service = init_avito_service(
            settings.AVITO_CLIENT_ID,
            settings.AVITO_CLIENT_SECRET,
            int(settings.AVITO_USER_ID)
        )
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç webhook
        success = await avito_service.unsubscribe_webhook(webhook_url)
        if success:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω!")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å webhook")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç webhook: {e}")
        return False

async def test_webhook_connectivity():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint...")
    
    import aiohttp
    
    webhook_url = f"https://{settings.DOMAIN}/admin/avito/webhook"
    
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
            async with session.post(webhook_url, json={}) as response:
                if response.status == 200:
                    print("‚úÖ Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç!")
                    return True
                else:
                    print(f"‚ö†Ô∏è Webhook endpoint –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Avito Webhooks')
    parser.add_argument('action', choices=['setup', 'unsubscribe', 'test'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ: setup - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, unsubscribe - –æ—Ç–∫–ª—é—á–∏—Ç—å, test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å')
    
    args = parser.parse_args()
    
    if args.action == 'setup':
        success = asyncio.run(setup_webhook())
    elif args.action == 'unsubscribe':
        success = asyncio.run(unsubscribe_webhook())
    elif args.action == 'test':
        success = asyncio.run(test_webhook_connectivity())
    
    if success:
        print("üéâ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)

if __name__ == "__main__":
    main()