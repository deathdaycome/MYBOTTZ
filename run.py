#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –≤–∏–∑–∏—Ç–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    # –°–ª–æ–≤–∞—Ä—å: {–∏–º—è –¥–ª—è pip: –∏–º—è –¥–ª—è import}
    required_packages = {
        'python-telegram-bot': 'telegram',
        'sqlalchemy': 'sqlalchemy',
        'fastapi': 'fastapi',
        'uvicorn': 'uvicorn',
        'python-dotenv': 'dotenv'
    }
    
    missing_packages = []
    
    for pip_name, import_name in required_packages.items():
        try:
            __import__(import_name)
        except ImportError:
            missing_packages.append(pip_name)
    
    if missing_packages:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("pip install -r requirements.txt")
        sys.exit(1)

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    env_path = project_root / '.env'
    
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        print("""
BOT_TOKEN=your_telegram_bot_token
OPENROUTER_API_KEY=your_openrouter_api_key
ADMIN_USERNAME=admin
ADMIN_PASSWORD=your_password
ADMIN_PORT=8001
""")
        sys.exit(1)

def check_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        'data',
        'logs', 
        'uploads',
        'uploads/documents',
        'uploads/images',
        'uploads/portfolio',
        'uploads/audio',
        'uploads/temp',
        'app/static',
        'app/static/images',
        'app/static/css',
        'app/static/js'
    ]
    
    for directory in directories:
        dir_path = project_root / directory
        dir_path.mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

def create_placeholder_image(path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300
        img = Image.new('RGB', (400, 300), color='#e3f2fd')
        draw = ImageDraw.Draw(img)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            font = ImageFont.truetype("arial.ttf", 24)
        except IOError:
            font = ImageFont.load_default()
            
        text = "Placeholder"
        bbox = draw.textbbox((0, 0), text, font=font)
        textwidth = bbox[2] - bbox[0]
        textheight = bbox[3] - bbox[1]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x = (img.width - textwidth) / 2
        y = (img.height - textheight) / 2
        
        draw.text((x, y), text, font=font, fill="#000000")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img.save(path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {path}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è \"–í–∏–∑–∏—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤\"...")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_requirements()
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    check_env_file()
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    check_directories()

    # 4. –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
    print("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ Telegram-–±–æ—Ç–∞...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    import uvicorn
    from app.config.settings import get_settings

    settings = get_settings()
    
    uvicorn.run(
        "app.main:app", 
        host="0.0.0.0", 
        port=settings.ADMIN_PORT,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        log_level="info"
    )

if __name__ == "__main__":
    # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ placeholder-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å –≤ check_directories
    main()
    