#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database.database import get_db_context
from app.database.models import ServiceProvider
from datetime import datetime

def create_basic_services():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    services = [
        {
            "name": "OpenAI API",
            "description": "API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º GPT",
            "provider_type": "ai",
            "website": "https://openai.com",
            "contact_info": {"email": "support@openai.com"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "OpenRouter",
            "description": "API-—Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π",
            "provider_type": "ai", 
            "website": "https://openrouter.ai",
            "contact_info": {"email": "support@openrouter.ai"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "Claude API",
            "description": "API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º Claude –æ—Ç Anthropic",
            "provider_type": "ai",
            "website": "https://www.anthropic.com",
            "contact_info": {"email": "support@anthropic.com"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "DigitalOcean",
            "description": "–û–±–ª–∞—á–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥ –∏ VPS",
            "provider_type": "hosting",
            "website": "https://digitalocean.com",
            "contact_info": {"email": "support@digitalocean.com"},
            "pricing_model": "monthly",
            "status": "active"
        },
        {
            "name": "Timeweb",
            "description": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ö–æ—Å—Ç–∏–Ω–≥-–ø—Ä–æ–≤–∞–π–¥–µ—Ä",
            "provider_type": "hosting",
            "website": "https://timeweb.com",
            "contact_info": {"email": "support@timeweb.ru", "phone": "+7 (495) 663-65-65"},
            "pricing_model": "monthly",
            "status": "active"
        },
        {
            "name": "AWS S3",
            "description": "–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Amazon",
            "provider_type": "storage",
            "website": "https://aws.amazon.com/s3/",
            "contact_info": {"email": "aws-support@amazon.com"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "YooMoney",
            "description": "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–±—ã–≤—à–∏–π –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏)",
            "provider_type": "payment",
            "website": "https://yoomoney.ru",
            "contact_info": {"email": "support@yoomoney.ru", "phone": "8 800 250-66-99"},
            "pricing_model": "per_request",
            "status": "active"
        },
        {
            "name": "Telegram Bot API",
            "description": "API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram –±–æ—Ç–æ–≤",
            "provider_type": "other",
            "website": "https://core.telegram.org/bots/api",
            "contact_info": {"email": "support@telegram.org"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "Google Analytics",
            "description": "–í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç Google",
            "provider_type": "analytics",
            "website": "https://analytics.google.com",
            "contact_info": {"email": "support@google.com"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "SendGrid",
            "description": "Email-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫",
            "provider_type": "email",
            "website": "https://sendgrid.com",
            "contact_info": {"email": "support@sendgrid.com"},
            "pricing_model": "usage",
            "status": "active"
        },
        {
            "name": "Cloudflare",
            "description": "CDN –∏ –∑–∞—â–∏—Ç–∞ —Å–∞–π—Ç–æ–≤",
            "provider_type": "cdn",
            "website": "https://cloudflare.com",
            "contact_info": {"email": "support@cloudflare.com"},
            "pricing_model": "monthly",
            "status": "active"
        },
        {
            "name": "SMS.ru",
            "description": "SMS-—Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –†–æ—Å—Å–∏–∏",
            "provider_type": "sms",
            "website": "https://sms.ru",
            "contact_info": {"email": "support@sms.ru", "phone": "+7 (495) 545-45-67"},
            "pricing_model": "per_request",
            "status": "active"
        }
    ]
    
    with get_db_context() as db:
        try:
            created_count = 0
            
            for service_data in services:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å
                existing = db.query(ServiceProvider).filter(
                    ServiceProvider.name == service_data["name"]
                ).first()
                
                if existing:
                    print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å '{service_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
                service = ServiceProvider(**service_data)
                db.add(service)
                created_count += 1
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å: {service_data['name']}")
            
            db.commit()
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_services = db.query(ServiceProvider).count()
            active_services = db.query(ServiceProvider).filter(
                ServiceProvider.status == "active"
            ).count()
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {total_services}")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_services}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            types = db.query(ServiceProvider.provider_type).distinct().all()
            print(f"\nüìã –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤:")
            for (type_name,) in types:
                count = db.query(ServiceProvider).filter(
                    ServiceProvider.provider_type == type_name
                ).count()
                
                type_labels = {
                    'ai': '–ò–ò-—Å–µ—Ä–≤–∏—Å—ã',
                    'hosting': '–•–æ—Å—Ç–∏–Ω–≥',
                    'payment': '–ü–ª–∞—Ç–µ–∂–∏',
                    'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
                    'storage': '–•—Ä–∞–Ω–∏–ª–∏—â–µ',
                    'email': 'Email',
                    'sms': 'SMS',
                    'cdn': 'CDN',
                    'monitoring': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
                    'other': '–î—Ä—É–≥–æ–µ'
                }
                
                label = type_labels.get(type_name, type_name)
                print(f"   ‚Ä¢ {label}: {count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            db.rollback()
            return False
    
    return True

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    print("=" * 50)
    
    if create_basic_services():
        print("\n‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        sys.exit(1)
