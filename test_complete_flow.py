#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Avito –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å —Ñ–ª–æ—É –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import aiohttp
import os
from dotenv import load_dotenv
import json
import sys
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent / "app"))

from services.avito_service import AvitoService

load_dotenv()

AVITO_CLIENT_ID = os.getenv("AVITO_CLIENT_ID")
AVITO_CLIENT_SECRET = os.getenv("AVITO_CLIENT_SECRET")  
AVITO_USER_ID = int(os.getenv("AVITO_USER_ID", "216012096"))

async def test_full_flow():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("="*60)
    print("–ü–û–õ–ù–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò AVITO –ú–ï–°–°–ï–ù–î–ñ–ï–†–ê")
    print("="*60)
    
    if not all([AVITO_CLIENT_ID, AVITO_CLIENT_SECRET, AVITO_USER_ID]):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print(f"üîë Client ID: {AVITO_CLIENT_ID[:10]}...")
    print(f"üë§ User ID: {AVITO_USER_ID}")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    avito_service = AvitoService(AVITO_CLIENT_ID, AVITO_CLIENT_SECRET, AVITO_USER_ID)
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...")
        token = await avito_service._get_access_token()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        print()
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
        print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
        chats = await avito_service.get_chats(limit=5)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
        
        if not chats:
            print("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
        for i, chat in enumerate(chats[:3]):
            print(f"   –ß–∞—Ç {i+1}: {chat.id}")
            current_user_name = None
            other_user_name = None
            
            for user in chat.users:
                if user.get('id') == AVITO_USER_ID:
                    current_user_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                else:
                    other_user_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    
            print(f"   - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user_name}")
            print(f"   - –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: {other_user_name}")
            print(f"   - –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {chat.unread_count}")
            
        print()
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
        first_chat = chats[0]
        print(f"3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: {first_chat.id}")
        
        try:
            messages = await avito_service.get_chat_messages(first_chat.id, limit=10)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            if messages:
                print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:")
                for msg in messages[-3:]:
                    direction_icon = "üì§" if msg.direction == "out" else "üì•"
                    content_preview = ""
                    if msg.type.value == "text":
                        content_preview = msg.content.get("text", "")[:50]
                        if len(msg.content.get("text", "")) > 50:
                            content_preview += "..."
                    elif msg.type.value == "image":
                        content_preview = "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]"
                    elif msg.type.value == "system":
                        content_preview = "[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                    
                    print(f"   {direction_icon} {msg.type.value}: {content_preview}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            print("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
            traceback.print_exc()
            
        print()
        
        # –¢–µ—Å—Ç 4: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API v3 –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        print("4Ô∏è‚É£ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API v3/messages...")
        await test_direct_api_call(first_chat.id)
        
        print()
        print("="*60)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

async def test_direct_api_call(chat_id):
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    auth_url = "https://api.avito.ru/token"
    data = {
        "grant_type": "client_credentials",
        "client_id": AVITO_CLIENT_ID,
        "client_secret": AVITO_CLIENT_SECRET,
        "scope": "messenger:read messenger:write"
    }
    
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(auth_url, data=data, headers=headers) as response:
            token_data = await response.json()
            token = token_data["access_token"]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–æ–æ–±—â–µ–Ω–∏–π
    api_headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }
    
    params = {
        "limit": 5,
        "offset": 0
    }
    
    url = f"https://api.avito.ru/messenger/v3/accounts/{AVITO_USER_ID}/chats/{chat_id}/messages/"
    
    print(f"   –í—ã–∑—ã–≤–∞–µ–º: {url}")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=api_headers, params=params) as response:
            response_text = await response.text()
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
            
            if response.status == 200:
                try:
                    data = json.loads(response_text)
                    print(f"   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
                    
                    if isinstance(data, list):
                        print(f"   ‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª–∏–Ω–∞: {len(data)})")
                        if data:
                            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {list(data[0].keys())}")
                    elif isinstance(data, dict):
                        print(f"   ‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: {list(data.keys())}")
                        if "messages" in data:
                            messages = data["messages"]
                            print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–ª–µ 'messages': {len(messages)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    print(f"   JSON (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
                    print(f"   {json.dumps(data, ensure_ascii=False, indent=2)[:300]}...")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"   Raw –æ—Ç–≤–µ—Ç: {response_text[:200]}...")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response_text}")

if __name__ == "__main__":
    asyncio.run(test_full_flow())