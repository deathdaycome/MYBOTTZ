#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–∫
"""
from app.database.database import get_db_context
from app.database.models import Project, User, ProjectRevision

def create_test_revision():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∞–≤–∫—É"""
    with get_db_context() as db:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project = db.query(Project).filter(Project.title.like('%–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç%')).first()
        
        if not project:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        user = project.user
        
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∫—É
        revision = ProjectRevision(
            project_id=project.id,
            revision_number=1,
            title="–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏",
            description="–ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ó–∞–∫–∞–∑–∞—Ç—å' —Å–ª–∏—à–∫–æ–º —è—Ä–∫–∞—è. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—ë –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞, –∫–∞–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
            priority="normal",
            status="pending",
            created_by_id=user.id
        )
        
        db.add(revision)
        db.commit()
        db.refresh(revision)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"   ID: {revision.id}")
        print(f"   –ù–æ–º–µ—Ä: #{revision.revision_number}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {revision.title}")
        print(f"   –ü—Ä–æ–µ–∫—Ç: {project.title}")
        print(f"   –°—Ç–∞—Ç—É—Å: {revision.status}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {revision.priority}")

def create_second_revision():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ç–æ—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∞–≤–∫—É"""
    with get_db_context() as db:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project = db.query(Project).filter(Project.title.like('%–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç%')).first()
        
        if not project:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        user = project.user
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –ø—Ä–∞–≤–∫—É
        revision = ProjectRevision(
            project_id=project.id,
            revision_number=2,
            title="–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞",
            description="–í –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–∏—Å–∫–∞. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞ —Å–≤–µ—Ä—Ö—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            priority="high",
            status="pending",
            created_by_id=user.id
        )
        
        db.add(revision)
        db.commit()
        db.refresh(revision)
        
        print(f"‚úÖ –í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"   ID: {revision.id}")
        print(f"   –ù–æ–º–µ—Ä: #{revision.revision_number}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {revision.title}")
        print(f"   –°—Ç–∞—Ç—É—Å: {revision.status}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {revision.priority}")

def list_project_revisions():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
    with get_db_context() as db:
        project = db.query(Project).filter(Project.title.like('%–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç%')).first()
        
        if not project:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        revisions = db.query(ProjectRevision).filter(
            ProjectRevision.project_id == project.id
        ).order_by(ProjectRevision.revision_number).all()
        
        print(f"\nüìã –ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project.title}':")
        print("=" * 50)
        
        if not revisions:
            print("‚ùå –ü—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for revision in revisions:
            print(f"#{revision.revision_number} - {revision.title}")
            print(f"   –°—Ç–∞—Ç—É—Å: {revision.status}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {revision.priority}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {revision.description[:80]}...")
            print(f"   –°–æ–∑–¥–∞–Ω–æ: {revision.created_at}")
            print("-" * 40)

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∞–≤–æ–∫...")
    create_test_revision()
    print()
    create_second_revision()
    print()
    list_project_revisions()
