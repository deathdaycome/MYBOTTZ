#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Avito
–ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import sys
import os
import asyncio
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

async def test_avito_messages():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π Avito"""
    print("üîß –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Avito")
    print("=" * 50)
    
    try:
        from app.config.settings import settings
        from app.services.avito_service import get_avito_service, init_avito_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print(f"   CLIENT_ID: {settings.AVITO_CLIENT_ID[:10]}..." if settings.AVITO_CLIENT_ID else "   CLIENT_ID: –ù–ï –ó–ê–î–ê–ù")
        print(f"   CLIENT_SECRET: {'***' if settings.AVITO_CLIENT_SECRET else '–ù–ï –ó–ê–î–ê–ù'}")
        print(f"   USER_ID: {settings.AVITO_USER_ID}")
        
        if not all([settings.AVITO_CLIENT_ID, settings.AVITO_CLIENT_SECRET, settings.AVITO_USER_ID]):
            print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞...")
        try:
            user_id = int(settings.AVITO_USER_ID)
            service = init_avito_service(settings.AVITO_CLIENT_ID, settings.AVITO_CLIENT_SECRET, user_id)
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å User ID: {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
        print("\nüìû –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤...")
        try:
            chats = await service.get_chats(limit=10)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
            
            if not chats:
                print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
                return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–≤—ã—Ö 3 —á–∞—Ç–æ–≤
        print("\nüí¨ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:")
        total_messages = 0
        new_messages_count = 0
        
        for i, chat in enumerate(chats[:3]):
            print(f"\nüó®Ô∏è  –ß–∞—Ç {i+1}: {chat.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
            users = []
            for user in chat.users:
                if user['id'] != user_id:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è
                    users.append(user.get('name', f"User {user['id']}"))
            
            print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(users) if users else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"   üìÖ –û–±–Ω–æ–≤–ª–µ–Ω: {chat.updated_datetime}")
            print(f"   üî¢ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {chat.unread_count}")
            
            try:
                messages = await service.get_chat_messages(chat.id, limit=20)
                print(f"   üì® –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                total_messages += len(messages)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                recent_messages = [msg for msg in messages[-5:] if msg.created > (datetime.now().timestamp() - 86400)]  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                if recent_messages:
                    new_messages_count += len(recent_messages)
                    print(f"   üÜï –ù–æ–≤—ã—Ö (24—á): {len(recent_messages)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for msg in recent_messages[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
                        direction = "‚û°Ô∏è" if msg.direction == "out" else "‚¨ÖÔ∏è"
                        msg_time = datetime.fromtimestamp(msg.created).strftime("%H:%M")
                        text = msg.content.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:50]
                        if len(text) == 50:
                            text += "..."
                        print(f"      {direction} {msg_time}: {text}")
                else:
                    print("   üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {min(3, len(chats))}")
        print(f"   üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        print(f"   üÜï –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (24—á): {new_messages_count}")
        
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if new_messages_count > 0:
            print(f"\nüîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            try:
                from app.services.notification_service import NotificationService
                notification_service = NotificationService()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if settings.BOT_TOKEN and settings.ADMIN_CHAT_ID:
                    print(f"   ‚úÖ BOT_TOKEN: ***{settings.BOT_TOKEN[-4:]}")
                    print(f"   ‚úÖ ADMIN_CHAT_ID: {settings.ADMIN_CHAT_ID}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    test_message = f"üß™ –¢–µ—Å—Ç Avito —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\\n\\nüìä –ù–∞–π–¥–µ–Ω–æ {new_messages_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {min(3, len(chats))} —á–∞—Ç–∞—Ö"
                    await notification_service.send_admin_notification(test_message)
                    print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    print("   ‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∑–∞–¥–∞–Ω—ã")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

async def test_polling_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É polling —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîÑ –¢–µ—Å—Ç Avito Polling —Å–µ—Ä–≤–∏—Å–∞:")
    print("-" * 30)
    
    try:
        from app.services.avito_polling_service import polling_service
        
        print(f"üìã –°—Ç–∞—Ç—É—Å polling:")
        print(f"   üîÑ –ê–∫—Ç–∏–≤–µ–Ω: {polling_service.polling_active}")
        print(f"   ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: {polling_service.auto_response_enabled}")
        print(f"   üì± NotificationService: {polling_service.notification_service is not None}")
        print(f"   üíæ –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(polling_service.known_messages)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"\nüîç –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await polling_service.check_new_messages()
        print(f"‚úÖ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è polling: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Avito —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        success = asyncio.run(test_avito_messages())
        
        if success:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç polling —Å–µ—Ä–≤–∏—Å–∞
            asyncio.run(test_polling_service())
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()