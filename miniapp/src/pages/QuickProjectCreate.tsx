import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useMutation } from '@tanstack/react-query';
import { motion, AnimatePresence } from 'framer-motion';
import { projectsApi } from '../api/projects';
import { useTelegram } from '../hooks/useTelegram';

type ProjectType = 'telegram_bot' | 'telegram_miniapp' | 'whatsapp_bot' | 'android_app' | 'ios_app';
type Step = 'type' | 'name' | 'description' | 'deadline';

interface ProjectTypeInfo {
  name: string;
  type: ProjectType;
  emoji: string;
}

const projectTypes: Record<string, ProjectTypeInfo> = {
  telegram_bot: { name: 'Telegram –±–æ—Ç', type: 'telegram_bot', emoji: 'ü§ñ' },
  telegram_miniapp: { name: 'Telegram Mini App', type: 'telegram_miniapp', emoji: '‚ú®' },
  whatsapp_bot: { name: 'WhatsApp –±–æ—Ç', type: 'whatsapp_bot', emoji: 'üí¨' },
  android_app: { name: 'Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', type: 'android_app', emoji: 'ü§ñ' },
  ios_app: { name: 'iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', type: 'ios_app', emoji: 'üì±' },
};

const deadlineOptions = [
  { value: '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ', label: '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ' },
  { value: '–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞', label: '–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞' },
  { value: '1-3 –º–µ—Å—è—Ü–∞', label: '1-3 –º–µ—Å—è—Ü–∞' },
  { value: '3-6 –º–µ—Å—è—Ü–µ–≤', label: '3-6 –º–µ—Å—è—Ü–µ–≤' },
  { value: '–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤', label: '–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤' },
  { value: '–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ', label: '–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ' },
];

export const QuickProjectCreate = () => {
  const navigate = useNavigate();
  const { BackButton } = useTelegram();

  const [currentStep, setCurrentStep] = useState<Step>('type');
  const [selectedType, setSelectedType] = useState<ProjectTypeInfo | null>(null);
  const [projectName, setProjectName] = useState('');
  const [description, setDescription] = useState('');
  const [deadline, setDeadline] = useState('');

  const createProjectMutation = useMutation({
    mutationFn: () =>
      projectsApi.createQuickProject({
        title: projectName,
        description: description,
        project_type: selectedType!.type,
        budget: '–ù–µ —É–∫–∞–∑–∞–Ω',
        deadline: deadline,
      }),
    onSuccess: () => {
      alert('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      navigate('/projects');
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    },
  });

  useEffect(() => {
    BackButton.show();
    BackButton.onClick(() => {
      if (currentStep === 'type') {
        navigate('/');
      } else {
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        const steps: Step[] = ['type', 'name', 'description', 'deadline'];
        const currentIndex = steps.indexOf(currentStep);
        if (currentIndex > 0) {
          setCurrentStep(steps[currentIndex - 1]);
        }
      }
    });

    return () => {
      BackButton.hide();
    };
  }, [BackButton, navigate, currentStep]);

  const handleTypeSelect = (type: ProjectTypeInfo) => {
    setSelectedType(type);
    setCurrentStep('name');
  };

  const handleNameSubmit = () => {
    if (projectName.trim().length < 3) {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }
    setCurrentStep('description');
  };

  const handleDescriptionSubmit = () => {
    if (description.trim().length < 10) {
      alert('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }
    setCurrentStep('deadline');
  };

  const handleDeadlineSelect = (value: string) => {
    setDeadline(value);
    createProjectMutation.mutate();
  };

  const getStepNumber = () => {
    const steps: Record<Step, number> = {
      type: 0,
      name: 1,
      description: 2,
      deadline: 3,
    };
    return steps[currentStep];
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white pb-20">
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      {currentStep !== 'type' && (
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">
              {selectedType?.emoji} {selectedType?.name}
            </span>
            <span className="text-sm text-gray-500">
              –®–∞–≥ {getStepNumber()} –∏–∑ 3
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(getStepNumber() / 3) * 100}%` }}
            />
          </div>
        </div>
      )}

      <div className="p-4">
        <AnimatePresence mode="wait">
          {/* –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ */}
          {currentStep === 'type' && (
            <motion.div
              key="type"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
            >
              <h1 className="text-2xl font-bold text-gray-900 mb-2">
                ‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
              </h1>
              <p className="text-gray-600 mb-6">
                –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞.
              </p>

              <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6">
                <p className="text-sm text-blue-900 font-medium mb-2">üí° –ß—Ç–æ –¥–∞–ª—å—à–µ:</p>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ –ò–∑—É—á–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É</li>
                  <li>‚Ä¢ –°–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤</li>
                  <li>‚Ä¢ –û–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</li>
                </ul>
              </div>

              <p className="text-sm font-medium text-gray-700 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</p>

              <div className="space-y-3">
                {Object.values(projectTypes).map((type) => (
                  <motion.button
                    key={type.type}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleTypeSelect(type)}
                    className="w-full bg-white border-2 border-gray-200 rounded-xl p-4 text-left hover:border-blue-500 hover:shadow-md transition-all"
                  >
                    <span className="text-2xl mr-3">{type.emoji}</span>
                    <span className="text-lg font-medium text-gray-900">{type.name}</span>
                  </motion.button>
                ))}
              </div>
            </motion.div>
          )}

          {/* –®–∞–≥ 2: –ù–∞–∑–≤–∞–Ω–∏–µ */}
          {currentStep === 'name' && (
            <motion.div
              key="name"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
            >
              <h2 className="text-xl font-bold text-gray-900 mb-2">
                –®–∞–≥ 1 –∏–∑ 4: –ù–∞–∑–≤–∞–Ω–∏–µ
              </h2>
              <p className="text-gray-600 mb-6">
                –ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç? –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
              </p>

              <div className="bg-gray-50 border border-gray-200 rounded-xl p-4 mb-6">
                <p className="text-sm text-gray-700 font-medium mb-2">–ü—Ä–∏–º–µ—Ä—ã:</p>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ "–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã"</li>
                  <li>‚Ä¢ "–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏"</li>
                  <li>‚Ä¢ "–ú–∏–Ω–∏-–∏–≥—Ä–∞ –¥–ª—è Telegram"</li>
                </ul>
              </div>

              <input
                type="text"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4"
                autoFocus
              />

              <button
                onClick={handleNameSubmit}
                disabled={projectName.trim().length < 3}
                className="w-full bg-blue-500 text-white py-3 rounded-xl font-medium hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
              </button>
            </motion.div>
          )}

          {/* –®–∞–≥ 3: –û–ø–∏—Å–∞–Ω–∏–µ */}
          {currentStep === 'description' && (
            <motion.div
              key="description"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
            >
              <h2 className="text-xl font-bold text-gray-900 mb-2">
                –®–∞–≥ 2 –∏–∑ 3: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
              </h2>
              <p className="text-gray-600 mb-2">‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{projectName}</i></p>
              <p className="text-gray-600 mb-6">
                –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≥–ª–∞–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.
              </p>

              <div className="bg-gray-50 border border-gray-200 rounded-xl p-4 mb-6">
                <p className="text-sm text-gray-700 font-medium mb-2">–ü—Ä–∏–º–µ—Ä—ã:</p>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ "–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º, –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –æ–ø–ª–∞—Ç–æ–π"</li>
                  <li>‚Ä¢ "–ò–≥—Ä–∞ –≤ Telegram —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø—Ä–∏–∑–∞–º–∏"</li>
                  <li>‚Ä¢ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã —Å –∫–∞—Ä—Ç–æ–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–æ–º"</li>
                </ul>
              </div>

              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É..."
                rows={5}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4 resize-none"
                autoFocus
              />

              <button
                onClick={handleDescriptionSubmit}
                disabled={description.trim().length < 10}
                className="w-full bg-blue-500 text-white py-3 rounded-xl font-medium hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
              </button>
            </motion.div>
          )}

          {/* –®–∞–≥ 3: –°—Ä–æ–∫–∏ */}
          {currentStep === 'deadline' && (
            <motion.div
              key="deadline"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
            >
              <h2 className="text-xl font-bold text-gray-900 mb-2">
                –®–∞–≥ 3 –∏–∑ 3: –°—Ä–æ–∫–∏
              </h2>
              <p className="text-gray-600 mb-2">‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{projectName}</i></p>
              <p className="text-gray-600 mb-2">‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{description.slice(0, 50)}...</i></p>
              <p className="text-gray-600 mb-6">
                –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫.
              </p>

              {createProjectMutation.isPending ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                </div>
              ) : (
                <div className="grid grid-cols-2 gap-3">
                  {deadlineOptions.map((option) => (
                    <motion.button
                      key={option.value}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => handleDeadlineSelect(option.value)}
                      className="bg-white border-2 border-gray-200 rounded-xl p-4 text-center hover:border-blue-500 hover:shadow-md transition-all"
                    >
                      <span className="text-sm font-medium text-gray-900">{option.label}</span>
                    </motion.button>
                  ))}
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};
