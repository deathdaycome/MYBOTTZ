#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏: no such column: clients.avito_chat_id –∏ leads.source_type
"""

import sqlite3
import os
import sys
from datetime import datetime

def get_database_path():
    """–ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    possible_paths = [
        "app.db",
        "data/app.db",
        "/var/www/bot_business_card/app.db",
        "/var/www/bot_business_card/data/app.db"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            return path
    
    return "app.db"  # –°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

def check_column_exists(cursor, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in cursor.fetchall()]
    return column_name in columns

def main():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    print("=" * 60)
    
    db_path = get_database_path()
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        sys.exit(1)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã clients
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É clients...")
        client_columns = [
            'avito_chat_id',
            'avito_user_id', 
            'avito_status',
            'avito_dialog_history',
            'avito_notes',
            'avito_follow_up',
            'telegram_user_id'
        ]
        
        for column in client_columns:
            if not check_column_exists(cursor, 'clients', column):
                print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º clients.{column}")
                cursor.execute(f"ALTER TABLE clients ADD COLUMN {column} TEXT")
            else:
                print(f"‚úÖ clients.{column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã leads
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É leads...")
        if not check_column_exists(cursor, 'leads', 'source_type'):
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º leads.source_type")
            cursor.execute("ALTER TABLE leads ADD COLUMN source_type TEXT")
        else:
            print("‚úÖ leads.source_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üöÄ –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()