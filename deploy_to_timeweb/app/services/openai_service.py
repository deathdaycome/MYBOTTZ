import openai
import httpx
import json
import time
import re
from typing import Dict, Any, Optional, List
from ..config.settings import settings
from ..config.logging import get_logger, log_api_call, log_error

logger = get_logger(__name__)

class OpenAIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API —á–µ—Ä–µ–∑ OpenRouter"""
    
    def __init__(self):
        self.api_key = settings.OPENROUTER_API_KEY or settings.OPENAI_API_KEY
        self.base_url = settings.OPENROUTER_BASE_URL if settings.OPENROUTER_API_KEY else "https://api.openai.com/v1"
        self.default_model = settings.DEFAULT_MODEL
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        if settings.OPENROUTER_API_KEY:
            self.client = openai.OpenAI(
                api_key=self.api_key,
                base_url=self.base_url
            )
        else:
            self.client = openai.OpenAI(api_key=self.api_key)
    
    async def generate_response(self, prompt: str, user_id: int = None, system_prompt: str = None) -> str:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI"""
        try:
            messages = []
            
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            
            messages.append({"role": "user", "content": prompt})
            
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model=self.default_model,
                messages=messages,
                temperature=0.7,
                max_tokens=2000
            )
            
            response_time = time.time() - start_time
            
            ai_response = response.choices[0].message.content
            
            log_api_call("OpenAI", "generate_response", True, response_time)
            logger.info(f"–û—Ç–≤–µ—Ç AI –ø–æ–ª—É—á–µ–Ω –∑–∞ {response_time:.2f}—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return ai_response
            
        except Exception as e:
            log_api_call("OpenAI", "generate_response", False)
            log_error(e, "generate_response")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

    async def create_technical_specification(self, user_request: str, additional_context: Dict = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        
        system_prompt = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
        
        –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–≤–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–´–ï —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        üìã –ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê
        [–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞]
        
        üìù –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê
        [–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –º–∏–Ω–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
        
        üéØ –¶–ï–õ–ò –ò –ó–ê–î–ê–ß–ò
        [–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞]
        
        üë• –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø
        [–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏]
        
        ‚öôÔ∏è –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
        [–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º]
        
        üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö
        [–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, aiogram/python-telegram-bot, PostgreSQL, etc.]
        
        üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
        [–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏]
        
        üìä –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
        [–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞]
        
        üìà –≠–¢–ê–ü–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò
        [–ü–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏]
        
        ‚ö†Ô∏è –†–ò–°–ö–ò –ò –°–õ–û–ñ–ù–û–°–¢–ò
        [–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Ä–µ—à–µ–Ω–∏—è]
        
        ‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò
        [–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏]
        
        üí∞ –ü–†–ò–ú–ï–†–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨
        [–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º]
        
        üöÄ MVP –§–£–ù–ö–¶–ò–ò
        [–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏]
        
        ‚ûï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò
        [–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π]
        
        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
        1. –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç–∞
        2. –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        3. –û–ø–∏—Å—ã–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        4. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        6. –†–∞—Å–ø–∏—Å—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        7. –î–µ–ª–∞–π –¢–ó –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
        """
        
        user_prompt = f"""
        –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_request}
        
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {additional_context or {}}
        
        –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        
        try:
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model=self.default_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                max_tokens=2500
            )
            
            response_time = time.time() - start_time
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –¢–ó
            tz_text = response.choices[0].message.content
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –¢–ó –æ—Ç OpenAI –¥–ª–∏–Ω–æ–π {len(tz_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            tz_data = self._parse_text_tz_to_dict(tz_text, user_request)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            cost_estimation = self._calculate_project_cost(tz_data)
            tz_data.update(cost_estimation)
            
            log_api_call("OpenAI", "create_tz", True, response_time)
            logger.info(f"–¢–ó —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ {response_time:.2f}—Å")
            
            return tz_data
            
        except Exception as e:
            log_api_call("OpenAI", "create_tz", False)
            log_error(e, "create_technical_specification")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ fallback –¢–ó
            logger.warning("–°–æ–∑–¥–∞–µ–º fallback –¢–ó –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API")
            return self._create_detailed_fallback_tz(user_request)
    
    async def consultant_response(self, user_query: str, conversation_history: List[Dict] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        
        system_prompt = getattr(settings, 'CONSULTANT_SYSTEM_PROMPT', """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.
        –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π —Ä–µ—à–µ–Ω–∏–π.
        """) + """
        
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
        - –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É
        - –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        - –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        - –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
        - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        """
        
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if conversation_history:
            messages.extend(conversation_history[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        messages.append({"role": "user", "content": user_query})
        
        try:
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model=self.default_model,
                messages=messages,
                temperature=getattr(settings, 'CONSULTANT_TEMPERATURE', 0.7),
                max_tokens=getattr(settings, 'CONSULTANT_MAX_TOKENS', 1500)
            )
            
            response_time = time.time() - start_time
            
            ai_response = response.choices[0].message.content
            tokens_used = response.usage.total_tokens if response.usage else 0;
            
            log_api_call("OpenAI", "consultant", True, response_time)
            logger.info(f"–û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω –∑–∞ {response_time:.2f}—Å, —Ç–æ–∫–µ–Ω–æ–≤: {tokens_used}")
            
            return {
                "response": ai_response,
                "tokens_used": tokens_used,
                "response_time": response_time
            }
            
        except Exception as e:
            log_api_call("OpenAI", "consultant", False)
            log_error(e, "consultant_response")
            raise
    
    async def improve_technical_specification(self, current_tz: Dict, user_feedback: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¢–ó –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        system_prompt = """
        –£–ª—É—á—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON, –Ω–æ –æ–±–Ω–æ–≤–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è.
        """
        
        user_prompt = f"""
        –¢–µ–∫—É—â–µ–µ –¢–ó: {json.dumps(current_tz, ensure_ascii=False, indent=2)}
        
        –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_feedback}
        
        –û–±–Ω–æ–≤–∏ –¢–ó —Å —É—á–µ—Ç–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π.
        """
        
        try:
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model=self.default_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            response_time = time.time() - start_time
            
            content = response.choices[0].message.content
            
            try:
                updated_tz = json.loads(content)
            except json.JSONDecodeError:
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    updated_tz = json.loads(json_match.group())
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            cost_estimation = self._calculate_project_cost(updated_tz)
            updated_tz.update(cost_estimation)
            
            log_api_call("OpenAI", "improve_tz", True, response_time)
            
            return updated_tz
            
        except Exception as e:
            log_api_call("OpenAI", "improve_tz", False)
            log_error(e, "improve_technical_specification")
            raise
    
    async def analyze_uploaded_document(self, document_text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        
        system_prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–∑ –Ω–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞.
        
        –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ JSON —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó —Å –Ω—É–ª—è.
        –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–∫–∞–∂–∏ —ç—Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—è—Ö.
        """
        
        user_prompt = f"""
        –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        {document_text}
        
        –ò–∑–≤–ª–µ–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        """
        
        try:
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model=self.default_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            response_time = time.time() - start_time
            
            content = response.choices[0].message.content
            
            try:
                tz_data = json.loads(content)
            except json.JSONDecodeError:
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    tz_data = json.loads(json_match.group())
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            
            cost_estimation = self._calculate_project_cost(tz_data)
            tz_data.update(cost_estimation)
            
            log_api_call("OpenAI", "analyze_document", True, response_time)
            
            return tz_data
            
        except Exception as e:
            log_api_call("OpenAI", "analyze_document", False)
            log_error(e, "analyze_uploaded_document")
            raise
    
    def _calculate_project_cost(self, tz_data: Dict) -> Dict[str, Any]:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ó"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —á–∞—Å—ã
        complexity = tz_data.get("complexity", "medium")
        
        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—ã –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
        estimated_hours = 0
        
        # –ß–∞—Å—ã –∏–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        for func in tz_data.get("detailed_functions", []):
            estimated_hours += func.get("estimated_hours", 5)
        
        # –ß–∞—Å—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞
        for section in tz_data.get("bot_sections", []):
            estimated_hours += section.get("estimated_hours", 8)
        
        # –ß–∞—Å—ã –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        for integration in tz_data.get("integrations", []):
            estimated_hours += integration.get("estimated_hours", 3)
        
        # –ß–∞—Å—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        admin_panel = tz_data.get("admin_panel_requirements", {})
        if admin_panel.get("needed", False):
            estimated_hours += admin_panel.get("estimated_hours", 15)
        
        # –ï—Å–ª–∏ —á–∞—Å—ã –Ω–µ –ø–æ—Å—á–∏—Ç–∞–ª–∏—Å—å –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –±–µ—Ä–µ–º –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–ª—è
        if estimated_hours == 0:
            estimated_hours = tz_data.get("estimated_hours", 40)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è)
        base_hourly_rate = 1500  # 1500‚ÇΩ –∑–∞ —á–∞—Å - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        base_cost = estimated_hours * base_hourly_rate
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_multipliers = {
            'simple': 1.0,      # –ü—Ä–æ—Å—Ç—ã–µ –±–æ—Ç—ã
            'medium': 1.2,      # –°—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            'complex': 1.5,     # –°–ª–æ–∂–Ω—ã–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
            'premium': 2.0      # –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ enterprise —Ä–µ—à–µ–Ω–∏—è
        }
        complexity_multiplier = complexity_multipliers.get(complexity, 1.2)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost = base_cost * complexity_multiplier
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        integrations_count = len(tz_data.get("integrations", []))
        integration_cost = integrations_count * 3000  # 3000‚ÇΩ –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        minimum_cost = 15000
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        final_cost = max(total_cost + integration_cost, minimum_cost)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç—ã—Å—è—á
        final_cost = round(final_cost / 1000) * 1000
        
        # –î–∏–∞–ø–∞–∑–æ–Ω ¬±15%
        min_cost = int(final_cost * 0.85)
        max_cost = int(final_cost * 1.15)
        
        return {
            "estimated_cost": int(final_cost),
            "cost_range": f"{min_cost:,}-{max_cost:,}".replace(",", " "),
            "estimated_hours": estimated_hours,
            "hourly_rate": base_hourly_rate,
            "complexity_multiplier": complexity_multiplier,
            "integration_cost": integration_cost,
            "base_cost": int(base_cost),
            "cost_breakdown": {
                "development": int(base_cost * complexity_multiplier),
                "integrations": integration_cost,
                "total": int(final_cost)
            }
        }
    
    def _parse_text_tz_to_dict(self, tz_text: str, user_request: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¢–ó –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–µ–∫—Ü–∏–π –ø–æ —ç–º–æ–¥–∑–∏
        sections = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        title_match = re.search(r'üìã –ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê\s*\n([^\n]+)', tz_text)
        title = title_match.group(1).strip() if title_match else f"–ü—Ä–æ–µ–∫—Ç: {user_request[:50]}..."
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        desc_match = re.search(r'üìù –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê\s*\n(.*?)(?=\n[üéØüë•‚öôÔ∏èüîßüîóüìäüìà‚ö†Ô∏è‚è±Ô∏èüí∞üöÄ‚ûï]|$)', tz_text, re.DOTALL)
        description = desc_match.group(1).strip() if desc_match else "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏."
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª–∏
        goals_match = re.search(r'üéØ –¶–ï–õ–ò –ò –ó–ê–î–ê–ß–ò\s*\n(.*?)(?=\n[üë•‚öôÔ∏èüîßüîóüìäüìà‚ö†Ô∏è‚è±Ô∏èüí∞üöÄ‚ûï]|$)', tz_text, re.DOTALL)
        goals = goals_match.group(1).strip() if goals_match else "–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —É—Ç–æ—á–Ω–µ–Ω—ã."
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions_match = re.search(r'‚öôÔ∏è –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò\s*\n(.*?)(?=\n[üîßüîóüìäüìà‚ö†Ô∏è‚è±Ô∏èüí∞üöÄ‚ûï]|$)', tz_text, re.DOTALL)
        functions_text = functions_match.group(1).strip() if functions_match else ""
        
        # –ü–∞—Ä—Å–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫
        functions = []
        if functions_text:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ ‚Ä¢ –∏–ª–∏ —Ü–∏—Ñ—Ä
            function_lines = re.findall(r'(?:^|\n)[-‚Ä¢\d\.]\s*([^\n]+)', functions_text, re.MULTILINE)
            functions = [f.strip() for f in function_lines if f.strip()]
        
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if not functions:
            functions = ["–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
        tech_match = re.search(r'üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö\s*\n(.*?)(?=\n[üîóüìäüìà‚ö†Ô∏è‚è±Ô∏èüí∞üöÄ‚ûï]|$)', tz_text, re.DOTALL)
        tech_text = tech_match.group(1).strip() if tech_match else "Python, aiogram, PostgreSQL"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integrations_match = re.search(r'üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–ò\s*\n(.*?)(?=\n[üìäüìà‚ö†Ô∏è‚è±Ô∏èüí∞üöÄ‚ûï]|$)', tz_text, re.DOTALL)
        integrations_text = integrations_match.group(1).strip() if integrations_match else ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        complexity = "medium"
        if any(word in tz_text.lower() for word in ["—Å–ª–æ–∂–Ω", "premium", "enterprise", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü"]):
            complexity = "complex"
        elif any(word in tz_text.lower() for word in ["–ø—Ä–æ—Å—Ç–æ–π", "–±–∞–∑–æ–≤", "–º–∏–Ω–∏–º–∞–ª—å–Ω"]):
            complexity = "simple"
        
        # –û—Ü–µ–Ω–∫–∞ —á–∞—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
        estimated_hours = max(len(functions) * 8, 24)  # –ú–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞
        
        return {
            "title": title,
            "description": description,
            "goals": goals,
            "target_audience": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞",
            "tz_text": tz_text,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¢–ó
            "bot_sections": [
                {
                    "section_name": "–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                    "description": "–ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞",
                    "functions": functions,
                    "complexity_level": complexity,
                    "estimated_hours": estimated_hours
                }
            ],
            "detailed_functions": [
                {
                    "function_name": func,
                    "description": f"–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: {func}",
                    "user_flow": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    "technical_requirements": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é",
                    "complexity_risks": "–†–∏—Å–∫–∏ –±—É–¥—É—Ç –æ—Ü–µ–Ω–µ–Ω—ã –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏",
                    "estimated_hours": 8
                } for func in functions[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ—É–Ω–∫—Ü–∏–∏
            ],
            "technology_stack": {
                "language": "Python",
                "framework": "aiogram / python-telegram-bot",
                "database": "PostgreSQL",
                "additional_tools": ["Redis", "Docker"],
                "external_apis": ["–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞"]
            },
            "integrations": [
                {
                    "name": "–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                    "purpose": "–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                    "complexity": "medium",
                    "estimated_hours": 5
                }
            ],
            "admin_panel_requirements": {
                "needed": True,
                "functions": [
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
                ],
                "estimated_hours": 15
            },
            "development_stages": [
                {
                    "stage": "–≠—Ç–∞–ø 1: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
                    "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
                    "deliverables": ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"],
                    "duration_days": 2,
                    "hours": 10
                },
                {
                    "stage": "–≠—Ç–∞–ø 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
                    "description": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                    "deliverables": ["–†–∞–±–æ—á–∏–π MVP", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                    "duration_days": 5,
                    "hours": estimated_hours
                }
            ],
            "complexity_analysis": {
                "overall_complexity": complexity,
                "complex_features": ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API", "–°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                "simple_features": ["–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã", "–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã"],
                "integration_complexity": "–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
            },
            "risks_and_challenges": [
                {
                    "risk": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "impact": "medium",
                    "mitigation": "–ß–µ—Ç–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ—ç—Ç–∞–ø–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
                }
            ],
            "estimated_hours": estimated_hours,
            "priority_features": functions[:2] if len(functions) >= 2 else functions,
            "optional_features": functions[2:] if len(functions) > 2 else ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"]
        }

    def _create_detailed_fallback_tz(self, user_request: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ fallback –¢–ó –ø—Ä–∏ –æ—à–∏–±–∫–µ API"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        request_lower = user_request.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
        if any(word in request_lower for word in ["–º–∞–≥–∞–∑–∏–Ω", "–ø—Ä–æ–¥–∞–∂", "—Ç–æ–≤–∞—Ä", "–∫—É–ø–∏—Ç—å", "ecommerce"]):
            project_type = "ecommerce"
        elif any(word in request_lower for word in ["–∑–∞–∫–∞–∑", "–¥–æ—Å—Ç–∞–≤–∫–∞", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–µ–¥–∞"]):
            project_type = "delivery"
        elif any(word in request_lower for word in ["–∑–∞–ø–∏—Å", "—É—Å–ª—É–≥", "—Å–∞–ª–æ–Ω", "–∫–ª–∏–Ω–∏–∫", "–≤—Ä–∞—á"]):
            project_type = "booking"
        elif any(word in request_lower for word in ["–æ–±—É—á–µ–Ω", "–∫—É—Ä—Å", "—É—Ä–æ–∫", "—Ç–µ—Å—Ç"]):
            project_type = "education"
        elif any(word in request_lower for word in ["–Ω–æ–≤–æ—Å—Ç–∏", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–ø—É–±–ª–∏–∫–∞—Ü"]):
            project_type = "content"
        else:
            project_type = "general"
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        templates = {
            "ecommerce": {
                "title": "Telegram-–±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–æ–≤. –ë–æ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∫—É–ø–∫–∏ –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
                "functions": [
                    "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º",
                    "–ö–æ—Ä–∑–∏–Ω–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏",
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤",
                    "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö",
                    "–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤",
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"
                ],
                "complexity": "complex",
                "estimated_hours": 80
            },
            "delivery": {
                "title": "Telegram-–±–æ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã",
                "description": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –µ–¥—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞. –ë–æ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.",
                "functions": [
                    "–ú–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –±–ª—é–¥",
                    "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–æ—Ä–∑–∏–Ω–æ–π",
                    "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤",
                    "–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã",
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"
                ],
                "complexity": "complex",
                "estimated_hours": 70
            },
            "booking": {
                "title": "Telegram-–±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Å–ª—É–≥–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–µ–π. –ë–æ—Ç —É–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–æ–π.",
                "functions": [
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥",
                    "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏",
                    "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥–∏",
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ (–æ—Ç–º–µ–Ω–∞, –ø–µ—Ä–µ–Ω–æ—Å)",
                    "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö",
                    "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π",
                    "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤",
                    "–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
                ],
                "complexity": "medium",
                "estimated_hours": 60
            },
            "education": {
                "title": "Telegram-–±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                "description": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º.",
                "functions": [
                    "–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤ –∏ —É—Ä–æ–∫–æ–≤",
                    "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏",
                    "–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏",
                    "–§–æ—Ä—É–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤",
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö",
                    "–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
                ],
                "complexity": "medium",
                "estimated_hours": 65
            },
            "content": {
                "title": "Telegram-–±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.",
                "functions": [
                    "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç–µ–π",
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º—ã",
                    "–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ä–µ–∞–∫—Ü–∏–∏",
                    "–†–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                    "–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
                ],
                "complexity": "medium",
                "estimated_hours": 50
            },
            "general": {
                "title": f"Telegram-–±–æ—Ç: {user_request[:50]}...",
                "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏. –ë–æ—Ç –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.",
                "functions": [
                    "–ë–∞–∑–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –º–µ–Ω—é",
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                    "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
                    "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã",
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                ],
                "complexity": "medium",
                "estimated_hours": 45
            }
        }
        
        template = templates.get(project_type, templates["general"])
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –¢–ó
        tz_text = f"""üìã –ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê
{template['title']}

üìù –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê
{template['description']}

üéØ –¶–ï–õ–ò –ò –ó–ê–î–ê–ß–ò
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ Telegram
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏

üë• –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø
–û—Å–Ω–æ–≤–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 18-45 –ª–µ—Ç
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –∫–ª–∏–µ–Ω—Ç—ã, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∏–µ –±—ã—Å—Ç—Ä–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

‚öôÔ∏è –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
{chr(10).join(f"‚Ä¢ {func}" for func in template['functions'])}

üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö
‚Ä¢ Python 3.9+
‚Ä¢ aiogram 3.x / python-telegram-bot
‚Ä¢ PostgreSQL –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
‚Ä¢ Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ FastAPI –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
‚Ä¢ Nginx –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è

üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
‚Ä¢ Telegram Bot API
‚Ä¢ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–ÆKassa, Stripe)
‚Ä¢ SMS-—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –í–Ω–µ—à–Ω–∏–µ API –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
‚Ä¢ –°–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

üìä –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚Ä¢ –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã

üìà –≠–¢–ê–ü–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò
1. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (3 –¥–Ω—è)
2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP —Ñ—É–Ω–∫—Ü–∏–π (7 –¥–Ω–µ–π)
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ (5 –¥–Ω–µ–π)
4. –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (5 –¥–Ω–µ–π)
5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ (3 –¥–Ω—è)
6. –î–µ–ø–ª–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (2 –¥–Ω—è)

‚ö†Ô∏è –†–ò–°–ö–ò –ò –°–õ–û–ñ–ù–û–°–¢–ò
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram Bot API
‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏

‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò
–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {template['estimated_hours']} —á–∞—Å–æ–≤
–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 3-4 –Ω–µ–¥–µ–ª–∏
–í–∫–ª—é—á–∞–µ—Ç: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ–ø–ª–æ–π

üí∞ –ü–†–ò–ú–ï–†–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨
–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {template['estimated_hours'] * 1500:,} —Ä—É–±–ª–µ–π
–î–∏–∞–ø–∞–∑–æ–Ω: {int(template['estimated_hours'] * 1500 * 0.85):,} - {int(template['estimated_hours'] * 1500 * 1.15):,} —Ä—É–±–ª–µ–π
–°—Ç–∞–≤–∫–∞: 1500‚ÇΩ/—á–∞—Å

üöÄ MVP –§–£–ù–ö–¶–ò–ò
{chr(10).join(f"‚Ä¢ {func}" for func in template['functions'][:4])}

‚ûï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò
{chr(10).join(f"‚Ä¢ {func}" for func in template['functions'][4:])}
‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        return {
            "title": template['title'],
            "description": template['description'],
            "goals": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
            "target_audience": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 18-45 –ª–µ—Ç",
            "tz_text": tz_text,
            "bot_sections": [
                {
                    "section_name": "–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                    "description": "–ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞",
                    "functions": template['functions'],
                    "complexity_level": template['complexity'],
                    "estimated_hours": template['estimated_hours']
                }
            ],
            "detailed_functions": [
                {
                    "function_name": func,
                    "description": f"–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: {func}",
                    "user_flow": "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
                    "technical_requirements": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç —É—Ç–æ—á–Ω–µ–Ω—ã",
                    "complexity_risks": "–†–∏—Å–∫–∏ –æ—Ü–µ–Ω–µ–Ω—ã –∏ —É—á—Ç–µ–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏",
                    "estimated_hours": max(8, template['estimated_hours'] // len(template['functions']))
                } for func in template['functions']
            ],
            "technology_stack": {
                "language": "Python",
                "framework": "aiogram 3.x",
                "database": "PostgreSQL",
                "additional_tools": ["Redis", "Docker", "FastAPI"],
                "external_apis": ["Telegram Bot API", "Payment APIs"]
            },
            "integrations": [
                {
                    "name": "Telegram Bot API",
                    "purpose": "–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞",
                    "complexity": "medium",
                    "estimated_hours": 5
                },
                {
                    "name": "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
                    "purpose": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
                    "complexity": "high",
                    "estimated_hours": 10
                }
            ],
            "admin_panel_requirements": {
                "needed": True,
                "functions": [
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º",
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
                ],
                "estimated_hours": 20
            },
            "development_stages": [
                {
                    "stage": "–≠—Ç–∞–ø 1: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
                    "deliverables": ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–°—Ö–µ–º–∞ –ë–î"],
                    "duration_days": 3,
                    "hours": 15
                },
                {
                    "stage": "–≠—Ç–∞–ø 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP",
                    "description": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                    "deliverables": ["–†–∞–±–æ—á–∏–π MVP", "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"],
                    "duration_days": 7,
                    "hours": template['estimated_hours'] // 2
                }
            ],
            "complexity_analysis": {
                "overall_complexity": template['complexity'],
                "complex_features": ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"],
                "simple_features": ["–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã", "–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã"],
                "integration_complexity": "–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
            },
            "risks_and_challenges": [
                {
                    "risk": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram Bot API",
                    "impact": "medium",
                    "mitigation": "–ò–∑—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π"
                },
                {
                    "risk": "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
                    "impact": "high",
                    "mitigation": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"
                }
            ],
            "estimated_hours": template['estimated_hours'],
            "priority_features": template['functions'][:4],
            "optional_features": template['functions'][4:] + ["–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM"]
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ai_service = OpenAIService()