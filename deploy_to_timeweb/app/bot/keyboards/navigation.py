"""
–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ breadcrumbs –¥–ª—è –±–æ—Ç–∞
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Optional, Dict, Any, Tuple

class NavigationBreadcrumbs:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.breadcrumbs_map = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            'main_menu': {'title': 'üè† –ì–ª–∞–≤–Ω–∞—è', 'parent': None},
            'create_tz': {'title': 'üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó', 'parent': 'main_menu'},
            'portfolio': {'title': 'üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'parent': 'main_menu'},
            'my_projects': {'title': 'üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', 'parent': 'main_menu'},
            'calculator': {'title': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', 'parent': 'main_menu'},
            'consultant': {'title': 'ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', 'parent': 'main_menu'},
            'faq': {'title': '‚ùì FAQ', 'parent': 'main_menu'},
            'consultation': {'title': 'üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', 'parent': 'main_menu'},
            'contacts': {'title': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'parent': 'main_menu'},
            
            # –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó
            'tz_text': {'title': 'üìù –¢–µ–∫—Å—Ç–æ–º', 'parent': 'create_tz'},
            'tz_voice': {'title': 'üé§ –ì–æ–ª–æ—Å–æ–º', 'parent': 'create_tz'},
            'tz_step_by_step': {'title': 'üìã –ü–æ—à–∞–≥–æ–≤–æ', 'parent': 'create_tz'},
            'tz_upload': {'title': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç', 'parent': 'create_tz'},
            
            # –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            'portfolio_telegram': {'title': 'ü§ñ Telegram –±–æ—Ç—ã', 'parent': 'portfolio'},
            'portfolio_whatsapp': {'title': 'üí¨ WhatsApp –±–æ—Ç—ã', 'parent': 'portfolio'},
            'portfolio_web': {'title': 'üåê –í–µ–±-–±–æ—Ç—ã', 'parent': 'portfolio'},
            'portfolio_integration': {'title': 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 'parent': 'portfolio'},
            'portfolio_featured': {'title': '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ', 'parent': 'portfolio'},
            'portfolio_all': {'title': 'üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã', 'parent': 'portfolio'},
            
            # –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã FAQ
            'faq_pricing': {'title': 'üí∞ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'parent': 'faq'},
            'faq_timeline': {'title': '‚è∞ –°—Ä–æ–∫–∏', 'parent': 'faq'},
            'faq_support': {'title': 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'parent': 'faq'},
            'faq_integration': {'title': 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 'parent': 'faq'},
            'faq_platforms': {'title': 'üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'parent': 'faq'},
            'faq_all': {'title': 'üìä –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', 'parent': 'faq'},
            
            # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            'calc_simple': {'title': 'üü¢ –ü—Ä–æ—Å—Ç–æ–π', 'parent': 'calculator'},
            'calc_medium': {'title': 'üü° –°—Ä–µ–¥–Ω–∏–π', 'parent': 'calculator'},
            'calc_complex': {'title': 'üü† –°–ª–æ–∂–Ω—ã–π', 'parent': 'calculator'},
            'calc_premium': {'title': 'üî¥ –ü—Ä–µ–º–∏—É–º', 'parent': 'calculator'},
            'calc_detailed': {'title': '‚öôÔ∏è –î–µ—Ç–∞–ª—å–Ω–æ', 'parent': 'calculator'},
            
            # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            'book_consultation': {'title': 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'parent': 'consultation'},
            'contact_now': {'title': 'üìû –°–≤—è–∑–∞—Ç—å—Å—è', 'parent': 'consultation'},
            'leave_request': {'title': 'üìã –ó–∞—è–≤–∫–∞', 'parent': 'consultation'},
            
            # –ê–¥–º–∏–Ω–∫–∞
            'admin_main': {'title': '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', 'parent': 'main_menu'},
            'admin_users': {'title': 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'parent': 'admin_main'},
            'admin_projects': {'title': 'üìä –ü—Ä–æ–µ–∫—Ç—ã', 'parent': 'admin_main'},
            'admin_analytics': {'title': 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'parent': 'admin_main'},
            'admin_settings': {'title': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'parent': 'admin_main'},
            'admin_broadcast': {'title': 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'parent': 'admin_main'},
            'admin_portfolio': {'title': 'üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'parent': 'admin_main'},
        }
    
    def get_breadcrumb_path(self, current_section: str) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
        path = []
        section = current_section
        
        while section and section in self.breadcrumbs_map:
            section_info = self.breadcrumbs_map[section]
            path.insert(0, {
                'callback': section,
                'title': section_info['title']
            })
            section = section_info['parent']
        
        return path
    
    def get_parent_section(self, current_section: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª"""
        if current_section in self.breadcrumbs_map:
            return self.breadcrumbs_map[current_section]['parent']
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª–µ
navigation = NavigationBreadcrumbs()

def get_breadcrumb_keyboard(current_section: str, max_buttons: int = 3) -> List[List[InlineKeyboardButton]]:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏"""
    path = navigation.get_breadcrumb_path(current_section)
    
    if len(path) <= 1:
        return []
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
    if len(path) > max_buttons:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é, ... –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        breadcrumb_buttons = [
            InlineKeyboardButton(path[0]['title'], callback_data=path[0]['callback'])
        ]
        
        if len(path) > max_buttons:
            breadcrumb_buttons.append(InlineKeyboardButton("...", callback_data="breadcrumb_info"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        for item in path[-(max_buttons-2):]:
            if item != path[0]:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                breadcrumb_buttons.append(
                    InlineKeyboardButton(item['title'], callback_data=item['callback'])
                )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        breadcrumb_buttons = [
            InlineKeyboardButton(item['title'], callback_data=item['callback'])
            for item in path[:-1]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        ]
    
    return [breadcrumb_buttons] if breadcrumb_buttons else []

def get_back_button(current_section: str) -> Optional[InlineKeyboardButton]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    parent = navigation.get_parent_section(current_section)
    if parent:
        parent_info = navigation.breadcrumbs_map.get(parent, {})
        title = parent_info.get('title', 'üîô –ù–∞–∑–∞–¥')
        return InlineKeyboardButton(f"üîô {title.replace('üè† ', '').replace('‚öôÔ∏è ', '')}", 
                                   callback_data=parent)
    return None

def get_navigation_keyboard(
    current_section: str,
    additional_buttons: List[List[InlineKeyboardButton]] = None,
    show_breadcrumbs: bool = True,
    show_back_button: bool = True,
    show_home_button: bool = True
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    if show_breadcrumbs:
        breadcrumbs = get_breadcrumb_keyboard(current_section)
        keyboard.extend(breadcrumbs)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if additional_buttons:
        keyboard.extend(additional_buttons)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    
    if show_back_button:
        back_btn = get_back_button(current_section)
        if back_btn:
            nav_buttons.append(back_btn)
    
    if show_home_button and current_section != 'main_menu':
        nav_buttons.append(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu"))
    
    if nav_buttons:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(nav_buttons), 2):
            row = nav_buttons[i:i+2]
            keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)

def get_section_menu_keyboard(section: str) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    keyboards = {
        'create_tz': get_create_tz_navigation(),
        'portfolio': get_portfolio_navigation(),
        'my_projects': get_my_projects_navigation(),
        'calculator': get_calculator_navigation(),
        'consultant': get_consultant_navigation(),
        'faq': get_faq_navigation(),
        'consultation': get_consultation_navigation(),
        'admin_main': get_admin_navigation(),
    }
    
    return keyboards.get(section, get_navigation_keyboard(section))

def get_create_tz_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó"""
    keyboard = [
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="tz_text")],
        [InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="tz_voice")],
        [InlineKeyboardButton("üìã –ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="tz_step_by_step")],
        [InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="tz_upload")],
    ]
    
    return get_navigation_keyboard('create_tz', keyboard, show_breadcrumbs=False)

def get_portfolio_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ Telegram –±–æ—Ç—ã", callback_data="portfolio_telegram"),
            InlineKeyboardButton("üí¨ WhatsApp –±–æ—Ç—ã", callback_data="portfolio_whatsapp")
        ],
        [
            InlineKeyboardButton("üåê –í–µ–±-–±–æ—Ç—ã", callback_data="portfolio_web"),
            InlineKeyboardButton("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="portfolio_integration")
        ],
        [
            InlineKeyboardButton("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ", callback_data="portfolio_featured"),
            InlineKeyboardButton("üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="portfolio_all")
        ],
    ]
    
    return get_navigation_keyboard('portfolio', keyboard, show_breadcrumbs=False)

def get_my_projects_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [
            InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ", callback_data="projects_new"),
            InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data="projects_active")
        ],
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="projects_completed"),
            InlineKeyboardButton("üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects_all")
        ],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="projects_stats")],
    ]
    
    return get_navigation_keyboard('my_projects', keyboard, show_breadcrumbs=False)

def get_calculator_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üü¢ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç", callback_data="calc_simple"),
            InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π –±–æ—Ç", callback_data="calc_medium")
        ],
        [
            InlineKeyboardButton("üü† –°–ª–æ–∂–Ω—ã–π –±–æ—Ç", callback_data="calc_complex"),
            InlineKeyboardButton("üî¥ –ü—Ä–µ–º–∏—É–º –±–æ—Ç", callback_data="calc_premium")
        ],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ", callback_data="calc_detailed")],
    ]
    
    return get_navigation_keyboard('calculator', keyboard, show_breadcrumbs=False)

def get_consultant_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üí¨ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultant_new"),
            InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="consultant_history")
        ],
        [
            InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="consultant_quick"),
            InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="consultant_tips")
        ],
        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞", callback_data="consultant_rate")],
    ]
    
    return get_navigation_keyboard('consultant', keyboard, show_breadcrumbs=False)

def get_faq_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è FAQ"""
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="faq_pricing"),
            InlineKeyboardButton("‚è∞ –°—Ä–æ–∫–∏", callback_data="faq_timeline")
        ],
        [
            InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="faq_support"),
            InlineKeyboardButton("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="faq_integration")
        ],
        [
            InlineKeyboardButton("üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="faq_platforms"),
            InlineKeyboardButton("üìä –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq_all")
        ],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="faq_ask")],
    ]
    
    return get_navigation_keyboard('faq', keyboard, show_breadcrumbs=False)

def get_consultation_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="book_consultation")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data="contact_now")],
        [InlineKeyboardButton("üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="leave_request")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support_chat")],
    ]
    
    return get_navigation_keyboard('consultation', keyboard, show_breadcrumbs=False)

def get_admin_navigation() -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton("üìä –ü—Ä–æ–µ–∫—Ç—ã", callback_data="admin_projects")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
            InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="admin_portfolio")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="admin_quick"),
            InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="admin_tools")
        ],
    ]
    
    return get_navigation_keyboard('admin_main', keyboard, show_breadcrumbs=False, show_home_button=False)

def get_quick_navigation_keyboard() -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º"""
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –¢–ó", callback_data="create_tz"),
            InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio"),
            InlineKeyboardButton("üìä –ü—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects")
        ],
        [
            InlineKeyboardButton("ü§ñ AI", callback_data="consultant"),
            InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
            InlineKeyboardButton("‚ùì FAQ", callback_data="faq")
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_contextual_keyboard(
    current_section: str,
    context_data: Optional[Dict[str, Any]] = None
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard = []
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
    if current_section.startswith('tz_'):
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="tz_save_draft")],
            [InlineKeyboardButton("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="tz_preview")],
        ]
    
    elif current_section.startswith('portfolio_'):
        keyboard = [
            [InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="portfolio_filters")],
            [InlineKeyboardButton("üí° –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="portfolio_suggest")],
        ]
    
    elif current_section.startswith('project_'):
        if context_data and context_data.get('project_id'):
            project_id = context_data['project_id']
            keyboard = [
                [
                    InlineKeyboardButton("üí¨ –ß–∞—Ç", callback_data=f"project_chat_{project_id}"),
                    InlineKeyboardButton("üìÑ –¢–ó", callback_data=f"project_tz_{project_id}")
                ],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"project_status_{project_id}")],
            ]
    
    elif current_section.startswith('calc_'):
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", callback_data="calc_save")],
            [InlineKeyboardButton("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email", callback_data="calc_email")],
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="calc_to_tz")],
        ]
    
    elif current_section.startswith('consultant'):
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="consultant_new")],
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="consultant_rate")],
        ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    return get_navigation_keyboard(current_section, keyboard)

def get_step_navigation_keyboard(
    current_step: int,
    total_steps: int,
    step_prefix: str,
    can_skip: bool = False,
    show_progress: bool = True
) -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º (–ø–æ—à–∞–≥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)"""
    keyboard = []
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    if show_progress:
        progress_text = f"–®–∞–≥ {current_step} –∏–∑ {total_steps}"
        keyboard.append([InlineKeyboardButton(progress_text, callback_data="step_info")])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º
    step_row = []
    
    if current_step > 1:
        step_row.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{step_prefix}_step_{current_step - 1}")
        )
    
    if can_skip:
        step_row.append(
            InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"{step_prefix}_skip_{current_step}")
        )
    
    if current_step < total_steps:
        step_row.append(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{step_prefix}_step_{current_step + 1}")
        )
    else:
        step_row.append(
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"{step_prefix}_finish")
        )
    
    if step_row:
        keyboard.append(step_row)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    action_row = []
    action_row.append(InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"{step_prefix}_save"))
    action_row.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu"))
    
    keyboard.append(action_row)
    
    return InlineKeyboardMarkup(keyboard)

def get_search_navigation_keyboard(
    search_query: str,
    results_count: int,
    current_page: int = 1,
    total_pages: int = 1,
    search_context: str = "general"
) -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    keyboard = []
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if results_count > 0:
        info_text = f"–ù–∞–π–¥–µ–Ω–æ: {results_count}"
        keyboard.append([InlineKeyboardButton(info_text, callback_data="search_info")])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if total_pages > 1:
        pagination_row = []
        
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"search_page_{current_page - 1}_{search_context}")
            )
        
        pagination_row.append(
            InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="page_info")
        )
        
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton("‚û°Ô∏è", callback_data=f"search_page_{current_page + 1}_{search_context}")
            )
        
        keyboard.append(pagination_row)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–∏—Å–∫–æ–º
    search_actions = [
        InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=f"search_new_{search_context}"),
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data=f"search_clear_{search_context}")
    ]
    keyboard.append(search_actions)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    back_section = {
        'portfolio': 'portfolio',
        'projects': 'my_projects',
        'faq': 'faq',
        'admin': 'admin_main'
    }.get(search_context, 'main_menu')
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_section)])
    
    return InlineKeyboardMarkup(keyboard)

def get_multi_select_keyboard(
    options: List[Dict[str, Any]],
    selected_options: List[Any],
    callback_prefix: str,
    id_field: str = 'id',
    title_field: str = 'title',
    max_per_row: int = 2
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    keyboard = []
    
    # –û–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
    for i in range(0, len(options), max_per_row):
        row = []
        for j in range(max_per_row):
            if i + j < len(options):
                option = options[i + j]
                option_id = option[id_field]
                option_title = option[title_field]
                
                is_selected = option_id in selected_options
                button_text = f"{'‚úÖ' if is_selected else '‚ö™'} {option_title}"
                
                row.append(
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"{callback_prefix}_toggle_{option_id}"
                    )
                )
        
        if row:
            keyboard.append(row)
    
    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    control_row = [
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"{callback_prefix}_select_all"),
        InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å –≤—Å–µ", callback_data=f"{callback_prefix}_deselect_all")
    ]
    keyboard.append(control_row)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_row = [
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{callback_prefix}_confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{callback_prefix}_cancel")
    ]
    keyboard.append(action_row)
    
    return InlineKeyboardMarkup(keyboard)

def get_smart_navigation_keyboard(
    current_section: str,
    user_context: Optional[Dict[str, Any]] = None,
    show_shortcuts: bool = True
) -> InlineKeyboardMarkup:
    """–£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_context:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        if user_context.get('active_projects_count', 0) > 0:
            keyboard.append([
                InlineKeyboardButton("üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects")
            ])
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        if user_context.get('consultant_sessions', 0) > 5:
            keyboard.append([
                InlineKeyboardButton("ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="consultant")
            ])
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
        if user_context.get('is_new_user', False):
            keyboard.append([
                InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", callback_data="quick_start")
            ])
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
    if show_shortcuts:
        shortcuts = get_section_shortcuts(current_section)
        if shortcuts:
            keyboard.extend(shortcuts)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    main_nav = [
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu"),
        InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_tz")
    ]
    keyboard.append(main_nav)
    
    return InlineKeyboardMarkup(keyboard)

def get_section_shortcuts(section: str) -> List[List[InlineKeyboardButton]]:
    """–ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
    shortcuts = {
        'portfolio': [
            [InlineKeyboardButton("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ", callback_data="portfolio_featured")]
        ],
        'my_projects': [
            [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="create_tz")]
        ],
        'consultant': [
            [InlineKeyboardButton("üí¨ –ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="consultant_quick")]
        ],
        'calculator': [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="calc_to_tz")]
        ]
    }
    
    return shortcuts.get(section, [])

def create_items_keyboard(
    items: List[Dict[str, Any]],
    callback_prefix: str,
    title_field: str = "title",
    id_field: str = "id",
    items_per_row: int = 2,
    show_back_button: bool = True,
    back_callback: str = "main_menu",
    max_title_length: int = 20
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for i in range(0, len(items), items_per_row):
        row = []
        for j in range(items_per_row):
            if i + j < len(items):
                item = items[i + j]
                title = item.get(title_field, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                item_id = item.get(id_field, 0)
                
                # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(title) > max_title_length:
                    title = title[:max_title_length-3] + "..."
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'status' in item:
                    status_emoji = get_status_emoji(item['status'])
                    title = f"{status_emoji} {title}"
                
                row.append(
                    InlineKeyboardButton(
                        title,
                        callback_data=f"{callback_prefix}_{item_id}"
                    )
                )
        if row:
            keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if show_back_button:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)])
    
    return InlineKeyboardMarkup(keyboard)

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        'new': 'üÜï',
        'review': 'üëÄ', 
        'accepted': '‚úÖ',
        'rejected': '‚ùå',
        'in_progress': 'üîÑ',
        'testing': 'üß™',
        'completed': 'üéâ',
        'cancelled': '‚ùå',
        'paused': '‚è∏Ô∏è',
        'active': 'üü¢',
        'inactive': 'üî¥',
        'blocked': 'üö´',
        'vip': '‚≠ê',
        'featured': 'üåü',
        'draft': 'üìù',
        'published': 'üì¢',
        'archived': 'üìÅ',
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'declined': '‚ùå',
        'processing': '‚öôÔ∏è'
    }
    return status_emojis.get(status.lower(), 'üìã')

def get_breadcrumb_string(current_section: str, separator: str = " ‚Ä∫ ") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫"""
    path = navigation.get_breadcrumb_path(current_section)
    titles = [item['title'].replace('üè† ', '').replace('‚öôÔ∏è ', '') for item in path]
    return separator.join(titles)

def get_navigation_summary(current_section: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    return {
        'current_section': current_section,
        'breadcrumbs': navigation.get_breadcrumb_path(current_section),
        'parent_section': navigation.get_parent_section(current_section),
        'breadcrumb_string': get_breadcrumb_string(current_section),
        'section_title': navigation.breadcrumbs_map.get(current_section, {}).get('title', current_section)
    }

def extract_navigation_context(callback_data: str) -> Dict[str, Any]:
    """–ò–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ callback_data"""
    parts = callback_data.split('_')
    
    context = {
        'action': parts[0] if parts else '',
        'section': parts[1] if len(parts) > 1 else '',
        'subsection': parts[2] if len(parts) > 2 else '',
        'id': parts[3] if len(parts) > 3 else None,
        'extra': '_'.join(parts[4:]) if len(parts) > 4 else None
    }
    
    return context

def build_navigation_callback(
    action: str,
    section: str,
    subsection: Optional[str] = None,
    item_id: Optional[int] = None,
    extra: Optional[str] = None
) -> str:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å callback_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    parts = [action, section]
    
    if subsection:
        parts.append(subsection)
    if item_id is not None:
        parts.append(str(item_id))
    if extra:
        parts.append(extra)
    
    result = '_'.join(parts)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
    if len(result) > 64:
        result = result[:64]
    
    return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
NAVIGATION_LIMITS = {
    'MAX_BREADCRUMBS': 3,
    'MAX_BUTTONS_PER_ROW': 3,
    'MAX_TITLE_LENGTH': 25,
    'MAX_CALLBACK_LENGTH': 64,
    'MAX_RECENT_ITEMS': 10,
    'MAX_FAVORITES': 20
}

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = [
    'NavigationBreadcrumbs',
    'navigation',
    'get_navigation_keyboard',
    'get_breadcrumb_keyboard',
    'get_section_menu_keyboard',
    'get_contextual_keyboard',
    'get_step_navigation_keyboard',
    'get_search_navigation_keyboard',
    'get_multi_select_keyboard',
    'get_quick_navigation_keyboard',
    'get_smart_navigation_keyboard',
    'create_items_keyboard',
    'get_navigation_summary'
]