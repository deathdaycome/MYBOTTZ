from typing import List, Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ..keyboards.main import get_project_actions_keyboard, get_pagination_keyboard
from ...database.database import get_db_context
from ...database.models import User, Project
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler
from ...utils.helpers import format_datetime, format_currency, time_ago

logger = get_logger(__name__)

class ProjectsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.projects_per_page = 5
    
    @standard_handler
    async def show_user_projects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "show_user_projects")
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                projects = db.query(Project).filter(
                    Project.user_id == user.id
                ).order_by(Project.created_at.desc()).all()
            
            if not projects:
                await self._show_no_projects(update)
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            stats = self._calculate_project_stats(projects)
            
            text = f"""
üìä <b>–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</b>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {stats['total']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(stats['total_cost'])}

<b>–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:</b>
            """
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤
            for i, project in enumerate(projects[:5], 1):
                status_emoji = self._get_status_emoji(project.status)
                created_date = time_ago(project.created_at) if project.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                text += f"\n<b>{i}. {project.title}</b>\n"
                text += f"{status_emoji} {self._get_status_name(project.status)}\n"
                text += f"üí∞ {format_currency(project.estimated_cost)}\n"
                text += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_date}\n"
            
            keyboard = self._create_projects_keyboard(projects)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_projects: {e}")
    
    @standard_handler
    async def show_project_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('project_details_', ''))
            
            log_user_action(user_id, "show_project_details", str(project_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç user –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç
                project.user = user
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            text = f"""
üìã <b>–ü—Ä–æ–µ–∫—Ç #{project.id}</b>

<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project.title}

<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b>
{project.description[:300]}{'...' if len(project.description) > 300 else ''}

<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {self._get_status_emoji(project.status)} {self._get_status_name(project.status)}
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {project.complexity}
‚Ä¢ –¢–∏–ø: {self._get_type_name(project.project_type)}

<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(project.estimated_cost)}
{('‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ' + format_currency(project.final_cost)) if project.final_cost else ''}

<b>‚è± –í—Ä–µ–º—è:</b>
‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {project.estimated_hours} —á–∞—Å–æ–≤
{'‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: ' + str(project.actual_hours) + ' —á–∞—Å–æ–≤' if project.actual_hours else ''}

<b>üìÖ –î–∞—Ç—ã:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω: {format_datetime(project.created_at) if project.created_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {format_datetime(project.updated_at) if project.updated_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
{'‚Ä¢ –î–µ–¥–ª–∞–π–Ω: ' + format_datetime(project.deadline) if project.deadline else ''}

{self._get_project_credentials_info(project)}
            """
            
            keyboard = get_project_actions_keyboard(project.id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_details: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
    
    @standard_handler
    async def show_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "show_portfolio")
            
            text = """
üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</b>

üöÄ <b>–ù–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è:</b>

<b>ü§ñ Telegram-–±–æ—Ç—ã:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∫–æ—Ä–∑–∏–Ω–æ–π
‚Ä¢ CRM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üí¨ WhatsApp-–±–æ—Ç—ã:</b>
‚Ä¢ –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
‚Ä¢ –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É

<b>üåê –í–µ–±-—á–∞—Ç–±–æ—Ç—ã:</b>
‚Ä¢ –ü–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Å–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫
‚Ä¢ FAQ-–±–æ—Ç –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏

<b>üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ CRM (amoCRM, –ë–∏—Ç—Ä–∏–∫—Å24)
‚Ä¢ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í–Ω–µ—à–Ω–∏–µ API
‚Ä¢ –°–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥–µ–º–æ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("ü§ñ Telegram –±–æ—Ç—ã", callback_data="portfolio_telegram"),
                    InlineKeyboardButton("üí¨ WhatsApp –±–æ—Ç—ã", callback_data="portfolio_whatsapp")
                ],
                [
                    InlineKeyboardButton("üåê –í–µ–±-–±–æ—Ç—ã", callback_data="portfolio_web"),
                    InlineKeyboardButton("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="portfolio_integrations")
                ],
                [
                    InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_tz"),
                    InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio: {e}")

    def _calculate_project_stats(self, projects: List[Project]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        stats = {
            'total': len(projects),
            'in_progress': 0,
            'completed': 0,
            'total_cost': 0
        }
        
        for project in projects:
            if project.status in ['in_progress', 'testing']:
                stats['in_progress'] += 1
            elif project.status == 'completed':
                stats['completed'] += 1
            
            stats['total_cost'] += project.final_cost or project.estimated_cost or 0
        
        return stats
    
    def _get_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            'new': 'üÜï',
            'review': 'üëÄ',
            'accepted': '‚úÖ',
            'in_progress': 'üîÑ',
            'testing': 'üß™',
            'completed': 'üéâ',
            'cancelled': '‚ùå'
        }
        return emojis.get(status, 'üìä')
    
    def _get_status_name(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        names = {
            'new': '–ù–æ–≤—ã–π',
            'review': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            'accepted': '–ü—Ä–∏–Ω—è—Ç',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'testing': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        }
        return names.get(status, status)
    
    def _get_type_name(self, project_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        names = {
            'telegram_bot': 'Telegram –±–æ—Ç',
            'whatsapp_bot': 'WhatsApp –±–æ—Ç',
            'web_bot': '–í–µ–±-–±–æ—Ç',
            'integration': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        }
        return names.get(project_type, project_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    def _create_projects_keyboard(self, projects: List[Project]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        keyboard = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤
        for project in projects[:5]:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìã {project.title[:25]}{'...' if len(project.title) > 25 else ''}",
                    callback_data=f"project_details_{project.id}"
                )
            ])
        
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        if len(projects) > 5:
            keyboard.append([
                InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="all_projects")
            ])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.append([
            InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="create_tz"),
            InlineKeyboardButton("ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="consultant")
        ])
        
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _show_no_projects(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        text = """
üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</b>

–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

<b>üöÄ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å AI
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é

<b>üí° –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å:</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ  
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_tz")],
            [InlineKeyboardButton("ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="consultant")],
            [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
            [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

    def _get_project_credentials_info(self, project: Project) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ (Timeweb, Bot Token)"""
        credentials_info = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ preferences –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if project.user and project.user.preferences:
            user_preferences = project.user.preferences
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Timeweb
            timeweb_creds = user_preferences.get('timeweb_credentials')
            if timeweb_creds:
                credentials_info.append(f"""
<b>üåê Timeweb —Ö–æ—Å—Ç–∏–Ω–≥:</b>
‚Ä¢ –õ–æ–≥–∏–Ω: <code>{timeweb_creds.get('login', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>
‚Ä¢ –ü–∞—Ä–æ–ª—å: <code>{timeweb_creds.get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω: {timeweb_creds.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}""")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Bot Token
            bot_token = user_preferences.get('bot_token')
            if bot_token:
                # –°–∫—Ä—ã–≤–∞–µ–º –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                masked_token = bot_token[:10] + "..." + bot_token[-10:] if len(bot_token) > 20 else bot_token
                token_added = user_preferences.get('bot_token_added_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                credentials_info.append(f"""
<b>ü§ñ Bot API Token:</b>
‚Ä¢ –¢–æ–∫–µ–Ω: <code>{masked_token}</code>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω: {token_added}""")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º project_metadata (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if project.project_metadata:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Timeweb –∏–∑ project_metadata
            timeweb_creds = project.project_metadata.get('timeweb_credentials')
            if timeweb_creds and not any('üåê Timeweb —Ö–æ—Å—Ç–∏–Ω–≥:' in info for info in credentials_info):
                credentials_info.append(f"""
<b>üåê Timeweb —Ö–æ—Å—Ç–∏–Ω–≥ (–ø—Ä–æ–µ–∫—Ç):</b>
‚Ä¢ –õ–æ–≥–∏–Ω: <code>{timeweb_creds.get('login', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>
‚Ä¢ –ü–∞—Ä–æ–ª—å: <code>{timeweb_creds.get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>""")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Bot Token –∏–∑ project_metadata
            bot_token = project.project_metadata.get('bot_token')
            if bot_token and not any('ü§ñ Bot API Token:' in info for info in credentials_info):
                # –°–∫—Ä—ã–≤–∞–µ–º –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                masked_token = bot_token[:10] + "..." + bot_token[-10:] if len(bot_token) > 20 else bot_token
                token_added = project.project_metadata.get('bot_token_added_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                credentials_info.append(f"""
<b>ü§ñ Bot API Token (–ø—Ä–æ–µ–∫—Ç):</b>
‚Ä¢ –¢–æ–∫–µ–Ω: <code>{masked_token}</code>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω: {token_added}""")
        
        return '\n'.join(credentials_info) if credentials_info else ""

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
projects_handler = ProjectsHandler()