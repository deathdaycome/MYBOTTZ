from typing import List, Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes
import os
import uuid
from pathlib import Path

from ..keyboards.main import (
    get_project_revisions_keyboard, 
    get_revision_actions_keyboard,
    get_revision_priority_keyboard,
    get_confirm_revision_keyboard,
    get_file_type_keyboard
)
from ...database.database import get_db_context
from ...database.models import User, Project, ProjectRevision, RevisionMessage, RevisionFile, RevisionMessageFile
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler
from ...utils.helpers import format_datetime, format_currency, time_ago

logger = get_logger(__name__)

class RevisionsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.revisions_per_page = 5
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–æ–∫
        self.upload_dir = Path("uploads/revisions/bot")
        self.upload_dir.mkdir(parents=True, exist_ok=True)
    
    @standard_handler
    async def show_project_revisions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('project_revisions_', ''))
            
            log_user_action(user_id, "show_project_revisions", str(project_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                revisions = db.query(ProjectRevision).filter(
                    ProjectRevision.project_id == project_id,
                    ProjectRevision.created_by_id == user.id
                ).order_by(ProjectRevision.created_at.desc()).all()
            
            if not revisions:
                text = f"""
üìã <b>–ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "{project.title}"</b>

‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É</b>

üí° <i>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∫—É.</i>

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∫—É:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∫—É"
‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ —Ñ–∞–π–ª—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∫—É

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω—É—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.
                """
            else:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∞–≤–∫–∞–º
                stats = self._calculate_revision_stats(revisions)
                
                text = f"""
üìã <b>–ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "{project.title}"</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∞–≤–æ–∫: {stats['total']}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}

üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–≤–∫–∏:</b>
                """
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–∞–≤–∫–∏
                for revision in revisions[:3]:
                    status_emoji = self._get_revision_status_emoji(revision.status)
                    priority_emoji = self._get_revision_priority_emoji(revision.priority)
                    
                    text += f"""
{status_emoji} <b>#{revision.revision_number}</b> - {revision.title}
{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self._get_revision_priority_name(revision.priority)}
üìÖ {time_ago(revision.created_at)}
                    """
                
                if len(revisions) > 3:
                    text += f"\n<i>... –∏ –µ—â–µ {len(revisions) - 3} –ø—Ä–∞–≤–æ–∫</i>"
            
            keyboard = get_project_revisions_keyboard(project_id, len(revisions))
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_revisions: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–æ–∫")
    
    @standard_handler
    async def list_project_revisions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('list_revisions_', ''))
            
            log_user_action(user_id, "list_project_revisions", str(project_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                revisions = db.query(ProjectRevision).filter(
                    ProjectRevision.project_id == project_id,
                    ProjectRevision.created_by_id == user.id
                ).order_by(ProjectRevision.created_at.desc()).all()
                
                project = db.query(Project).filter(Project.id == project_id).first()
            
            if not revisions:
                await query.answer("–ü—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = f"""
üìã <b>–í—Å–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "{project.title}"</b>

            """
            
            for revision in revisions:
                status_emoji = self._get_revision_status_emoji(revision.status)
                priority_emoji = self._get_revision_priority_emoji(revision.priority)
                
                text += f"""
{status_emoji} <b>#{revision.revision_number}</b> - {revision.title}
{priority_emoji} {self._get_revision_priority_name(revision.priority)} | üìÖ {time_ago(revision.created_at)}
üí¨ {revision.description[:50]}{'...' if len(revision.description) > 50 else ''}

"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∫–∏
            keyboard = []
            for revision in revisions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –ø—Ä–∞–≤–æ–∫
                status_emoji = self._get_revision_status_emoji(revision.status)
                keyboard.append([
                    InlineKeyboardButton(
                        f"{status_emoji} #{revision.revision_number} - {revision.title[:20]}...",
                        callback_data=f"revision_details_{revision.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–∞–º", callback_data=f"project_revisions_{project_id}")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list_project_revisions: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–æ–∫")
    
    @standard_handler
    async def start_create_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('create_revision_', ''))
            
            log_user_action(user_id, "start_create_revision", str(project_id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['creating_revision_project_id'] = project_id
            context.user_data['creating_revision_step'] = 'title'
            
            with get_db_context() as db:
                project = db.query(Project).filter(Project.id == project_id).first()
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "{project.title}"</b>

<b>–®–∞–≥ 1 –∏–∑ 3: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—Ç—å –ø—Ä–∞–≤–∫–∏.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏"
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞"  
‚Ä¢ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"
‚Ä¢ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"

üí° <i>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º.</i>
            """
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_revisions_{project_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_revision: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏")
    
    @standard_handler
    async def handle_revision_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∫–∏"""
        try:
            if not update.message or not update.message.text:
                return
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'title' or 
                'creating_revision_project_id' not in context.user_data):
                return
            
            title = update.message.text.strip()
            
            if len(title) < 5:
                await update.message.reply_text(
                    "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            if len(title) > 200:
                await update.message.reply_text(
                    "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            context.user_data['creating_revision_title'] = title
            context.user_data['creating_revision_step'] = 'description'
            
            log_user_action(user_id, "revision_title_entered", title)
            
            project_id = context.user_data['creating_revision_project_id']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}

<b>–®–∞–≥ 2 –∏–∑ 3: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å.

<b>–•–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
‚Ä¢ –ö–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å/–≤—ã–≥–ª—è–¥–µ—Ç—å
‚Ä¢ –ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ/–≤ –∫–∞–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–±–ª–µ–º–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

<b>–ü—Ä–∏–º–µ—Ä:</b>
"–ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ '–ó–∞–∫–∞–∑–∞—Ç—å' —Å–ª–∏—à–∫–æ–º —è—Ä–∫–∞—è –∏ —Ä–µ–∂–µ—Ç –≥–ª–∞–∑–∞. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—ë –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ –æ—Ç—Ç–µ–Ω–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –¢–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è - –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 20%."

üí° <i>–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ - —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∏—Å–ø–æ–ª–Ω–∏–º!</i>
            """
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_revisions_{project_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_title: {e}")
    
    @standard_handler
    async def handle_revision_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            if not update.message or not update.message.text:
                return
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'description' or 
                'creating_revision_project_id' not in context.user_data):
                return
            
            description = update.message.text.strip()
            
            if len(description) < 10:
                await update.message.reply_text(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            context.user_data['creating_revision_description'] = description
            context.user_data['creating_revision_step'] = 'priority'
            
            log_user_action(user_id, "revision_description_entered", description[:100])
            
            project_id = context.user_data['creating_revision_project_id']
            title = context.user_data['creating_revision_title']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}{'...' if len(description) > 100 else ''}

<b>–®–∞–≥ 3 –∏–∑ 3: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —ç—Ç–æ–π –ø—Ä–∞–≤–∫–∏:

üü¢ <b>–ù–∏–∑–∫–∏–π</b> - –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è, –Ω–µ —Å—Ä–æ—á–Ω–æ
üîµ <b>–û–±—ã—á–Ω—ã–π</b> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏  
üü° <b>–í—ã—Å–æ–∫–∏–π</b> - –≤–∞–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
üî¥ <b>–°—Ä–æ—á–Ω—ã–π</b> - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

üí° <i>–û—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</i>
            """
            
            keyboard = get_revision_priority_keyboard(project_id)
            
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_description: {e}")
    
    @standard_handler
    async def handle_revision_priority(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ callback_data
            callback_parts = query.data.split('_')
            priority = callback_parts[1]  # low, normal, high, urgent
            project_id = int(callback_parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'priority' or 
                context.user_data.get('creating_revision_project_id') != project_id):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            context.user_data['creating_revision_priority'] = priority
            
            log_user_action(user_id, "revision_priority_selected", priority)
            
            title = context.user_data['creating_revision_title']
            description = context.user_data['creating_revision_description']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
‚úÖ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_revision_priority_emoji(priority)} {self._get_revision_priority_name(priority)}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
1. –í–∞—à–∞ –ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
2. –û–Ω–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–æ–∑—å–º—É—Ç –ø—Ä–∞–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
4. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üí° <i>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.</i>
            """
            
            keyboard = get_confirm_revision_keyboard(project_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_priority: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
    
    @standard_handler
    async def confirm_create_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('confirm_revision_', ''))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if (context.user_data.get('creating_revision_project_id') != project_id or
                'creating_revision_title' not in context.user_data or
                'creating_revision_description' not in context.user_data or
                'creating_revision_priority' not in context.user_data):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            title = context.user_data['creating_revision_title']
            description = context.user_data['creating_revision_description']
            priority = context.user_data['creating_revision_priority']
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
                max_revision_number = db.query(ProjectRevision.revision_number).filter(
                    ProjectRevision.project_id == project_id
                ).order_by(ProjectRevision.revision_number.desc()).first()
                
                next_revision_number = (max_revision_number[0] if max_revision_number else 0) + 1
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = ProjectRevision(
                    project_id=project_id,
                    revision_number=next_revision_number,
                    title=title,
                    description=description,
                    priority=priority,
                    status='pending',
                    created_by_id=user.id
                )
                
                db.add(revision)
                db.commit()
                db.refresh(revision)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
                for key in list(context.user_data.keys()):
                    if key.startswith('creating_revision'):
                        del context.user_data[key]
                
                log_user_action(user_id, "revision_created", f"#{revision.revision_number}")
            
            # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self._send_revision_notification(revision)
            
            text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üìã <b>#{revision.revision_number}</b> - {title}
üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(revision.created_at)}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –í –æ–∂–∏–¥–∞–Ω–∏–∏
üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_revision_priority_emoji(priority)} {self._get_revision_priority_name(priority)}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø—Ä–∞–≤–∫–µ.</i>
            """
            
            keyboard = get_revision_actions_keyboard(revision.id, project_id, revision.status)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_create_revision: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏")
    
    @standard_handler
    async def show_revision_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            revision_id = int(query.data.replace('revision_details_', ''))
            
            log_user_action(user_id, "show_revision_details", str(revision_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).filter(
                    ProjectRevision.id == revision_id,
                    ProjectRevision.created_by_id == user.id
                ).first()
                
                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
                messages_count = len(revision.messages) if revision.messages else 0
                files_count = len(revision.files) if revision.files else 0
            
            text = f"""
üìã <b>–ü—Ä–∞–≤–∫–∞ #{revision.revision_number}</b>

<b>üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {revision.title}

<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b>
{revision.description}

<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {self._get_revision_status_emoji(revision.status)} {self._get_revision_status_name(revision.status)}
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self._get_revision_priority_emoji(revision.priority)} {self._get_revision_priority_name(revision.priority)}
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {revision.project.title if revision.project else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {revision.assigned_to.username if revision.assigned_to else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

<b>üìÖ –í—Ä–µ–º—è:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {format_datetime(revision.created_at)}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {format_datetime(revision.updated_at)}
{f'‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {format_datetime(revision.completed_at)}' if revision.completed_at else ''}

<b>üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}
‚Ä¢ –§–∞–π–ª–æ–≤: {files_count}
{f'‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {revision.estimated_time} —á.' if revision.estimated_time else ''}
{f'‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: {revision.actual_time} —á.' if revision.actual_time else ''}
            """
            
            keyboard = get_revision_actions_keyboard(revision.id, revision.project_id, revision.status)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_revision_details: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∞–≤–∫–∏")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _calculate_revision_stats(self, revisions: List[ProjectRevision]) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∫–∞–º"""
        stats = {
            'total': len(revisions),
            'pending': 0,
            'in_progress': 0,
            'completed': 0,
            'rejected': 0
        }
        
        for revision in revisions:
            if revision.status in stats:
                stats[revision.status] += 1
        
        return stats
    
    def _get_revision_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        emojis = {
            'pending': '‚è≥',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'rejected': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def _get_revision_status_name(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        names = {
            'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }
        return names.get(status, status)
    
    def _get_revision_priority_emoji(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        emojis = {
            'low': 'üü¢',
            'normal': 'üîµ',
            'high': 'üü°',
            'urgent': 'üî¥'
        }
        return emojis.get(priority, '‚ö™')
    
    def _get_revision_priority_name(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        names = {
            'low': '–ù–∏–∑–∫–∏–π',
            'normal': '–û–±—ã—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'urgent': '–°—Ä–æ—á–Ω—ã–π'
        }
        return names.get(priority, priority)
    
    async def _send_revision_notification(self, revision: ProjectRevision):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            from ...services.notification_service import notification_service
            from ...database.database import get_db_context
            
            with get_db_context() as db:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
                project = db.get(Project, revision.project_id)
                client_user = db.get(User, project.user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø—Ä–∞–≤–∫–µ
                await notification_service.notify_new_revision(revision, project, client_user)
                
            logger.info(f"Revision notification sent for revision #{revision.revision_number}")
            
        except Exception as e:
            logger.error(f"Error sending revision notification: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
revisions_handler = RevisionsHandler()
