"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞
"""
import logging
import asyncio
import sys
from pathlib import Path

from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
    PicklePersistence,
)

from app.config.settings import get_settings
from app.bot.handlers.start import StartHandler
from app.bot.handlers.admin import AdminHandler, admin_command
from app.bot.handlers.consultant import ConsultantHandler
from app.bot.handlers.projects import ProjectsHandler
from app.bot.handlers.revisions import RevisionsHandler
from app.bot.handlers.tz_creation import TZCreationHandler
from app.bot.handlers.common import CommonHandler
from app.bot.handlers.portfolio import PortfolioHandler
from app.bot.handlers.bot_creation import BotCreationHandler
from app.database.database import init_db

logger = logging.getLogger(__name__)


async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


def setup_handlers(app: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    start_handler = StartHandler()
    admin_handler = AdminHandler()
    consultant_handler = ConsultantHandler()
    projects_handler = ProjectsHandler()
    revisions_handler = RevisionsHandler()
    tz_handler = TZCreationHandler()
    common_handler = CommonHandler()
    portfolio_handler = PortfolioHandler()
    bot_creation_handler = BotCreationHandler()
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_handler.start))
    app.add_handler(CommandHandler("help", start_handler.help))
    app.add_handler(CommandHandler("admin", admin_command))
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º conversation handlers...")
    # Conversation handlers
    if hasattr(tz_handler, 'conversation_handler'):
        app.add_handler(tz_handler.conversation_handler)
    
    if hasattr(portfolio_handler, 'conversation_handler'):
        app.add_handler(portfolio_handler.conversation_handler)
    
    # Bot creation conversation handler
    bot_token_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                bot_creation_handler.start_bot_token_entry,
                pattern="^bot_enter_token$"
            )
        ],
        states={
            1: [  # ENTER_BOT_TOKEN
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot_creation_handler.save_bot_token)
            ]
        },
        fallbacks=[
            MessageHandler(filters.COMMAND, bot_creation_handler.cancel_bot_token_entry)
        ]
    )
    app.add_handler(bot_token_conversation)
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º callback query handlers...")
    # Callback query handlers
    app.add_handler(CallbackQueryHandler(
        common_handler.handle_callback, 
        pattern="^(main_menu|back|consultant|projects|portfolio|about|calculator|faq|consultation|contacts|my_projects|create_tz|create_bot_guide)$"
    ))
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º bot creation handlers...")
    # Bot creation handlers
    app.add_handler(CallbackQueryHandler(
        bot_creation_handler.show_bot_creation_guide,
        pattern="^create_bot_guide$"
    ))
    
    app.add_handler(CallbackQueryHandler(
        bot_creation_handler.show_bot_creation_steps,
        pattern="^bot_guide_steps$"
    ))
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º message handlers...")
    # Message handlers
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        common_handler.handle_message
    ))
    
    app.add_handler(MessageHandler(
        filters.VOICE,
        common_handler.handle_voice
    ))
    
    app.add_handler(MessageHandler(
        filters.Document.ALL,
        common_handler.handle_document
    ))
    
    # Error handler
    app.add_error_handler(error_handler)
    
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = get_settings()
        
        if not settings.BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–µ–º persistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        persistence_file = Path("data/bot_persistence.pkl")
        persistence_file.parent.mkdir(exist_ok=True)
        
        persistence = PicklePersistence(filepath=str(persistence_file))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder() \
            .token(settings.BOT_TOKEN) \
            .persistence(persistence) \
            .build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º notification_service —Å –±–æ—Ç–æ–º
        from app.services.notification_service import notification_service
        notification_service.set_bot(app.bot)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(app)
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await app.run_polling(
            drop_pending_updates=True,
            allowed_updates=['message', 'callback_query', 'inline_query']
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
