#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter
"""

import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

API_KEY = os.getenv("OPENROUTER_API_KEY")
BASE_URL = os.getenv("OPENROUTER_BASE_URL", "https://openrouter.ai/api/v1")

def test_model(model_name, description=""):
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {model_name} {description}")
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}",
    }
    
    payload = {
        "model": model_name,
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ '—Ä–∞–±–æ—Ç–∞—é'"}
        ],
        "max_tokens": 10
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            ai_response = data['choices'][0]['message']['content']
            print(f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: {ai_response}")
            return True
        else:
            error_data = response.json()
            print(f"‚ùå {response.status_code}: {error_data.get('error', {}).get('message', 'Unknown error')}")
            return False
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("="*60)
    print("–¢–ï–°–¢ –î–û–°–¢–£–ü–ù–´–• –ú–û–î–ï–õ–ï–ô")
    print("="*60)
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_test = [
        ("openai/gpt-4o-mini", "üí∞ –î–µ—à–µ–≤–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è"),
        ("openai/gpt-3.5-turbo", "üí∞ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥–µ—à–µ–≤–∞—è"),
        ("anthropic/claude-3-haiku", "‚ö° –ë—ã—Å—Ç—Ä—ã–π Claude"),
        ("meta-llama/llama-3.1-8b-instruct", "ü¶ô Llama –±–µ–∑ :free"),
        ("microsoft/phi-3-mini-128k-instruct", "üî¨ Microsoft Phi"),
        ("google/gemma-2-9b-it", "üîç Google Gemma"),
        ("mistralai/mistral-7b-instruct", "üå™Ô∏è Mistral"),
    ]
    
    working_models = []
    
    for model, description in models_to_test:
        if test_model(model, description):
            working_models.append(model)
        print()
    
    print("="*60)
    print(f"–†–ê–ë–û–ß–ò–ï –ú–û–î–ï–õ–ò ({len(working_models)}):")
    for model in working_models:
        print(f"‚úÖ {model}")
    
    if working_models:
        recommended = working_models[0]
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ú–û–î–ï–õ–¨: {recommended}")
        
        # –û–±–Ω–æ–≤–∏–º –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π –º–æ–¥–µ–ª–∏
        print(f"\nüìù –î–û–ë–ê–í–¨–¢–ï –í .env:")
        print(f"DEFAULT_MODEL={recommended}")
    else:
        print("\n‚ùå –ù–ò –û–î–ù–ê –ú–û–î–ï–õ–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://openrouter.ai/")

if __name__ == "__main__":
    main()