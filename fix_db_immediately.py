#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
"""

import sqlite3
import os
import sys

def fix_database():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ë–î –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –ë–î
    possible_paths = [
        "admin_panel.db",
        "/var/www/bot_business_card/admin_panel.db",
        "/root/bot_business_card/admin_panel.db",
        os.path.join(os.path.dirname(os.path.abspath(__file__)), "admin_panel.db")
    ]
    
    db_path = None
    for path in possible_paths:
        if os.path.exists(path):
            db_path = path
            print(f"‚úì –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            break
    
    if not db_path:
        print(f"‚úó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø—É—Ç–µ–π: {possible_paths}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = {
            'projects': [
                ('source_deal_id', 'INTEGER'),
                ('paid_amount', 'REAL DEFAULT 0.0')
            ],
            'finance_transactions': [
                ('account', "VARCHAR(50) DEFAULT 'card'")
            ],
            'deals': [
                ('converted_to_project_id', 'INTEGER')
            ],
            'leads': [
                ('source', "VARCHAR(100)"),
                ('utm_source', "VARCHAR(255)"),
                ('utm_medium', "VARCHAR(255)"),
                ('utm_campaign', "VARCHAR(255)"),
                ('assigned_to', 'INTEGER'),
                ('last_contact_date', 'DATETIME'),
                ('conversion_date', 'DATETIME'),
                ('rejection_reason', 'TEXT'),
                ('budget', 'REAL'),
                ('priority', "VARCHAR(20) DEFAULT 'normal'"),
                ('tags', 'JSON'),
                ('notes', 'TEXT')
            ]
        }
        
        fixes_applied = 0
        
        for table_name, columns in required_columns.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'")
            if not cursor.fetchone():
                print(f"‚Ñπ –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cursor.execute(f"PRAGMA table_info({table_name})")
            existing_columns = [col[1] for col in cursor.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            for col_name, col_type in columns:
                if col_name not in existing_columns:
                    print(f"+ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col_name} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
                    try:
                        cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {col_name} {col_type}")
                        print(f"  ‚úì –ö–æ–ª–æ–Ω–∫–∞ {col_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {table_name}")
                        fixes_applied += 1
                    except sqlite3.OperationalError as e:
                        if "duplicate column name" in str(e):
                            print(f"  ‚Ñπ –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {table_name}")
                        else:
                            print(f"  ‚úó –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {e}")
                else:
                    print(f"  ‚úì –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {table_name}")
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_applied}")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        if 'conn' in locals():
            conn.close()
        return False

if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î...")
    print("-" * 50)
    success = fix_database()
    print("-" * 50)
    if success:
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   pm2 restart bot-business-card")
    else:
        print("‚úó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)