#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã clients - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å Avito –ø–æ–ª—è–º–∏
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É Internal Server Error –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /clients
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def fix_clients_table():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É clients, –¥–æ–±–∞–≤–ª—è—è Avito –ø–æ–ª—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ"""
    try:
        from app.database.database import engine, Base
        from app.database.crm_models import Client
        from sqlalchemy import inspect, MetaData
        
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã clients...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        inspector = inspect(engine)
        columns = inspector.get_columns('clients')
        avito_cols_before = [col['name'] for col in columns if 'avito' in col['name'].lower()]
        
        print(f"üìä –¢–µ–∫—É—â–∏–µ Avito –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {avito_cols_before}")
        print(f"üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(columns)}")
        
        if len(avito_cols_before) >= 6:
            print("‚úÖ Avito –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True
        
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã clients...")
        
        # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã clients
        metadata = MetaData()
        metadata.reflect(bind=engine, only=['clients'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        from app.database.database import get_db
        
        existing_clients = []
        with next(get_db()) as db:
            result = db.execute("SELECT * FROM clients")
            existing_clients = result.fetchall()
            column_names = [col['name'] for col in columns]
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(existing_clients)} –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É clients
        if 'clients' in metadata.tables:
            clients_table = metadata.tables['clients']
            clients_table.drop(bind=engine)
            print("üóëÔ∏è  –¢–∞–±–ª–∏—Ü–∞ clients —É–¥–∞–ª–µ–Ω–∞")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É clients —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        Client.__table__.create(bind=engine)
        print("üÜï –¢–∞–±–ª–∏—Ü–∞ clients –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å Avito –ø–æ–ª—è–º–∏")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if existing_clients:
            print("‚ôªÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            with next(get_db()) as db:
                for client_data in existing_clients:
                    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
                    client_dict = {}
                    for i, value in enumerate(client_data):
                        if i < len(column_names):
                            field_name = column_names[i]
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                            if hasattr(Client, field_name):
                                client_dict[field_name] = value
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö Avito –ø–æ–ª–µ–π
                    client_dict.setdefault('avito_chat_id', None)
                    client_dict.setdefault('avito_user_id', None)
                    client_dict.setdefault('avito_status', None)
                    client_dict.setdefault('avito_dialog_history', [])
                    client_dict.setdefault('avito_notes', None)
                    client_dict.setdefault('avito_follow_up', None)
                    
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Client
                    new_client = Client(**client_dict)
                    db.add(new_client)
                
                db.commit()
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(existing_clients)} –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        inspector = inspect(engine)
        columns_after = inspector.get_columns('clients')
        avito_cols_after = [col['name'] for col in columns_after if 'avito' in col['name'].lower()]
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   ‚úÖ Avito –ø–æ–ª—è: {avito_cols_after}")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns_after)}")
        
        if len(avito_cols_after) >= 6:
            print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üîó –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /clients –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –ù–µ –≤—Å–µ Avito –ø–æ–ª—è –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã clients")
    print("=" * 50)
    
    success = fix_clients_table()
    
    if success:
        print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        print("   sudo systemctl restart bot-admin")
    else:
        print("üí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)

if __name__ == "__main__":
    main()