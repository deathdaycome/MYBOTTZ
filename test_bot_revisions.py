#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–∫ –≤ –±–æ—Ç–µ
"""
import asyncio
from unittest.mock import MagicMock
from app.bot.handlers.revisions import RevisionsHandler
from app.database.database import get_db_context
from app.database.models import Project, User, ProjectRevision

class MockUpdate:
    def __init__(self, callback_data, user_id=123456789):
        self.callback_query = MagicMock()
        self.callback_query.data = callback_data
        self.effective_user = MagicMock()
        self.effective_user.id = user_id
        self.message = None
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        self.callback_query.edit_message_text = MagicMock()
        self.callback_query.answer = MagicMock()

class MockContext:
    def __init__(self):
        self.user_data = {}

async def test_revisions_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–∫...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = RevisionsHandler()
    
    # –ù–∞–π–¥–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    project_id = None
    with get_db_context() as db:
        project = db.query(Project).filter(Project.title.like('%–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç%')).first()
        if not project:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        project_id = project.id
        project_title = project.title
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project_title} (ID: {project_id})")
    
    # –¢–µ—Å—Ç 1: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
    update = MockUpdate(f"project_revisions_{project_id}")
    context = MockContext()
    
    try:
        await handler.show_project_revisions(update, context)
        print("‚úÖ –ü–æ–∫–∞–∑ –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∞–≤–æ–∫: {e}")
    
    # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫...")
    update = MockUpdate(f"list_revisions_{project_id}")
    context = MockContext()
    
    try:
        await handler.list_project_revisions(update, context)
        print("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–æ–∫: {e}")
    
    # –¢–µ—Å—Ç 3: –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏...")
    update = MockUpdate(f"create_revision_{project_id}")
    context = MockContext()
    
    try:
        await handler.start_create_revision(update, context)
        print("‚úÖ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω project_id: {context.user_data.get('creating_revision_project_id')}")
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∞–≥: {context.user_data.get('creating_revision_step')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 4: –î–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∞–≤–∫–∏...")
    with get_db_context() as db:
        revision = db.query(ProjectRevision).filter(ProjectRevision.project_id == project_id).first()
        if revision:
            revision_id = revision.id
            revision_number = revision.revision_number
            
            update = MockUpdate(f"revision_details_{revision_id}")
            context = MockContext()
            
            try:
                await handler.show_revision_details(update, context)
                print(f"‚úÖ –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∞–≤–∫–∏ #{revision_number} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∞–≤–∫–∏: {e}")
        else:
            print("‚ö†Ô∏è –ü—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_helper_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    handler = RevisionsHandler()
    
    # –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = ['pending', 'in_progress', 'completed', 'rejected']
    print("üìä –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:")
    for status in statuses:
        emoji = handler._get_revision_status_emoji(status)
        name = handler._get_revision_status_name(status)
        print(f"   {status}: {emoji} {name}")
    
    # –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priorities = ['low', 'normal', 'high', 'urgent']
    print("\nüéØ –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:")
    for priority in priorities:
        emoji = handler._get_revision_priority_emoji(priority)
        name = handler._get_revision_priority_name(priority)
        print(f"   {priority}: {emoji} {name}")
    
    print("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–∫")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_helper_functions()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    await test_revisions_functionality()
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
