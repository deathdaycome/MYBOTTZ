#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤–æ–∫ —á–µ—Ä–µ–∑ API
"""
import asyncio
import sys
from pathlib import Path
import aiohttp
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from app.database.database import get_db_context
from app.database.models import Project, User, ProjectRevision, AdminUser

async def test_revisions_api():
    """–¢–µ—Å—Ç API –ø—Ä–∞–≤–æ–∫"""
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    with get_db_context() as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            telegram_id=55555,
            first_name="–¢–µ—Å—Ç API",
            username="test_api_user",
            phone="+79123456789",
            email="test_api@example.com"
        )
        db.add(test_user)
        db.flush()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        test_project = Project(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è API",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è API –ø—Ä–∞–≤–æ–∫",
            user_id=test_user.id,
            status="in_progress",
            estimated_cost=75000,
            estimated_hours=60,
            complexity="high"
        )
        db.add(test_project)
        db.flush()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        test_admin = AdminUser(
            username="test_admin",
            email="admin@test.com",
            first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            last_name="–ê–¥–º–∏–Ω",
            password_hash="test_hash",
            is_active=True,
            role="executor"
        )
        db.add(test_admin)
        db.flush()
        
        db.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID {test_user.id}")
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ID {test_project.id}")
        print(f"‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: ID {test_admin.id}")
        
        return test_project.id, test_user.id, test_admin.id

async def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            endpoints = [
                "http://localhost:8000/",
                "http://localhost:8000/admin/",
                "http://localhost:8000/admin/projects",
                "http://localhost:8000/admin/revisions"
            ]
            
            for endpoint in endpoints:
                try:
                    async with session.get(endpoint, timeout=5) as response:
                        status = response.status
                        print(f"üìç {endpoint}: {status}")
                        
                        if status in [200, 302, 401]:  # 200=OK, 302=Redirect, 401=Unauthorized (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
                            print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            print(f"  ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {status}")
                            
                except asyncio.TimeoutError:
                    print(f"  ‚è∞ –¢–∞–π–º–∞—É—Ç")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (python -m app.main)")

def test_database_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–ª—è –ø—Ä–∞–≤–æ–∫"""
    
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î...")
    
    try:
        with get_db_context() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–æ–∫
            revisions_count = db.query(ProjectRevision).count()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫ –≤ –ë–î: {revisions_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            projects_count = db.query(Project).count()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î: {projects_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_count = db.query(User).count()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            admins_count = db.query(AdminUser).count()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î: {admins_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–≤–∫–∏
            recent_revisions = db.query(ProjectRevision).order_by(ProjectRevision.id.desc()).limit(3).all()
            
            if recent_revisions:
                print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–≤–∫–∏:")
                for revision in recent_revisions:
                    print(f"  ‚Ä¢ #{revision.revision_number}: {revision.title or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}")
                    print(f"    –°—Ç–∞—Ç—É—Å: {revision.status}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {revision.priority}")
            else:
                print("üìù –ü—Ä–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤–æ–∫")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
    test_database_structure()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        project_id, user_id, admin_id = await test_revisions_api()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –¢–µ—Å—Ç API
    await test_api_endpoints()
    
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–æ–∫: OK")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: OK") 
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î: OK")
    print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python -m app.main")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://localhost:8000/admin/")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∫–∞–º–∏")
    
    print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    asyncio.run(main())
