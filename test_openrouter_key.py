#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ OpenRouter API –∫–ª—é—á–∞
"""

import requests
import json

# –ù–æ–≤—ã–π –∫–ª—é—á
API_KEY = "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"
BASE_URL = "https://openrouter.ai/api/v1"

def test_openrouter_key():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á OpenRouter"""
    print("="*60)
    print("–¢–ï–°–¢ OPENROUTER API –ö–õ–Æ–ß–ê")
    print("="*60)
    print(f"–ö–ª—é—á: {API_KEY[:20]}...")
    print(f"URL: {BASE_URL}")
    print()
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}",
        "HTTP-Referer": "https://github.com/your-repo",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        "X-Title": "Avito AI Assistant"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    }
    
    # –¢–µ—Å—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é
    payload = {
        "model": "meta-llama/llama-3.1-8b-instruct:free",  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
        "messages": [
            {
                "role": "system", 
                "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π IT-–º–µ–Ω–µ–¥–∂–µ—Ä."
            },
            {
                "role": "user", 
                "content": "–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?' –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
            }
        ],
        "max_tokens": 100,
        "temperature": 0.7
    }
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –º–æ–¥–µ–ª—å: meta-llama/llama-3.1-8b-instruct:free")
    
    try:
        response = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –£–°–ü–ï–•!")
            print(f"–ú–æ–¥–µ–ª—å: {data.get('model', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            if 'choices' in data and data['choices']:
                ai_response = data['choices'][0]['message']['content']
                print(f"–û—Ç–≤–µ—Ç AI: {ai_response}")
                
                if 'usage' in data:
                    usage = data['usage']
                    print(f"–¢–æ–∫–µ–Ω—ã: {usage.get('total_tokens', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    
            print("\n" + "="*60)
            print("üéâ API –ö–õ–Æ–ß –†–ê–ë–û–¢–ê–ï–¢!")
            print("="*60)
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
            try:
                error_data = response.json()
                print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {json.dumps(error_data, indent=2)}")
            except:
                pass
                
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        import traceback
        traceback.print_exc()
        
    return False

def test_paid_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ü–õ–ê–¢–ù–£–Æ –º–æ–¥–µ–ª—å: openai/gpt-4o-mini")
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}",
    }
    
    payload = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}
        ],
        "max_tokens": 20
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=15
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            ai_response = data['choices'][0]['message']['content']
            print(f"‚úÖ GPT-4o-mini —Ä–∞–±–æ—Ç–∞–µ—Ç: {ai_response}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        
    return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å
    free_works = test_openrouter_key()
    
    # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—É—é
    if free_works:
        paid_works = test_paid_model()
        
        if paid_works:
            print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ openai/gpt-4o-mini")
        else:
            print("\nüÜì –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ meta-llama/llama-3.1-8b-instruct:free")
    else:
        print("\n‚ùå API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞")
        print("2. –ë–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ OpenRouter")
        print("3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –Ω–∞ https://openrouter.ai/keys")