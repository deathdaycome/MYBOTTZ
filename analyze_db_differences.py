#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import sys
from pathlib import Path

def get_table_schema(db_path, table_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î"""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        conn.close()
        return columns
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def compare_table_schemas(local_db, server_db, table_name):
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î"""
    local_schema = get_table_schema(local_db, table_name)
    server_schema = get_table_schema(server_db, table_name)
    
    print(f"\n=== –¢–∞–±–ª–∏—Ü–∞ {table_name} ===")
    print(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î: {len(local_schema)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ë–î: {len(server_schema)} –∫–æ–ª–æ–Ω–æ–∫")
    
    if len(local_schema) != len(server_schema):
        print("‚ö†Ô∏è –†–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫!")
        
        # –ù–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        local_cols = {col[1]: col for col in local_schema}
        server_cols = {col[1]: col for col in server_schema}
        
        missing_in_server = set(local_cols.keys()) - set(server_cols.keys())
        missing_in_local = set(server_cols.keys()) - set(local_cols.keys())
        
        if missing_in_server:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
            for col_name in missing_in_server:
                col_info = local_cols[col_name]
                print(f"   - {col_name} ({col_info[2]})")
        
        if missing_in_local:
            print("‚ûï –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
            for col_name in missing_in_local:
                col_info = server_cols[col_name]
                print(f"   - {col_name} ({col_info[2]})")
    else:
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
    
    return local_schema, server_schema

def get_all_tables(db_path):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î"""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
        tables = [row[0] for row in cursor.fetchall()]
        
        conn.close()
        return tables
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    local_db = "data/bot.db"
    
    if not Path(local_db).exists():
        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {local_db}")
        return
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    local_tables = get_all_tables(local_db)
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {len(local_tables)}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î (–º—ã –∑–Ω–∞–µ–º —á—Ç–æ users –∏–º–µ–µ—Ç 13 –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    critical_tables = ['users', 'portfolio', 'projects', 'finance_transactions']
    
    for table in critical_tables:
        if table in local_tables:
            local_schema = get_table_schema(local_db, table)
            print(f"\nüìä –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã {table}:")
            for col in local_schema:
                cid, name, col_type, not_null, default, pk = col
                null_str = "NOT NULL" if not_null else "NULL"
                pk_str = " (PK)" if pk else ""
                default_str = f" DEFAULT {default}" if default else ""
                print(f"   {name}: {col_type} {null_str}{default_str}{pk_str}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    print("\n" + "=" * 60)
    print("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:")
    
    conn = sqlite3.connect(local_db)
    cursor = conn.cursor()
    
    for table in local_tables:
        try:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"   {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"   {table}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ - {e}")
    
    conn.close()

if __name__ == "__main__":
    main()