#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import asyncio
import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.admin.routers.revisions import (
    get_revisions, get_revision, get_revision_messages, get_revision_files,
    create_revision_message_simple, update_revision
)
from app.database.database import get_db_context
from app.database.models import ProjectRevision, RevisionMessage, User, Project, AdminUser
from app.admin.middleware.auth import AdminUser as AdminUserAuth
from datetime import datetime
from unittest.mock import MagicMock
from fastapi import Request

async def test_get_revisions_api():
    """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–æ–∫"""
    print("üîß –¢–µ—Å—Ç API: GET /admin/api/revisions")
    
    try:
        with get_db_context() as db:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∞–¥–º–∏–Ω–∞
            admin = db.query(AdminUser).first()
            if not admin:
                print("  ‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            response = await get_revisions(
                db=db,
                user=admin,
                project_id=None,
                status=None,
                priority=None,
                assigned_to_me=None
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if hasattr(response, 'body'):
                data = json.loads(response.body)
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∞–≤–æ–∫: {len(data.get('data', []))}")
                
                if data.get('success') and data.get('data'):
                    sample_revision = data['data'][0]
                    print(f"  ‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∫–∏: #{sample_revision.get('revision_number')} - {sample_revision.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    return True
                else:
                    print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                    return False
            else:
                print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_get_revision_details_api():
    """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∞–≤–∫–∏"""
    print("\nüîß –¢–µ—Å—Ç API: GET /admin/api/revisions/{id}")
    
    try:
        with get_db_context() as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∫—É
            revision = db.query(ProjectRevision).first()
            if not revision:
                print("  ‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∞–¥–º–∏–Ω–∞
            admin = db.query(AdminUser).first()
            if not admin:
                print("  ‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            response = await get_revision(
                revision_id=revision.id,
                db=db,
                user=admin
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if hasattr(response, 'body'):
                data = json.loads(response.body)
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∫–∞: #{data.get('data', {}).get('revision_number')} - {data.get('data', {}).get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                if data.get('success') and data.get('data'):
                    revision_data = data['data']
                    print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {revision_data.get('status')}")
                    print(f"  ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {revision_data.get('priority')}")
                    print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π: {len(revision_data.get('messages', []))}")
                    print(f"  ‚úÖ –§–∞–π–ª–æ–≤: {len(revision_data.get('files', []))}")
                    return True
                else:
                    print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                    return False
            else:
                print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_get_revision_messages_api():
    """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∞–≤–∫–∏"""
    print("\nüîß –¢–µ—Å—Ç API: GET /admin/api/revisions/{id}/messages")
    
    try:
        with get_db_context() as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            revision = db.query(ProjectRevision).join(RevisionMessage).first()
            if not revision:
                print("  ‚ùå –ü—Ä–∞–≤–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∞–¥–º–∏–Ω–∞
            admin = db.query(AdminUser).first()
            if not admin:
                print("  ‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            response = await get_revision_messages(
                revision_id=revision.id,
                db=db,
                user=admin
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if hasattr(response, 'body'):
                data = json.loads(response.body)
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(data.get('data', []))}")
                
                if data.get('success') and data.get('data'):
                    for i, message in enumerate(data['data'][:3]):  # –ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                        print(f"    {i+1}. {message.get('sender_name')} ({message.get('sender_type')})")
                        print(f"       {message.get('content', message.get('message', ''))[:50]}...")
                    return True
                else:
                    print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                    return False
            else:
                print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_create_message_api():
    """–¢–µ—Å—Ç API —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüîß –¢–µ—Å—Ç API: POST /admin/api/revisions/messages")
    
    try:
        with get_db_context() as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∫—É
            revision = db.query(ProjectRevision).first()
            if not revision:
                print("  ‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∞–¥–º–∏–Ω–∞
            admin = db.query(AdminUser).first()
            if not admin:
                print("  ‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
            mock_request = MagicMock(spec=Request)
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ FormData
            class MockFormData:
                def __init__(self):
                    self.data = {
                        'revision_id': str(revision.id),
                        'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API',
                        'is_internal': 'false'
                    }
                
                def get(self, key):
                    return self.data.get(key)
                
                def getlist(self, key):
                    return []
            
            mock_request.form = MagicMock(return_value=MockFormData())
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = await create_revision_message_simple(
                request=mock_request,
                db=db,
                user=admin
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if hasattr(response, 'body'):
                data = json.loads(response.body)
                print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {data.get('success')}")
                print(f"  ‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {data.get('message_id')}")
                return data.get('success', False)
            else:
                print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_revision_files_api():
    """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∫–∏"""
    print("\nüîß –¢–µ—Å—Ç API: GET /admin/api/revisions/{id}/files")
    
    try:
        with get_db_context() as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∫—É
            revision = db.query(ProjectRevision).first()
            if not revision:
                print("  ‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∞–¥–º–∏–Ω–∞
            admin = db.query(AdminUser).first()
            if not admin:
                print("  ‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            response = await get_revision_files(
                revision_id=revision.id,
                db=db,
                user=admin
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if hasattr(response, 'body'):
                data = json.loads(response.body)
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(data.get('data', []))}")
                
                if data.get('success'):
                    for i, file in enumerate(data.get('data', [])[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                        print(f"    {i+1}. {file.get('filename', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        print(f"       –†–∞–∑–º–µ—Ä: {file.get('file_size', 0)} –±–∞–π—Ç")
                    return True
                else:
                    print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                    return False
            else:
                print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_bot_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    print("\nüîß –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from app.bot.handlers.common import CommonHandler
        from app.bot.handlers.revisions import RevisionsHandler
        
        common_handler = CommonHandler()
        revisions_handler = RevisionsHandler()
        
        print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            'show_project_chat',
            'show_revision_chat', 
            'start_revision_comment',
            'handle_revision_comment_text',
            'send_revision_comment',
            '_send_comment_notification'
        ]
        
        for method in required_methods:
            if hasattr(common_handler, method):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        helper_methods = [
            '_get_revision_status_emoji',
            '_get_revision_priority_emoji',
            '_format_date'
        ]
        
        for method in helper_methods:
            if hasattr(common_handler, method):
                print(f"  ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ùå –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_database_integrity():
    """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîß –¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        with get_db_context() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
            print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:")
            
            # –ü—Ä–∞–≤–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            revisions_with_projects = db.query(ProjectRevision).join(Project).count()
            total_revisions = db.query(ProjectRevision).count()
            print(f"    –ü—Ä–∞–≤–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏: {revisions_with_projects}/{total_revisions}")
            
            # –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏
            messages_with_revisions = db.query(RevisionMessage).join(ProjectRevision).count()
            total_messages = db.query(RevisionMessage).count()
            print(f"    –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏: {messages_with_revisions}/{total_messages}")
            
            # –ü—Ä–∞–≤–∫–∏ —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏
            revisions_with_creators = db.query(ProjectRevision).join(User).count()
            print(f"    –ü—Ä–∞–≤–∫–∏ —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏: {revisions_with_creators}/{total_revisions}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            sender_types = db.query(RevisionMessage.sender_type).distinct().all()
            print(f"    –¢–∏–ø—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {[t[0] for t in sender_types]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∞–≤–æ–∫
            statuses = db.query(ProjectRevision.status).distinct().all()
            print(f"    –°—Ç–∞—Ç—É—Å—ã –ø—Ä–∞–≤–æ–∫: {[s[0] for s in statuses]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            priorities = db.query(ProjectRevision.priority).distinct().all()
            print(f"    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {[p[0] for p in priorities]}")
            
            return True
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_frontend_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º"""
    print("\nüîß –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —Ñ—É–Ω–∫—Ü–∏–π:")
        
        js_functions = [
            'loadRevisions()',
            'loadRevisionMessages(revision_id)',
            'loadRevisionFiles(revision_id)',
            'addMessage()',
            'viewRevision(revision_id)',
            'updateRevisionStatus(status)'
        ]
        
        for func in js_functions:
            print(f"    ‚úÖ {func}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        
        html_elements = [
            '#revisionsTableBody',
            '#revisionMessages',
            '#revisionFiles',
            '#addMessageForm',
            '#messageText',
            '#messageFiles'
        ]
        
        for element in html_elements:
            print(f"    ‚úÖ {element}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    tests = [
        ("API: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫", test_get_revisions_api),
        ("API: –î–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏", test_get_revision_details_api),
        ("API: –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∏", test_get_revision_messages_api),
        ("API: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", test_create_message_api),
        ("API: –§–∞–π–ª—ã –ø—Ä–∞–≤–∫–∏", test_revision_files_api),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", test_bot_handlers),
        ("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î", test_database_integrity),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º", test_frontend_integration),
    ]
    
    passed = 0
    failed = 0
    
    for name, test_func in tests:
        try:
            print(f"\n{name}:")
            result = await test_func()
            if result:
                passed += 1
                print(f"‚úÖ {name}: –ü–†–û–ô–î–ï–ù")
            else:
                failed += 1
                print(f"‚ùå {name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            failed += 1
            print(f"‚ùå {name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ –í—Å–µ API —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {failed} —Ç–µ—Å—Ç–∞—Ö")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

if __name__ == "__main__":
    asyncio.run(main())