#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
"""

import sys
import os
import sqlite3
from datetime import datetime

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = "admin_panel.db"

def create_test_portfolio_item():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        cursor.execute("SELECT COUNT(*) FROM portfolio")
        count = cursor.fetchone()[0]
        
        if count > 0:
            print(f"–í –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π. –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        now = datetime.utcnow()
        
        test_data = {
            'title': 'Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞',
            'subtitle': '–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
            'description': '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ CRM, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏. –í–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.',
            'category': 'telegram_bots',
            'technologies': 'Python, FastAPI, SQLAlchemy, Telegram Bot API, HTML/CSS/JavaScript',
            'complexity': 'complex',
            'complexity_level': 8,
            'development_time': 30,
            'cost': 50000.0,
            'cost_range': '40000-60000',
            'show_cost': True,
            'demo_link': 'https://t.me/YourTestBot',
            'is_featured': True,
            'is_visible': True,
            'sort_order': 1,
            'tags': 'telegram,–±–æ—Ç,crm,–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è,–±–∏–∑–Ω–µ—Å',
            'client_name': '–û–û–û "–ü—Ä–∏–º–µ—Ä"',
            'project_status': 'completed',
            'views_count': 0,
            'likes_count': 0,
            'is_published': False,
            'created_at': now.isoformat(),
            'updated_at': now.isoformat(),
            'created_by': 1
        }
        
        # SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        columns = ', '.join(test_data.keys())
        placeholders = ', '.join(['?' for _ in test_data])
        
        sql = f"INSERT INTO portfolio ({columns}) VALUES ({placeholders})"
        cursor.execute(sql, list(test_data.values()))
        
        conn.commit()
        
        item_id = cursor.lastrowid
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å ID: {item_id}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {test_data['title']}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {test_data['category']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {test_data['project_status']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {e}")
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...")
    create_test_portfolio_item()