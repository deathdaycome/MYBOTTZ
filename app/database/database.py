from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import StaticPool
from datetime import datetime, timedelta
import os
from contextlib import contextmanager
from typing import Generator

from .models import Base
from ..config.settings import settings
from ..config.logging import get_logger

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DATABASE_ECHO,
    connect_args={"check_same_thread": False} if "sqlite" in settings.DATABASE_URL else {},
    poolclass=StaticPool if "sqlite" in settings.DATABASE_URL else None,
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        seed_initial_data()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def get_db() -> Generator[Session, None, None]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_db_connection() -> Generator[Session, None, None]:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return get_db()

@contextmanager
def get_db_context():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
        db.commit()
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        db.close()

def seed_initial_data():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from .models import Settings, FAQ, Portfolio
    
    try:
        with get_db_context() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            if db.query(Settings).first():
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            initial_settings = [
                Settings(
                    key="welcome_message",
                    value="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç-–≤–∏–∑–∏—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤. –ü–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!",
                    description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    data_type="string"
                ),
                Settings(
                    key="company_name",
                    value="BotDev Studio",
                    description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
                    data_type="string"
                ),
                Settings(
                    key="contact_email",
                    value="info@botdev.studio",
                    description="Email –¥–ª—è —Å–≤—è–∑–∏",
                    data_type="string"
                ),
                Settings(
                    key="contact_phone",
                    value="+7 (999) 123-45-67",
                    description="–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏",
                    data_type="string"
                ),
                Settings(
                    key="working_hours",
                    value="–ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)",
                    description="–†–∞–±–æ—á–∏–µ —á–∞—Å—ã",
                    data_type="string"
                )
            ]
            
            for setting in initial_settings:
                db.add(setting)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ FAQ
            initial_faq = [
                FAQ(
                    question="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞?",
                    answer="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –æ—Ç 10,000‚ÇΩ, —Å—Ä–µ–¥–Ω–∏–π –æ—Ç 25,000‚ÇΩ, —Å–ª–æ–∂–Ω—ã–π –æ—Ç 50,000‚ÇΩ. –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–≤ –¢–ó.",
                    category="pricing",
                    sort_order=1
                ),
                FAQ(
                    question="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞?",
                    answer="–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç - 3-7 –¥–Ω–µ–π, —Å—Ä–µ–¥–Ω–∏–π - 1-2 –Ω–µ–¥–µ–ª–∏, —Å–ª–æ–∂–Ω—ã–π - 2-4 –Ω–µ–¥–µ–ª–∏. –°—Ä–æ–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏.",
                    category="timeline",
                    sort_order=2
                ),
                FAQ(
                    question="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É?",
                    answer="–î–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤. –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –æ—Ç 2,000‚ÇΩ/–º–µ—Å—è—Ü.",
                    category="support",
                    sort_order=3
                ),
                FAQ(
                    question="–ú–æ–∂–µ—Ç–µ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å CRM –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏?",
                    answer="–ö–æ–Ω–µ—á–Ω–æ! –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ CRM (AmoCRM, Bitrix24), –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ API —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.",
                    category="integration",
                    sort_order=4
                ),
                FAQ(
                    question="–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –±–æ—Ç–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º?",
                    answer="–î–∞, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ—Ç–æ–≤ –¥–ª—è Telegram, WhatsApp, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –≤–µ–±-—á–∞—Ç–±–æ—Ç–æ–≤ –¥–ª—è —Å–∞–π—Ç–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.",
                    category="platforms",
                    sort_order=5
                )
            ]
            
            for faq in initial_faq:
                db.add(faq)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            initial_portfolio = [
                Portfolio(
                    title="–ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞",
                    description="–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω–æ–π, –æ–ø–ª–∞—Ç–æ–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–∫–∞–∑–∞—Ö",
                    category="telegram_bot",
                    technologies="Python, Telegram Bot API, SQLite, Stripe API",
                    complexity_level=7,
                    development_time=14,
                    cost_range="35000-45000",
                    is_featured=True,
                    sort_order=1
                ),
                Portfolio(
                    title="CRM-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                    description="–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –≤–µ–¥–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫",
                    category="telegram_bot",
                    technologies="Python, PostgreSQL, Redis, AmoCRM API",
                    complexity_level=8,
                    development_time=21,
                    cost_range="50000-70000",
                    is_featured=True,
                    sort_order=2
                ),
                Portfolio(
                    title="–ë–æ—Ç-–æ–ø—Ä–æ—Å–Ω–∏–∫ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π",
                    description="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                    category="telegram_bot",
                    technologies="Python, Chart.js, Excel API, Google Sheets",
                    complexity_level=6,
                    development_time=10,
                    cost_range="25000-35000",
                    is_featured=False,
                    sort_order=3
                )
            ]
            
            for portfolio_item in initial_portfolio:
                db.add(portfolio_item)
            
            logger.info("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def get_or_create_user(db: Session, telegram_id: int, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from .models import User
    
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        user = User(telegram_id=telegram_id, **kwargs)
        db.add(user)
        db.commit()
        db.refresh(user)
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user.last_activity = datetime.utcnow()
        db.commit()
    
    return user

def update_user_state(db: Session, telegram_id: int, state: str):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from .models import User
    from datetime import datetime
    
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if user:
        user.state = state
        user.last_activity = datetime.utcnow()
        db.commit()
        return user
    return None

def get_user_by_telegram_id(db: Session, telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    from .models import User
    return db.query(User).filter(User.telegram_id == telegram_id).first()

def create_project(db: Session, user_id: int, project_data: dict):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    from .models import Project, User
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user = db.query(User).filter(User.id == user_id).first()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    project = Project(user_id=user_id, **project_data)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user and user.preferences:
        if not project.project_metadata:
            project.project_metadata = {}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Timeweb
        if 'timeweb_credentials' in user.preferences:
            project.project_metadata['timeweb_credentials'] = user.preferences['timeweb_credentials']
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Timeweb –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        if 'bot_token' in user.preferences:
            project.project_metadata['bot_token'] = user.preferences['bot_token']
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    db.add(project)
    db.commit()
    db.refresh(project)
    logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {project.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return project

def get_user_projects(db: Session, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from .models import Project
    return db.query(Project).filter(Project.user_id == user_id).order_by(Project.created_at.desc()).all()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
def create_consultant_session(db: Session, user_id: int, session_id: str, topic: str = None):
    """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    from .models import ConsultantSession
    from datetime import datetime, timedelta
    
    session = ConsultantSession(
        user_id=user_id,
        session_id=session_id,
        topic=topic,
        expires_at=datetime.utcnow() + timedelta(hours=2)  # –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ 2 —á–∞—Å–∞
    )
    db.add(session)
    db.commit()
    db.refresh(session)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞: {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return session

def add_consultant_query(db: Session, session_id: int, user_query: str, ai_response: str, tokens_used: int = 0, response_time: float = 0.0):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"""
    from .models import ConsultantQuery
    
    query = ConsultantQuery(
        session_id=session_id,
        user_query=user_query,
        ai_response=ai_response,
        tokens_used=tokens_used,
        response_time=response_time
    )
    db.add(query)
    db.commit()
    db.refresh(query)
    return query