#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É portfolio
"""

import sqlite3
import os
from pathlib import Path

def run_migration():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ 
    # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: app/database/migrations/003_fix_portfolio_fields.py
    # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: –Ω–∞ 4 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    current_file = Path(__file__)
    project_root = current_file.parent.parent.parent.parent
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ data/bot.db –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    db_path = project_root / "data" / "bot.db"
    
    print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print(f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
    print(f"üìÇ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ data: {(project_root / 'data').exists()}")
    print(f"üóÑÔ∏è –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ bot.db: {db_path.exists()}")
    
    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        possible_paths = [
            project_root / "bot.db",
            project_root / "app" / "bot.db", 
            project_root / "app" / "data" / "bot.db"
        ]
        
        for path in possible_paths:
            print(f"ÔøΩ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {path}")
            if path.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {path}")
                db_path = path
                break
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏–≥–¥–µ.")
            return False
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ subtitle
        cursor.execute("PRAGMA table_info(portfolio)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'subtitle' not in columns:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'subtitle' –≤ —Ç–∞–±–ª–∏—Ü—É portfolio...")
            cursor.execute("ALTER TABLE portfolio ADD COLUMN subtitle VARCHAR(500)")
            conn.commit()
            print("‚úÖ –ü–æ–ª–µ 'subtitle' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚úÖ –ü–æ–ª–µ 'subtitle' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        missing_fields = []
        required_fields = [
            ('complexity_level', 'INTEGER DEFAULT 5'),
            ('cost_range', 'VARCHAR(100)'),
            ('show_cost', 'BOOLEAN DEFAULT 0'),
            ('external_links', 'TEXT'),
            ('likes_count', 'INTEGER DEFAULT 0'),
            ('client_name', 'VARCHAR(200)'),
            ('project_status', 'VARCHAR(50) DEFAULT "completed"'),
            ('completed_at', 'DATETIME'),
            ('created_by', 'INTEGER')
        ]
        
        for field_name, field_type in required_fields:
            if field_name not in columns:
                missing_fields.append((field_name, field_type))
        
        if missing_fields:
            for field_name, field_type in missing_fields:
                print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ '{field_name}'...")
                cursor.execute(f"ALTER TABLE portfolio ADD COLUMN {field_name} {field_type}")
            
            conn.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(missing_fields)} –ø–æ–ª–µ–π")
        
        conn.close()
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    run_migration()
