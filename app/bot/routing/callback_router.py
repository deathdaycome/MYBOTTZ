"""
–ï–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö callback_data
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""
import re
import logging
from typing import Dict, List, Callable, Tuple, Pattern
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class CallbackRoute:
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è callback_data"""
    def __init__(self, pattern: str, handler: Callable, priority: int = 100, description: str = ""):
        self.pattern = pattern
        self.compiled_pattern = re.compile(pattern)
        self.handler = handler
        self.priority = priority  # –ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.description = description
    
    def matches(self, callback_data: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ callback_data –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        return bool(self.compiled_pattern.match(callback_data))
    
    def __str__(self):
        return f"Route(pattern={self.pattern}, priority={self.priority}, desc={self.description})"

class CallbackRouter:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö callback_data"""
    
    def __init__(self):
        self.routes: List[CallbackRoute] = []
        self.stats = {"total_calls": 0, "handled": 0, "unhandled": 0}
    
    def register(self, pattern: str, handler: Callable, priority: int = 100, description: str = ""):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"""
        route = CallbackRoute(pattern, handler, priority, description)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
        conflicts = self._check_conflicts(route)
        if conflicts:
            logger.warning(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '{pattern}': {conflicts}")
        
        self.routes.append(route)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        self.routes.sort(key=lambda r: r.priority)
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–∞—Ä—à—Ä—É—Ç: {route}")
        return route
    
    def _check_conflicts(self, new_route: CallbackRoute) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏"""
        conflicts = []
        test_cases = [
            "main_menu", "portfolio", "create_tz", "project_123", 
            "portfolio_telegram", "tz_text", "revision_456"
        ]
        
        for test_case in test_cases:
            matching_routes = [r for r in self.routes if r.matches(test_case)]
            if matching_routes and new_route.matches(test_case):
                conflicts.append(f"'{test_case}' -> {[r.pattern for r in matching_routes]}")
        
        return conflicts
    
    async def route(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –Ω—É–∂–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É"""
        if not update.callback_query:
            return False
            
        callback_data = update.callback_query.data
        user_id = update.effective_user.id
        
        self.stats["total_calls"] += 1
        
        logger.info(f"üîÄ ROUTER: callback='{callback_data}' user={user_id}")
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        for route in self.routes:
            if route.matches(callback_data):
                try:
                    logger.info(f"‚úÖ ROUTER: –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω - {route.pattern} (priority={route.priority})")
                    await route.handler(update, context)
                    self.stats["handled"] += 1
                    return True
                except Exception as e:
                    logger.error(f"‚ùå ROUTER: –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {route.pattern}: {e}")
                    raise
        
        # –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        logger.warning(f"‚ö†Ô∏è ROUTER: –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{callback_data}'")
        self.stats["unhandled"] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            from ...handlers.start import StartHandler
            start_handler = StartHandler()
            await start_handler.start(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback: {e}")
        
        return False
    
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞"""
        return self.stats.copy()
    
    def list_routes(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        return [str(route) for route in self.routes]
    
    def validate_all_patterns(self) -> List[str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        issues = []
        
        test_cases = [
            "main_menu", "portfolio", "create_tz", "project_123", "portfolio_telegram",
            "tz_text", "tz_voice", "revision_456", "admin_stats", "consultant_new_session"
        ]
        
        for test_case in test_cases:
            matching_routes = [r for r in self.routes if r.matches(test_case)]
            if len(matching_routes) > 1:
                patterns = [r.pattern for r in matching_routes]
                issues.append(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–ª—è '{test_case}': {patterns}")
        
        return issues

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
callback_router = CallbackRouter()

def get_callback_router() -> CallbackRouter:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä"""
    return callback_router