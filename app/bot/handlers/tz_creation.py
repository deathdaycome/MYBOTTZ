import asyncio
import json
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from ..keyboards.main import get_create_tz_methods_keyboard, get_main_menu_keyboard, get_yes_no_keyboard
from ..keyboards.tz import get_tz_actions_keyboard, get_step_by_step_keyboard, get_tz_editing_keyboard
from ...database.database import get_db_context, create_project
from ...database.models import User, Project
from ...services.openai_service import ai_service
from ...services.file_service import process_uploaded_file
from ...services.speech_service import process_voice_message
from ...config.logging import get_logger, log_user_action
from ...utils.helpers import format_currency

logger = get_logger(__name__)

class TZCreationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–Ω—É—Ç—Ä—å –∫–ª–∞—Å—Å–∞
    TZ_METHOD, TZ_TEXT_INPUT, TZ_VOICE_INPUT, TZ_STEP_BY_STEP, TZ_FILE_UPLOAD, TZ_REVIEW, TZ_EDIT, DESCRIPTION, CONFIRMATION = range(9)
    
    def __init__(self):
        self.step_questions = [
            {
                "question": "üì± –ö–∞–∫–æ–π —Ç–∏–ø –±–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                "options": ["Telegram –±–æ—Ç", "WhatsApp –±–æ—Ç", "–í–µ–±-—á–∞—Ç–±–æ—Ç", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"],
                "key": "bot_type"
            },
            {
                "question": "üéØ –ö–∞–∫–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞?",
                "options": ["–ü—Ä–æ–¥–∞–∂–∏ –∏ –∑–∞–∫–∞–∑—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–î—Ä—É–≥–æ–µ"],
                "key": "main_goal"
            },
            {
                "question": "üë• –ö—Ç–æ –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?",
                "options": ["B2B –∫–ª–∏–µ–Ω—Ç—ã", "B2C –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏", "–®–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"],
                "key": "target_audience"
            },
            {
                "question": "üí∞ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏?",
                "options": ["–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–í–æ–∑–º–æ–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º", "–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ"],
                "key": "payments"
            },
            {
                "question": "üîó –ù—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏?",
                "options": ["CRM —Å–∏—Å—Ç–µ–º—ã", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "API —Å–µ—Ä–≤–∏—Å—ã", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–ù–µ –Ω—É–∂–Ω–æ"],
                "key": "integrations"
            },
            {
                "question": "üìä –ù—É–∂–Ω–∞ –ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?",
                "options": ["–î–∞, –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è", "–ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω–∫–∞", "–ù–µ –Ω—É–∂–Ω–∞"],
                "key": "admin_panel"
            },
            {
                "question": "‚è± –ö–∞–∫–∏–µ —É –≤–∞—Å —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?",
                "options": ["–°—Ä–æ—á–Ω–æ (–¥–æ –Ω–µ–¥–µ–ª–∏)", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (2-4 –Ω–µ–¥–µ–ª–∏)", "–ù–µ —Ç–æ—Ä–æ–ø–∏–º—Å—è (1-2 –º–µ—Å—è—Ü–∞)"],
                "key": "timeline"
            },
            {
                "question": "üíµ –ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç?",
                "options": ["–î–æ 25,000‚ÇΩ", "25,000-50,000‚ÇΩ", "50,000-100,000‚ÇΩ", "–°–≤—ã—à–µ 100,000‚ÇΩ", "–û–±—Å—É–¥–∏–º"],
                "key": "budget"
            }
        ]
    
    async def show_tz_creation_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "show_tz_creation_menu")
            
            text = """
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:

üîπ <b>–¢–µ–∫—Å—Ç–æ–º</b> - –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
üîπ <b>–ì–æ–ª–æ—Å–æ–º</b> - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º  
üîπ <b>–ü–æ—à–∞–≥–æ–≤–æ</b> - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç–æ–º</b> - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
            """
            
            keyboard = get_create_tz_methods_keyboard()
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
            logger.info(f"üîÑ ConversationHandler: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TZ_METHOD –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return self.TZ_METHOD
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tz_creation_menu: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó")
            return ConversationHandler.END
    
    async def select_tz_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            method = query.data.replace('tz_', '')
            
            log_user_action(user_id, "select_tz_method", method)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context
            context.user_data['tz_creation'] = {
                "method": method,
                "step": 0,
                "answers": {}
            }
            
            if method == "text":
                return await self.start_text_input(update, context)
                
            elif method == "voice":
                return await self.start_voice_input(update, context)
                
            elif method == "step_by_step":
                return await self.start_step_by_step(update, context)
                
            elif method == "upload":
                return await self.start_file_upload(update, context)
            
            else:
                await query.answer("–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_tz_method: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó")
            return ConversationHandler.END
    
    async def start_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –¢–ó —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "start_text_input")
            
            text = """
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º</b>

–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –£–∫–∞–∂–∏—Ç–µ:

‚Ä¢ –¢–∏–ø –±–æ—Ç–∞ (Telegram/WhatsApp/–≤–µ–±-–±–æ—Ç)
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
‚Ä¢ –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∏–∑–∞–π–Ω—É/–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
‚Ä¢ –ù—É–∂–Ω—ã –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç

AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¢–ó.

<i>–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:</i>
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
            return self.TZ_TEXT_INPUT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_text_input: {e}")
            return ConversationHandler.END
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¢–ó"""
        try:
            user_id = update.effective_user.id
            user_text = update.message.text
            
            log_user_action(user_id, "handle_text_input", f"Length: {len(user_text)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            if len(user_text) < 20:
                await update.message.reply_text(
                    "üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)."
                )
                return self.TZ_TEXT_INPUT
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            processing_message = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—é –¢–ó...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¢–ó —á–µ—Ä–µ–∑ AI
                tz_data = await self._generate_tz_from_text(user_text, user_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await processing_message.delete()
                
                if tz_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context
                    context.user_data['tz_creation'] = tz_data
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –¢–ó
                    await self._show_generated_tz(update, context, tz_data)
                    return self.TZ_REVIEW
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return ConversationHandler.END
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ó: {e}")
                await processing_message.delete()
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI-—Å–µ—Ä–≤–∏—Å—É.",
                    reply_markup=get_main_menu_keyboard()
                )
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_input: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
    
    async def start_voice_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –¢–ó –≥–æ–ª–æ—Å–æ–º"""
        try:
            text = """
üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</b>

–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –ß—Ç–æ –∑–∞ –±–æ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ
‚Ä¢ –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
‚Ä¢ –î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω
‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</i>
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
            return self.TZ_VOICE_INPUT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_voice_input: {e}")
            return ConversationHandler.END
    
    # –í —Ñ–∞–π–ª–µ app/bot/handlers/tz_creation.py –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ handle_voice_input –Ω–∞:

    async def handle_voice_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¢–ó –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        try:
            user_id = update.effective_user.id
            voice = update.message.voice
            
            log_user_action(user_id, "handle_voice_input", f"Duration: {voice.duration}s, Size: {voice.file_size}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            from ...services.speech_service import speech_service
            if not speech_service.is_voice_supported(voice):
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
                    "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 1 —Å–µ–∫ –¥–æ 5 –º–∏–Ω—É—Ç\n"
                    "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 50–ú–ë\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ",
                    reply_markup=get_main_menu_keyboard()
                )
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
            voice_data = await context.bot.get_file(voice.file_id)
            voice_bytes = await voice_data.download_as_bytearray()
            audio_info = await speech_service.get_audio_info(bytes(voice_bytes))
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ: {audio_info}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            processing_message = await update.message.reply_text(
                f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫\n"
                f"üîä –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏..."
            )
            
            try:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                recognized_text = await speech_service.process_voice_message(voice, context.bot)
                
                if recognized_text and len(recognized_text.strip()) >= 15:
                    logger.info(f"–†–µ—á—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: '{recognized_text}'")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                    await processing_message.edit_text(
                        f"‚úÖ –†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!\n"
                        f"ü§ñ –°–æ–∑–¥–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ..."
                    )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó
                    tz_data = await self._generate_tz_from_text(recognized_text, user_id)
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    await processing_message.delete()
                    
                    if tz_data:
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        tz_data['source'] = 'voice'
                        tz_data['recognized_text'] = recognized_text
                        tz_data['voice_duration'] = voice.duration
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context
                        context.user_data['tz_creation'] = tz_data
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        preview_text = (
                            f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n"
                            f"<i>¬´{recognized_text}¬ª</i>\n\n"
                            f"üìã <b>–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>"
                        )
                        
                        await update.message.reply_text(preview_text, parse_mode='HTML')
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¢–ó
                        await self._show_generated_tz(update, context, tz_data)
                        return self.TZ_REVIEW
                    else:
                        await update.message.reply_text(
                            f"‚úÖ <b>–†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:</b>\n"
                            f"<i>¬´{recognized_text}¬ª</i>\n\n"
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¢–ó. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ.",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="tz_voice")],
                                [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data="tz_text")],
                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                            ]),
                            parse_mode='HTML'
                        )
                        return ConversationHandler.END
                
                elif recognized_text:
                    await processing_message.delete()
                    await update.message.reply_text(
                        f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n"
                        f"<i>¬´{recognized_text}¬ª</i>\n\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–æ—Ä–æ—Ç–∫–∏–º. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¢–ó –æ–ø–∏—à–∏—Ç–µ:\n"
                        f"‚Ä¢ –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (–±–æ—Ç/—Å–∞–π—Ç/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)\n"
                        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                        f"‚Ä¢ –¶–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é\n"
                        f"‚Ä¢ –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="tz_voice")],
                            [InlineKeyboardButton("üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="tz_text")],
                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]),
                        parse_mode='HTML'
                    )
                    return ConversationHandler.END
                
                else:
                    await processing_message.delete()
                    
                    # –î–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    tips_text = (
                        "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å</b>\n\n"
                        "üéØ <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:</b>\n"
                        "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ø–µ—à–∞\n"
                        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ\n"
                        "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –±–ª–∏–∑–∫–æ –∫–æ —Ä—Ç—É\n"
                        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤—ã—Ö —à—É–º–æ–≤\n"
                        "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n\n"
                        "üó£ <b>–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:</b>\n"
                        "<i>¬´–ú–Ω–µ –Ω—É–∂–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é, –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞¬ª</i>"
                    )
                    
                    await update.message.reply_text(
                        tips_text,
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üé§ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="tz_voice")],
                            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="tz_text")],
                            [InlineKeyboardButton("üìã –ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="tz_step_by_step")],
                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]),
                        parse_mode='HTML'
                    )
                    return ConversationHandler.END
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
                await processing_message.delete()
                
                error_text = (
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                    f"üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
                    f"‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
                    f"‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                    f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                )
                
                await update.message.reply_text(
                    error_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="tz_voice")],
                        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="tz_text")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode='HTML'
                )
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_voice_input: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
    
    async def start_step_by_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¢–ó"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "start_step_by_step")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context
            context.user_data['tz_creation'] = {
                'method': 'step_by_step',
                'step': 0,
                'answers': {}
            }
            
            await self._ask_step_question(update, context, 0)
            return self.TZ_STEP_BY_STEP
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_step_by_step: {e}")
            return ConversationHandler.END
    
    async def handle_step_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
        try:
            user_id = update.effective_user.id
            callback_data = update.callback_query.data
            
            if 'tz_creation' not in context.user_data:
                await update.callback_query.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = callback_data.replace("step_", "")
            current_step = context.user_data['tz_creation']['step']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            question_key = self.step_questions[current_step]['key']
            context.user_data['tz_creation']['answers'][question_key] = answer
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            next_step = current_step + 1
            
            if next_step < len(self.step_questions):
                context.user_data['tz_creation']['step'] = next_step
                await self._ask_step_question(update, context, next_step)
                return self.TZ_STEP_BY_STEP
            else:
                # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¢–ó
                await update.callback_query.edit_message_text("ü§ñ –°–æ–∑–¥–∞—é –¢–ó –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤...")
                
                try:
                    tz_data = await self._generate_tz_from_steps(context.user_data['tz_creation']['answers'], user_id)
                    
                    if tz_data:
                        context.user_data['tz_creation'].update(tz_data)
                        await self._show_generated_tz(update, context, tz_data)
                        return self.TZ_REVIEW
                    else:
                        await update.callback_query.edit_message_text(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¢–ó. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            reply_markup=get_main_menu_keyboard()
                        )
                        return ConversationHandler.END
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ó –∏–∑ —à–∞–≥–æ–≤: {e}")
                    await update.callback_query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI-—Å–µ—Ä–≤–∏—Å—É.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return ConversationHandler.END
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_step_answer: {e}")
            return ConversationHandler.END
    
    async def start_file_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –¢–ó"""
        try:
            text = """
üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>

–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞:
‚Ä¢ PDF, DOC, DOCX
‚Ä¢ TXT —Ñ–∞–π–ª—ã
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:</i>
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
            return self.TZ_FILE_UPLOAD
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_file_upload: {e}")
            return ConversationHandler.END
    
    async def handle_file_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"""
        try:
            await update.message.reply_text(
                "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_file_upload: {e}")
            return ConversationHandler.END
    
    async def handle_review_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¢–ó"""
        try:
            callback_data = update.callback_query.data
            user_id = update.effective_user.id
            logger.info(f"handle_review_action: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, callback_data: {callback_data}")
            
            if callback_data == "review_save":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                await self._save_tz(update, context)
                return ConversationHandler.END
            elif callback_data == "review_edit":
                await update.callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                return self.TZ_REVIEW
            elif callback_data == "review_regenerate":
                await update.callback_query.answer("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                return self.TZ_REVIEW
            else:
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_review_action: {e}")
            return ConversationHandler.END

    async def _send_error_message(self, update: Update, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_text = f"‚ùå {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            keyboard = get_main_menu_keyboard()
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    async def _ask_step_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, step: int):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
        try:
            question_data = self.step_questions[step]
            
            text = f"""
üìã <b>–í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {len(self.step_questions)}</b>

{question_data['question']}
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            buttons = []
            for i, option in enumerate(question_data['options']):
                buttons.append([InlineKeyboardButton(option, callback_data=f"step_{option}")])
            
            buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(buttons)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _ask_step_question: {e}")
    
    async def _generate_tz_from_text(self, text: str, user_id: int) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¢–ó –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ create_technical_specification –≤–º–µ—Å—Ç–æ generate_response
            tz_data = await ai_service.create_technical_specification(
                user_request=text,
                additional_context={"user_id": user_id, "method": "text"}
            )
            
            return tz_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _generate_tz_from_text: {e}")
            return None
    
    async def _generate_tz_from_steps(self, answers: Dict, user_id: int) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¢–ó –∏–∑ –ø–æ—à–∞–≥–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
            answers_text = "\n".join([f"{k}: {v}" for k, v in answers.items()])
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
            project_description = f"""
–ü—Ä–æ–µ–∫—Ç –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:

{answers_text}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ create_technical_specification
            tz_data = await ai_service.create_technical_specification(
                user_request=project_description,
                additional_context={"method": "step_by_step", "user_id": user_id, "answers": answers}
            )
            
            return tz_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _generate_tz_from_steps: {e}")
            return None
    
    async def _show_generated_tz(self, update: Update, context: ContextTypes.DEFAULT_TYPE, tz_data: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¢–ó"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¢–ó, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if 'tz_text' in tz_data and tz_data['tz_text']:
                tz_text = tz_data['tz_text']
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
                if len(tz_text) > 3800:
                    tz_text = tz_text[:3800] + "\n\n... (–ø–æ–ª–Ω–æ–µ –¢–ó –±—É–¥–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ)"
                
                text = f"üìã <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n{tz_text}"
            else:
                # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                title = tz_data.get('title', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
                description = tz_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                estimated_cost = tz_data.get('estimated_cost', 0)
                complexity = tz_data.get('complexity', 'medium')
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                bot_sections = tz_data.get('bot_sections', [])
                functions = []
                if bot_sections and isinstance(bot_sections, list):
                    for section in bot_sections:
                        if isinstance(section, dict) and 'functions' in section:
                            section_functions = section['functions']
                            if isinstance(section_functions, list):
                                functions.extend(section_functions)
                
                # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑ detailed_functions
                if not functions:
                    detailed_functions = tz_data.get('detailed_functions', [])
                    if isinstance(detailed_functions, list):
                        for func in detailed_functions:
                            if isinstance(func, dict) and 'function_name' in func:
                                functions.append(func['function_name'])
                            elif isinstance(func, str):
                                functions.append(func)
                
                functions_text = self._format_list(functions) if functions else "‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
                
                text = f"""
üìã <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>

<b>üìå –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description}

<b>‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
{functions_text}

<b>üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {format_currency(estimated_cost)}

<b>üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {self._format_complexity(complexity)}
                """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="review_save"),
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="review_edit")
                ],
                [
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", callback_data="review_regenerate"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _show_generated_tz: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            logger.error(f"tz_data keys: {list(tz_data.keys()) if isinstance(tz_data, dict) else 'not dict'}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¢–ó")

    async def _save_tz(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¢–ó –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç"""
        try:
            user_id = update.effective_user.id
            logger.info(f"–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–ó –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if 'tz_creation' not in context.user_data:
                logger.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ context.user_data")
                if update.callback_query:
                    await update.callback_query.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞–π–¥–µ–Ω—ã: {list(context.user_data['tz_creation'].keys())}")
            
            tz_data = context.user_data['tz_creation']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –ë–î
            project = None
            try:
                with get_db_context() as db:
                    from ...database.database import get_or_create_user
                    user = get_or_create_user(db, user_id)
                    
                    project_data = {
                        'title': tz_data.get('title', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'),
                        'description': tz_data.get('description', ''),
                        'estimated_cost': tz_data.get('estimated_cost', 0),
                        'estimated_hours': tz_data.get('estimated_hours', 0),
                        'complexity': tz_data.get('complexity', 'medium'),
                        'status': 'new',
                        'structured_tz': tz_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –¢–ó –≤ structured_tz
                    }
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¢–ó, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
                    if 'tz_text' in tz_data and tz_data['tz_text']:
                        project_data['description'] = tz_data['tz_text'][:1000] + "..." if len(tz_data['tz_text']) > 1000 else tz_data['tz_text']
                    
                    project = create_project(db, user.id, project_data)
                    db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
                    project_id = project.id
                    
                    logger.info(f"–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={project_id}, User={user_id}")
                    
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {db_error}")
                if update.callback_query:
                    await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'tz_creation' in context.user_data:
                del context.user_data['tz_creation']
            
            title = tz_data.get('title', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
            estimated_cost = tz_data.get('estimated_cost', 0)
            
            text = f"""
‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {format_currency(estimated_cost)}

–ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
‚Ä¢ –ú—ã –æ–±—Å—É–¥–∏–º —Å—Ä–æ–∫–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"

üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚Ä¢ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
‚Ä¢ –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Timeweb –∏ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
                    InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –¢–ó", callback_data="create_tz")
                ],
                [
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _save_tz: {e}")
            try:
                if update.callback_query:
                    await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
                    await update.callback_query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=get_main_menu_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.",
                        reply_markup=get_main_menu_keyboard()
                    )
            except Exception as inner_e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {inner_e}")
    
    def _format_list(self, items):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not items:
            return "‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        if isinstance(items, list):
            formatted_items = []
            for item in items:
                if isinstance(item, dict):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                    if 'function_name' in item:
                        formatted_items.append(f"‚Ä¢ {item['function_name']}")
                    elif 'name' in item:
                        formatted_items.append(f"‚Ä¢ {item['name']}")
                    elif 'title' in item:
                        formatted_items.append(f"‚Ä¢ {item['title']}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        for key, value in item.items():
                            if isinstance(value, str) and value:
                                formatted_items.append(f"‚Ä¢ {value}")
                                break
                elif isinstance(item, str):
                    formatted_items.append(f"‚Ä¢ {item}")
                else:
                    formatted_items.append(f"‚Ä¢ {str(item)}")
            
            return "\n".join(formatted_items) if formatted_items else "‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω–æ"
        elif isinstance(items, str):
            return f"‚Ä¢ {items}"
        else:
            return f"‚Ä¢ {str(items)}"
    
    def _format_complexity(self, complexity):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"""
        complexity_map = {
            'simple': 'üü¢ –ü—Ä–æ—Å—Ç–æ–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'complex': 'üî¥ –°–ª–æ–∂–Ω—ã–π',
            'premium': 'üü£ –ü—Ä–µ–º–∏—É–º'
        }
        return complexity_map.get(complexity, 'üü° –°—Ä–µ–¥–Ω–∏–π')

    async def handle_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        if not update.message or not update.message.text:
            return
        
        user_id = update.effective_user.id
        description = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if 'tz_creation' not in context.user_data:
            context.user_data['tz_creation'] = {}
        
        context.user_data['tz_creation']['description'] = description
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return await self._show_confirmation(update, context)
        
    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        if not update.callback_query:
            return
            
        query = update.callback_query
        await query.answer()
        
        if query.data == "confirm_tz":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö)
            return await self.handle_review_action(update, context)
        
        return ConversationHandler.END
        
    async def _show_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_tz")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_tz")]
        ])
        
        text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)
            
        return self.CONFIRMATION

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
tz_creation_handler = TZCreationHandler()