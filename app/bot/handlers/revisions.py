from typing import List, Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes
import os
import uuid
import asyncio
from pathlib import Path

from ..keyboards.main import (
    get_project_revisions_keyboard, 
    get_revision_actions_keyboard,
    get_revision_priority_keyboard,
    get_confirm_revision_keyboard,
    get_file_type_keyboard
)
from ...database.database import get_db_context
from ...database.models import User, Project, ProjectRevision, RevisionMessage, RevisionFile, RevisionMessageFile
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler
from ...utils.helpers import format_datetime, format_currency, time_ago

logger = get_logger(__name__)

class RevisionsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.revisions_per_page = 5
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–æ–∫
        self.upload_dir = Path("uploads/revisions/bot")
        self.upload_dir.mkdir(parents=True, exist_ok=True)
    
    @standard_handler
    async def show_project_revisions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('project_revisions_', ''))
            
            log_user_action(user_id, "show_project_revisions", str(project_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                revisions = db.query(ProjectRevision).filter(
                    ProjectRevision.project_id == project_id,
                    ProjectRevision.created_by_id == user.id
                ).order_by(ProjectRevision.created_at.desc()).all()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∞–≤–æ–∫ –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                project_data = {
                    'id': project.id,
                    'title': project.title
                }
                
                revisions_data = []
                for revision in revisions:
                    revisions_data.append({
                        'id': revision.id,
                        'revision_number': revision.revision_number,
                        'title': revision.title,
                        'status': revision.status,
                        'priority': revision.priority,
                        'created_at': revision.created_at
                    })
            
            if not revisions_data:
                text = f"""
üìã <b>–ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "{project_data['title']}"</b>

‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É</b>

üí° <i>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∫—É.</i>

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∫—É:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∫—É"
‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ —Ñ–∞–π–ª—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∫—É

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω—É—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.
                """
            else:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∞–≤–∫–∞–º
                stats = self._calculate_revision_stats_from_data(revisions_data)
                
                text = f"""
üìã <b>–ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "{project_data['title']}"</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∞–≤–æ–∫: {stats['total']}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}

üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–≤–∫–∏:</b>
                """
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–∞–≤–∫–∏
                for revision_data in revisions_data[:3]:
                    status_emoji = self._get_revision_status_emoji(revision_data['status'])
                    priority_emoji = self._get_revision_priority_emoji(revision_data['priority'])
                    
                    text += f"""
{status_emoji} <b>#{revision_data['revision_number']}</b> - {revision_data['title']}
{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self._get_revision_priority_name(revision_data['priority'])}
üìÖ {time_ago(revision_data['created_at'])}
                    """
                
                if len(revisions_data) > 3:
                    text += f"\n<i>... –∏ –µ—â–µ {len(revisions_data) - 3} –ø—Ä–∞–≤–æ–∫</i>"
            
            keyboard = get_project_revisions_keyboard(project_id, len(revisions_data))
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_revisions: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–æ–∫")
    
    @standard_handler
    async def list_project_revisions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('list_revisions_', ''))
            
            log_user_action(user_id, "list_project_revisions", str(project_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                revisions = db.query(ProjectRevision).filter(
                    ProjectRevision.project_id == project_id,
                    ProjectRevision.created_by_id == user.id
                ).order_by(ProjectRevision.created_at.desc()).all()
                
                project = db.query(Project).filter(Project.id == project_id).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∞–≤–æ–∫ –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                project_data = {
                    'id': project.id,
                    'title': project.title
                }
                
                revisions_data = []
                for revision in revisions:
                    revisions_data.append({
                        'id': revision.id,
                        'revision_number': revision.revision_number,
                        'title': revision.title,
                        'status': revision.status,
                        'priority': revision.priority,
                        'description': revision.description,
                        'created_at': revision.created_at
                    })
            
            if not revisions_data:
                await query.answer("–ü—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = f"""
üìã <b>–í—Å–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "{project_data['title']}"</b>

            """
            
            for revision_data in revisions_data:
                status_emoji = self._get_revision_status_emoji(revision_data['status'])
                priority_emoji = self._get_revision_priority_emoji(revision_data['priority'])
                
                text += f"""
{status_emoji} <b>#{revision_data['revision_number']}</b> - {revision_data['title']}
{priority_emoji} {self._get_revision_priority_name(revision_data['priority'])} | üìÖ {time_ago(revision_data['created_at'])}
üí¨ {revision_data['description'][:50]}{'...' if len(revision_data['description']) > 50 else ''}

"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∫–∏
            keyboard = []
            for revision_data in revisions_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –ø—Ä–∞–≤–æ–∫
                status_emoji = self._get_revision_status_emoji(revision_data['status'])
                keyboard.append([
                    InlineKeyboardButton(
                        f"{status_emoji} #{revision_data['revision_number']} - {revision_data['title'][:20]}...",
                        callback_data=f"revision_details_{revision_data['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–∞–º", callback_data=f"project_revisions_{project_id}")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list_project_revisions: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–æ–∫")
    
    @standard_handler
    async def start_create_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('create_revision_', ''))
            
            log_user_action(user_id, "start_create_revision", str(project_id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['creating_revision_project_id'] = project_id
            context.user_data['creating_revision_step'] = 'title'
            
            with get_db_context() as db:
                project = db.query(Project).filter(Project.id == project_id).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                project_data = {
                    'id': project.id,
                    'title': project.title
                }
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "{project_data['title']}"</b>

<b>–®–∞–≥ 1 –∏–∑ 3: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—Ç—å –ø—Ä–∞–≤–∫–∏.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏"
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞"  
‚Ä¢ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"
‚Ä¢ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"

üí° <i>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º.</i>
            """
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_revisions_{project_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_revision: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏")
    
    @standard_handler
    async def handle_revision_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∫–∏"""
        try:
            if not update.message or not update.message.text:
                return
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'title' or 
                'creating_revision_project_id' not in context.user_data):
                return
            
            title = update.message.text.strip()
            
            if len(title) < 5:
                await update.message.reply_text(
                    "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            if len(title) > 200:
                await update.message.reply_text(
                    "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            context.user_data['creating_revision_title'] = title
            context.user_data['creating_revision_step'] = 'description'
            
            log_user_action(user_id, "revision_title_entered", title)
            
            project_id = context.user_data['creating_revision_project_id']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}

<b>–®–∞–≥ 2 –∏–∑ 3: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å.

<b>–•–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
‚Ä¢ –ö–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å/–≤—ã–≥–ª—è–¥–µ—Ç—å
‚Ä¢ –ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ/–≤ –∫–∞–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–±–ª–µ–º–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

<b>–ü—Ä–∏–º–µ—Ä:</b>
"–ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ '–ó–∞–∫–∞–∑–∞—Ç—å' —Å–ª–∏—à–∫–æ–º —è—Ä–∫–∞—è –∏ —Ä–µ–∂–µ—Ç –≥–ª–∞–∑–∞. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—ë –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ –æ—Ç—Ç–µ–Ω–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –¢–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è - –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 20%."

üí° <i>–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ - —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∏—Å–ø–æ–ª–Ω–∏–º!</i>
            """
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_revisions_{project_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_title: {e}")
    
    @standard_handler
    async def handle_revision_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            logger.info(f"üîç handle_revision_description called with update: {update}")
            
            if not update.message or not update.message.text:
                logger.info(f"üîç No message or text in update")
                return
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'description' or 
                'creating_revision_project_id' not in context.user_data):
                logger.info(f"üîç Wrong step or no project id: step={context.user_data.get('creating_revision_step')}, project_id={context.user_data.get('creating_revision_project_id')}")
                return
            
            description = update.message.text.strip()
            
            logger.info(f"üîç Revision description received: '{description}' (length: {len(description)})")
            
            if len(description) < 10:
                logger.info(f"üîç Revision description too short: {len(description)} < 10")
                await update.message.reply_text(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            context.user_data['creating_revision_description'] = description
            context.user_data['creating_revision_step'] = 'files'
            
            logger.info(f"üîç Revision description saved, step changed to 'files'")
            
            log_user_action(user_id, "revision_description_entered", description[:100])
            
            project_id = context.user_data['creating_revision_project_id']
            title = context.user_data['creating_revision_title']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}{'...' if len(description) > 100 else ''}

<b>–®–∞–≥ 3 –∏–∑ 4: –§–∞–π–ª—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>

–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É:

üì∑ <b>–°–∫—Ä–∏–Ω—à–æ—Ç—ã</b> - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã</b> - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
üé• <b>–í–∏–¥–µ–æ</b> - –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π

üí° <i>–§–∞–π–ª—ã –ø–æ–º–æ–≥—É—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å –∑–∞–¥–∞—á—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω—É–∂–Ω—ã.</i>
            """
            
            keyboard = [
                [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_files_{project_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_revisions_{project_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_description: {e}")
    
    @standard_handler
    async def handle_revision_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–∞–≤–∫–∏"""
        try:
            logger.info(f"üîç Revision files handler called: user_data={context.user_data}")
            
            if not update.message:
                logger.info(f"üîç Revision files handler: no message")
                return
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'files' or 
                'creating_revision_project_id' not in context.user_data):
                logger.info(f"üîç Revision files handler: wrong step or no project id")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'creating_revision_files' not in context.user_data:
                context.user_data['creating_revision_files'] = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = None
            if update.message.photo:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                file_info = update.message.photo[-1]
                file_type = "image"
            elif update.message.document:
                file_info = update.message.document
                file_type = "document"
            elif update.message.video:
                file_info = update.message.video
                file_type = "video"
            
            if file_info:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                context.user_data['creating_revision_files'].append({
                    'file_id': file_info.file_id,
                    'file_type': file_type,
                    'file_name': getattr(file_info, 'file_name', f"{file_type}_{len(context.user_data['creating_revision_files']) + 1}"),
                    'file_size': getattr(file_info, 'file_size', 0)
                })
                
                log_user_action(user_id, "revision_file_added", f"{file_type}_{len(context.user_data['creating_revision_files'])}")
                
                files_count = len(context.user_data['creating_revision_files'])
                project_id = context.user_data['creating_revision_project_id']
                
                text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–§–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> {files_count}

–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.

üí° <i>–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ.</i>
                """
                
                keyboard = [
                    [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"files_done_{project_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_revisions_{project_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                
                logger.info(f"üîç Revision file processed successfully: {file_type}, total files: {files_count}")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ."
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_files: {e}")
    
    @standard_handler
    async def skip_revision_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('skip_files_', ''))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'files' or 
                context.user_data.get('creating_revision_project_id') != project_id):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            context.user_data['creating_revision_step'] = 'priority'
            
            log_user_action(user_id, "revision_files_skipped")
            
            title = context.user_data['creating_revision_title']
            description = context.user_data['creating_revision_description']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}{'...' if len(description) > 100 else ''}
‚úÖ <b>–§–∞–π–ª—ã:</b> –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã

<b>–®–∞–≥ 4 –∏–∑ 4: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —ç—Ç–æ–π –ø—Ä–∞–≤–∫–∏:

üü¢ <b>–ù–∏–∑–∫–∏–π</b> - –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è, –Ω–µ —Å—Ä–æ—á–Ω–æ
üîµ <b>–û–±—ã—á–Ω—ã–π</b> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏  
üü° <b>–í—ã—Å–æ–∫–∏–π</b> - –≤–∞–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
üî¥ <b>–°—Ä–æ—á–Ω—ã–π</b> - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

üí° <i>–û—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</i>
            """
            
            keyboard = get_revision_priority_keyboard(project_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_revision_files: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @standard_handler
    async def files_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('files_done_', ''))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'files' or 
                context.user_data.get('creating_revision_project_id') != project_id):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            context.user_data['creating_revision_step'] = 'priority'
            
            log_user_action(user_id, "revision_files_done")
            
            title = context.user_data['creating_revision_title']
            description = context.user_data['creating_revision_description']
            files_count = len(context.user_data.get('creating_revision_files', []))
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}{'...' if len(description) > 100 else ''}
‚úÖ <b>–§–∞–π–ª—ã:</b> {files_count} —à—Ç.

<b>–®–∞–≥ 4 –∏–∑ 4: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —ç—Ç–æ–π –ø—Ä–∞–≤–∫–∏:

üü¢ <b>–ù–∏–∑–∫–∏–π</b> - –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è, –Ω–µ —Å—Ä–æ—á–Ω–æ
üîµ <b>–û–±—ã—á–Ω—ã–π</b> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏  
üü° <b>–í—ã—Å–æ–∫–∏–π</b> - –≤–∞–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
üî¥ <b>–°—Ä–æ—á–Ω—ã–π</b> - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

üí° <i>–û—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</i>
            """
            
            keyboard = get_revision_priority_keyboard(project_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ files_done: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @standard_handler
    async def handle_revision_priority(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ callback_data
            callback_parts = query.data.split('_')
            priority = callback_parts[1]  # low, normal, high, urgent
            project_id = int(callback_parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
            if (context.user_data.get('creating_revision_step') != 'priority' or 
                context.user_data.get('creating_revision_project_id') != project_id):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            context.user_data['creating_revision_priority'] = priority
            
            log_user_action(user_id, "revision_priority_selected", priority)
            
            title = context.user_data['creating_revision_title']
            description = context.user_data['creating_revision_description']
            
            text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>

‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
‚úÖ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_revision_priority_emoji(priority)} {self._get_revision_priority_name(priority)}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
1. –í–∞—à–∞ –ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
2. –û–Ω–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–æ–∑—å–º—É—Ç –ø—Ä–∞–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
4. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üí° <i>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.</i>
            """
            
            keyboard = get_confirm_revision_keyboard(project_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_priority: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
    
    @standard_handler
    async def confirm_create_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            project_id = int(query.data.replace('confirm_revision_', ''))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if (context.user_data.get('creating_revision_project_id') != project_id or
                'creating_revision_title' not in context.user_data or
                'creating_revision_description' not in context.user_data):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'creating_revision_priority' not in context.user_data:
                context.user_data['creating_revision_priority'] = 'normal'
            
            title = context.user_data['creating_revision_title']
            description = context.user_data['creating_revision_description']
            priority = context.user_data['creating_revision_priority']
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
                max_revision_number = db.query(ProjectRevision.revision_number).filter(
                    ProjectRevision.project_id == project_id
                ).order_by(ProjectRevision.revision_number.desc()).first()
                
                next_revision_number = (max_revision_number[0] if max_revision_number else 0) + 1
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = ProjectRevision(
                    project_id=project_id,
                    revision_number=next_revision_number,
                    title=title,
                    description=description,
                    priority=priority,
                    status='pending',
                    created_by_id=user.id
                )
                
                db.add(revision)
                db.commit()
                db.refresh(revision)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∞–≤–∫–∏
                files_data = context.user_data.get('revision_files', [])
                logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∫–∏: {len(files_data)} —Ñ–∞–π–ª–æ–≤")
                
                for file_data in files_data:
                    try:
                        logger.info(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_data['original_filename']}")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∫–∏
                        revision_dir = self.upload_dir / f"revision_{revision.id}"
                        revision_dir.mkdir(parents=True, exist_ok=True)
                        
                        # –§–∞–π–ª —É–∂–µ —Å–∫–∞—á–∞–Ω, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ
                        current_file_path = Path(file_data['file_path'])
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        file_extension = Path(file_data['original_filename']).suffix or '.file'
                        unique_filename = f"{uuid.uuid4().hex}{file_extension}"
                        new_file_path = revision_dir / unique_filename
                        
                        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                        if current_file_path.exists():
                            try:
                                import shutil
                                shutil.move(str(current_file_path), str(new_file_path))
                                logger.info(f"üìÅ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: {current_file_path} -> {new_file_path}")
                            except Exception as move_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {move_error}")
                                continue
                        else:
                            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {current_file_path}")
                            continue
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                        revision_file = RevisionFile(
                            revision_id=revision.id,
                            filename=unique_filename,
                            original_filename=file_data['original_filename'],
                            file_type=file_data['file_type'],
                            file_size=file_data.get('file_size', 0),
                            file_path=str(new_file_path),
                            uploaded_by_type='client',
                            uploaded_by_user_id=user.id,
                            description=f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"
                        )
                        
                        db.add(revision_file)
                        logger.info(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {unique_filename}")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∫–∏: {e}")
                        import traceback
                        logger.error(f"Traceback: {traceback.format_exc()}")
                        continue
                
                db.commit()
                
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∫–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
                await self._create_initial_revision_message(revision, user)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                revision_data = {
                    'id': revision.id,
                    'revision_number': revision.revision_number,
                    'title': revision.title,
                    'status': revision.status,
                    'priority': revision.priority
                }
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
                for key in list(context.user_data.keys()):
                    if key.startswith('creating_revision'):
                        del context.user_data[key]
                
                log_user_action(user_id, "revision_created", f"#{revision.revision_number}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self._send_revision_notification(revision)
            
            text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üìã <b>#{revision_data['revision_number']}</b> - {title}
üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> –¢–æ–ª—å–∫–æ —á—Ç–æ
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –í –æ–∂–∏–¥–∞–Ω–∏–∏
üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_revision_priority_emoji(priority)} {self._get_revision_priority_name(priority)}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø—Ä–∞–≤–∫–µ.</i>
            """
            
            keyboard = get_revision_actions_keyboard(revision_data['id'], project_id, revision_data['status'])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('creating_revision_project_id', None)
            context.user_data.pop('creating_revision_title', None)
            context.user_data.pop('creating_revision_description', None)
            context.user_data.pop('creating_revision_priority', None)
            context.user_data.pop('creating_revision_step', None)
            context.user_data.pop('revision_files', None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_create_revision: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏")
    
    @standard_handler
    async def show_revision_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            revision_id = int(query.data.replace('revision_details_', ''))
            
            log_user_action(user_id, "show_revision_details", str(revision_id))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).filter(
                    ProjectRevision.id == revision_id,
                    ProjectRevision.created_by_id == user.id
                ).first()
                
                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                revision_data = {
                    'id': revision.id,
                    'revision_number': revision.revision_number,
                    'title': revision.title,
                    'description': revision.description,
                    'status': revision.status,
                    'priority': revision.priority,
                    'project_id': revision.project_id,
                    'created_at': revision.created_at,
                    'updated_at': revision.updated_at,
                    'completed_at': revision.completed_at,
                    'estimated_time': revision.estimated_time,
                    'actual_time': revision.actual_time,
                    'project_title': revision.project.title if revision.project else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'assigned_to_username': revision.assigned_to.username if revision.assigned_to else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                }
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
                messages_count = len(revision.messages) if revision.messages else 0
                files_count = len(revision.files) if revision.files else 0
            
            text = f"""
üìã <b>–ü—Ä–∞–≤–∫–∞ #{revision_data['revision_number']}</b>

<b>üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {revision_data['title']}

<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b>
{revision_data['description']}

<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {self._get_revision_status_emoji(revision_data['status'])} {self._get_revision_status_name(revision_data['status'])}
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self._get_revision_priority_emoji(revision_data['priority'])} {self._get_revision_priority_name(revision_data['priority'])}
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {revision_data['project_title']}
‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {revision_data['assigned_to_username']}

<b>üìÖ –í—Ä–µ–º—è:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {format_datetime(revision_data['created_at'])}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {format_datetime(revision_data['updated_at'])}
{f'‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {format_datetime(revision_data["completed_at"])}' if revision_data['completed_at'] else ''}

<b>üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}
‚Ä¢ –§–∞–π–ª–æ–≤: {files_count}
{f'‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {revision_data["estimated_time"]} —á.' if revision_data['estimated_time'] else ''}
{f'‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: {revision_data["actual_time"]} —á.' if revision_data['actual_time'] else ''}
            """
            
            keyboard = get_revision_actions_keyboard(revision_data['id'], revision_data['project_id'], revision_data['status'])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_revision_details: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∞–≤–∫–∏")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _calculate_revision_stats(self, revisions: List[ProjectRevision]) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∫–∞–º"""
        stats = {
            'total': len(revisions),
            'pending': 0,
            'in_progress': 0,
            'completed': 0,
            'rejected': 0
        }
        
        for revision in revisions:
            if revision.status in stats:
                stats[revision.status] += 1
        
        return stats
    
    def _calculate_revision_stats_from_data(self, revisions_data: List[dict]) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∫–∞–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        stats = {
            'total': len(revisions_data),
            'pending': 0,
            'in_progress': 0,
            'completed': 0,
            'rejected': 0
        }
        
        for revision_data in revisions_data:
            if revision_data['status'] in stats:
                stats[revision_data['status']] += 1
        
        return stats
    
    def _get_revision_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        emojis = {
            'pending': '‚è≥',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'rejected': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def _get_revision_status_name(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        names = {
            'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }
        return names.get(status, status)
    
    def _get_revision_priority_emoji(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        emojis = {
            'low': 'üü¢',
            'normal': 'üîµ',
            'high': 'üü°',
            'urgent': 'üî¥'
        }
        return emojis.get(priority, '‚ö™')
    
    def _get_revision_priority_name(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        names = {
            'low': '–ù–∏–∑–∫–∏–π',
            'normal': '–û–±—ã—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'urgent': '–°—Ä–æ—á–Ω—ã–π'
        }
        return names.get(priority, priority)
    
    async def _create_initial_revision_message(self, revision: ProjectRevision, user: User):
        """–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∫–∏"""
        try:
            from ...database.database import get_db_context
            
            with get_db_context() as db:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∫–∏
                priority_emoji = self._get_revision_priority_emoji(revision.priority)
                priority_name = self._get_revision_priority_name(revision.priority)
                
                message_text = f"""üìù –ù–æ–≤–∞—è –ø—Ä–∞–≤–∫–∞ #{revision.revision_number}

üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {revision.title}

üìã –û–ø–∏—Å–∞–Ω–∏–µ:
{revision.description}

{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_name}

üë§ –°–æ–∑–¥–∞–ª: {user.first_name or user.username or '–ö–ª–∏–µ–Ω—Ç'}"""
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                revision_message = RevisionMessage(
                    revision_id=revision.id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message=message_text,
                    is_internal=False
                )
                
                db.add(revision_message)
                db.commit()
                db.refresh(revision_message)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if revision.files:
                    for revision_file in revision.files:
                        try:
                            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∫–∏
                            message_file = RevisionMessageFile(
                                message_id=revision_message.id,
                                filename=revision_file.filename,
                                original_filename=revision_file.original_filename,
                                file_type=revision_file.file_type,
                                file_size=revision_file.file_size,
                                file_path=revision_file.file_path
                            )
                            
                            db.add(message_file)
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: {e}")
                            continue
                
                db.commit()
                
                logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∫–∏ #{revision.revision_number}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")

    async def _send_revision_notification(self, revision: ProjectRevision):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            from ...services.notification_service import notification_service
            from ...database.database import get_db_context
            
            with get_db_context() as db:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
                project = db.get(Project, revision.project_id)
                client_user = db.get(User, project.user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø—Ä–∞–≤–∫–µ
                logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø—Ä–∞–≤–∫–µ #{revision.revision_number}")
                try:
                    result = await notification_service.notify_new_revision(revision, project, client_user)
                    logger.info(f"üì¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    import traceback
                    logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
                
            logger.info(f"Revision notification sent for revision #{revision.revision_number}")
            
        except Exception as e:
            logger.error(f"Error sending revision notification: {e}")

    async def handle_revision_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id
            
            logger.info(f"üì∏ REVISION PHOTO HANDLER: user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if context.user_data.get('creating_revision_step') != 'files':
                logger.warning(f"üì∏ User {user_id} sent photo but not in files step")
                await update.message.reply_text(
                    "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = file.file_path.split('.')[-1] if '.' in file.file_path else 'jpg'
            filename = f"photo_{uuid.uuid4().hex}.{file_extension}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path = self.upload_dir / filename
            await file.download_to_drive(str(file_path))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ context
            if 'revision_files' not in context.user_data:
                context.user_data['revision_files'] = []
            
            context.user_data['revision_files'].append({
                'filename': filename,
                'original_filename': f"photo.{file_extension}",
                'file_path': str(file_path),
                'file_type': 'image',
                'file_size': file.file_size
            })
            
            project_id = context.user_data.get('creating_revision_project_id')
            await update.message.reply_text(
                f"üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìé –§–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {len(context.user_data['revision_files'])}\n\n"
                f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏.",
                reply_markup=get_confirm_revision_keyboard(project_id)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_revision_photo: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def handle_revision_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id
            document = update.message.document
            
            logger.info(f"üìÑ REVISION DOCUMENT HANDLER: user_id={user_id}, filename={document.file_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if context.user_data.get('creating_revision_step') != 'files':
                logger.warning(f"üìÑ User {user_id} sent document but not in files step")
                await update.message.reply_text(
                    f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{document.file_name}' –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = document.file_name.split('.')[-1] if '.' in document.file_name else 'file'
            filename = f"doc_{uuid.uuid4().hex}.{file_extension}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path = self.upload_dir / filename
            await file.download_to_drive(str(file_path))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = self._get_file_type(document.file_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ context
            if 'revision_files' not in context.user_data:
                context.user_data['revision_files'] = []
            
            context.user_data['revision_files'].append({
                'filename': filename,
                'original_filename': document.file_name,
                'file_path': str(file_path),
                'file_type': file_type,
                'file_size': file.file_size
            })
            
            project_id = context.user_data.get('creating_revision_project_id')
            await update.message.reply_text(
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{document.file_name}' –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìé –§–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {len(context.user_data['revision_files'])}\n\n"
                f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏.",
                reply_markup=get_confirm_revision_keyboard(project_id)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_revision_document: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def _get_file_type(self, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        if not filename:
            return 'other'
        
        extension = filename.lower().split('.')[-1] if '.' in filename else ''
        
        if extension in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp']:
            return 'image'
        elif extension in ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv']:
            return 'video'
        elif extension in ['pdf', 'doc', 'docx', 'txt', 'rtf']:
            return 'document'
        else:
            return 'other'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
revisions_handler = RevisionsHandler()
