"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–∞—Ç–∞ –ø—Ä–∞–≤–æ–∫
"""
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from ...database.database import get_db_context
from ...database.models import ProjectRevision, RevisionMessage, User, Project
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler
from ...utils.helpers import format_datetime, time_ago

logger = get_logger(__name__)


class RevisionChatHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ –ø—Ä–∞–≤–æ–∫"""

    @standard_handler
    async def show_revision_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            revision_id = int(query.data.replace('revision_chat_', ''))

            log_user_action(user_id, "show_revision_chat", str(revision_id))

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = db.query(RevisionMessage).filter(
                    RevisionMessage.revision_id == revision_id,
                    RevisionMessage.is_internal == False  # –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                ).order_by(RevisionMessage.created_at.desc()).limit(10).all()

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                revision_data = {
                    'id': revision.id,
                    'revision_number': revision.revision_number,
                    'title': revision.title,
                    'project_id': revision.project_id,
                    'status': revision.status
                }

                messages_data = []
                for msg in reversed(messages):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                    sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    if msg.sender_type == "client" and msg.sender_user:
                        sender_name = msg.sender_user.first_name or msg.sender_user.username or "–í—ã"
                    elif msg.sender_type in ["admin", "executor"] and msg.sender_admin:
                        sender_name = f"{msg.sender_admin.first_name or ''} {msg.sender_admin.last_name or ''}".strip() or msg.sender_admin.username or "–ö–æ–º–∞–Ω–¥–∞"

                    messages_data.append({
                        'sender_name': sender_name,
                        'sender_type': msg.sender_type,
                        'message': msg.message,
                        'created_at': msg.created_at,
                        'files_count': len(msg.files) if msg.files else 0
                    })

            if not messages_data:
                text = f"""
üí¨ <b>–ß–∞—Ç –ø—Ä–∞–≤–∫–∏ #{revision_data['revision_number']}</b>

<i>–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.</i>

–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é - –æ–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.

–ú–æ–∂–Ω–æ:
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏
‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                """
            else:
                text = f"""
üí¨ <b>–ß–∞—Ç –ø—Ä–∞–≤–∫–∏ #{revision_data['revision_number']}</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π:</b>

"""
                for msg_data in messages_data:
                    sender_emoji = "üë§" if msg_data['sender_type'] == "client" else "üë®‚Äçüíº"
                    files_info = f" üìé {msg_data['files_count']} —Ñ–∞–π–ª(–æ–≤)" if msg_data['files_count'] > 0 else ""

                    text += f"""
{sender_emoji} <b>{msg_data['sender_name']}</b> ‚Ä¢ {time_ago(msg_data['created_at'])}
{msg_data['message'][:200]}{'...' if len(msg_data['message']) > 200 else ''}{files_info}

"""

            keyboard = [
                [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"revision_write_{revision_id}")],
                [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"revision_attach_{revision_id}")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"revision_chat_{revision_id}")],
                [InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–µ", callback_data=f"revision_details_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.edit_message_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except Exception as edit_error:
                logger.warning(f"Cannot edit message, sending new one: {edit_error}")
                await query.answer()
                await query.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_revision_chat: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞")

    @standard_handler
    async def start_write_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            logger.info(f"üîµ START_WRITE_MESSAGE –≤—ã–∑–≤–∞–Ω! user={user_id}, callback_data={query.data}")

            revision_id = int(query.data.replace('revision_write_', ''))
            logger.info(f"üîµ –ò–∑–≤–ª–µ—á–µ–Ω revision_id={revision_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['writing_message_revision_id'] = revision_id
            context.user_data['writing_message_step'] = 'text'

            text = """
‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.

<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>
            """

            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"revision_chat_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_write_message: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @standard_handler
    async def close_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            revision_id = int(query.data.replace('revision_close_chat_', ''))

            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('writing_message_revision_id', None)
            context.user_data.pop('writing_message_step', None)

            await query.answer("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø—Ä–∞–≤–∫–∏
            from .revisions import revisions_handler
            await revisions_handler.show_revision_details(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ close_chat: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @standard_handler
    async def handle_chat_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            if not update.message or not update.message.text:
                return

            user_id = update.effective_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (context.user_data.get('writing_message_step') != 'text' or
                'writing_message_revision_id' not in context.user_data):
                return

            message_text = update.message.text.strip()
            revision_id = context.user_data['writing_message_revision_id']

            if len(message_text) < 1:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                return

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await update.message.reply_text("‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                revision_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message=message_text,
                    is_internal=False,
                    created_at=datetime.utcnow()
                )

                db.add(revision_message)
                db.commit()
                db.refresh(revision_message)

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: message_id={revision_message.id}, revision_id={revision_id}, sender_type=client, sender_user_id={user.id}")
                logger.info(f"üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:100]}...")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                project = db.get(Project, revision.project_id)

                log_user_action(user_id, "revision_message_sent", f"#{revision.revision_number}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            await self._send_message_notification(revision, revision_message, user, project)

            # –ù–ï –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            # context.user_data –æ—Å—Ç–∞–µ—Ç—Å—è —Å writing_message_revision_id –∏ writing_message_step

            text = f"""
‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üí¨ <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.</i>
            """

            keyboard = [
                [InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–µ", callback_data=f"revision_details_{revision_id}")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"revision_close_chat_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_chat_message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    @standard_handler
    async def handle_chat_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id

            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç
            if context.user_data.get('waiting_for_rejection_reason'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if 'rejection_files' not in context.user_data:
                    context.user_data['rejection_files'] = []

                photo = update.message.photo[-1]
                context.user_data['rejection_files'].append({
                    'type': 'photo',
                    'file_id': photo.file_id
                })

                await update.message.reply_text(
                    "üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.\n"
                    "–§–æ—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
            if (context.user_data.get('writing_message_step') != 'text' or
                'writing_message_revision_id' not in context.user_data):
                return

            revision_id = context.user_data['writing_message_revision_id']

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await update.message.reply_text("‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
                photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                file = await context.bot.get_file(photo.file_id)

                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–æ–∫
                from pathlib import Path
                upload_dir = Path("uploads/revisions/messages")
                upload_dir.mkdir(parents=True, exist_ok=True)

                import uuid
                file_extension = '.jpg'
                unique_filename = f"{uuid.uuid4().hex}{file_extension}"
                file_path = upload_dir / unique_filename

                await file.download_to_drive(file_path)

                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                caption = update.message.caption or "üì∑ –§–æ—Ç–æ"

                revision_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message=caption,
                    is_internal=False,
                    created_at=datetime.utcnow()
                )

                db.add(revision_message)
                db.commit()
                db.refresh(revision_message)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ
                message_file = RevisionMessageFile(
                    message_id=revision_message.id,
                    filename=unique_filename,
                    original_filename=f"photo_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.jpg",
                    file_type='image',
                    file_size=photo.file_size,
                    file_path=str(file_path),
                    created_at=datetime.utcnow()
                )

                db.add(message_file)
                db.commit()

                logger.info(f"üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: message_id={revision_message.id}, file_id={message_file.id}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                project = db.get(Project, revision.project_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_message_notification(revision, revision_message, user, project)

            text = f"""
‚úÖ <b>–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

üí¨ <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.</i>
            """

            keyboard = [
                [InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–µ", callback_data=f"revision_details_{revision_id}")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"revision_close_chat_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_chat_photo: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ.")

    @standard_handler
    async def handle_chat_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id

            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç
            if context.user_data.get('waiting_for_rejection_reason'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if 'rejection_files' not in context.user_data:
                    context.user_data['rejection_files'] = []

                video = update.message.video
                context.user_data['rejection_files'].append({
                    'type': 'video',
                    'file_id': video.file_id
                })

                await update.message.reply_text(
                    "üé• –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.\n"
                    "–í–∏–¥–µ–æ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
            if (context.user_data.get('writing_message_step') != 'text' or
                'writing_message_revision_id' not in context.user_data):
                return

            revision_id = context.user_data['writing_message_revision_id']

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await update.message.reply_text("‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
                video = update.message.video
                file = await context.bot.get_file(video.file_id)

                from pathlib import Path
                upload_dir = Path("uploads/revisions/messages")
                upload_dir.mkdir(parents=True, exist_ok=True)

                import uuid
                file_extension = '.mp4'
                unique_filename = f"{uuid.uuid4().hex}{file_extension}"
                file_path = upload_dir / unique_filename

                await file.download_to_drive(file_path)

                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∫ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                caption = update.message.caption or "üé• –í–∏–¥–µ–æ"

                revision_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message=caption,
                    is_internal=False,
                    created_at=datetime.utcnow()
                )

                db.add(revision_message)
                db.commit()
                db.refresh(revision_message)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ
                message_file = RevisionMessageFile(
                    message_id=revision_message.id,
                    filename=unique_filename,
                    original_filename=f"video_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.mp4",
                    file_type='video',
                    file_size=video.file_size,
                    file_path=str(file_path),
                    created_at=datetime.utcnow()
                )

                db.add(message_file)
                db.commit()

                logger.info(f"üé• –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: message_id={revision_message.id}, file_id={message_file.id}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                project = db.get(Project, revision.project_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_message_notification(revision, revision_message, user, project)

            text = f"""
‚úÖ <b>–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

üí¨ <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.</i>
            """

            keyboard = [
                [InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–µ", callback_data=f"revision_details_{revision_id}")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"revision_close_chat_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_chat_video: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")

    @standard_handler
    async def approve_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∞–≤–∫—É"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            revision_id = int(query.data.replace('revision_approve_', ''))

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                if revision.status != "completed":
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                old_status = revision.status
                revision.status = "approved"
                revision.updated_at = datetime.utcnow()

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
                approval_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message="‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É. –ü—Ä–∞–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
                    is_internal=False,
                    created_at=datetime.utcnow()
                )

                db.add(approval_message)
                db.commit()

                revision_data = {
                    'id': revision.id,
                    'revision_number': revision.revision_number,
                    'title': revision.title,
                    'project_id': revision.project_id
                }

                project = db.get(Project, revision.project_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_status_notification(revision, old_status, project, user)

            log_user_action(user_id, "revision_approved", f"#{revision_data['revision_number']}")

            text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>

–ü—Ä–∞–≤–∫–∞ #{revision_data['revision_number']} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏.

–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –Ω–∞–º–∏! üéâ
            """

            keyboard = [
                [InlineKeyboardButton("‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã", callback_data=f"revision_rate_{revision_id}")],
                [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"revision_chat_{revision_id}")],
                [InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–µ", callback_data=f"revision_details_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_revision: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @standard_handler
    async def reject_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            revision_id = int(query.data.replace('revision_reject_', ''))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã
            context.user_data['rejecting_revision_id'] = revision_id
            context.user_data['rejecting_revision_step'] = 'reason'

            text = """
‚ùå <b>–ó–∞–ø—Ä–æ—Å –¥–æ—Ä–∞–±–æ—Ç–∫–∏</b>

–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.

–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–Ω—è–ª —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.

<b>–ü—Ä–∏–º–µ—Ä:</b>
"–ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–Ω–µ–π –∞ –Ω–µ –∑–µ–ª–µ–Ω–æ–π. –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π - —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 16px."
            """

            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"revision_details_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_revision: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @standard_handler
    async def handle_rejection_reason(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        try:
            if not update.message or not update.message.text:
                return

            user_id = update.effective_user.id

            if (context.user_data.get('rejecting_revision_step') != 'reason' or
                'rejecting_revision_id' not in context.user_data):
                return

            reason = update.message.text.strip()
            revision_id = context.user_data['rejecting_revision_id']

            if len(reason) < 10:
                await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
                return

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await update.message.reply_text("‚ùå –ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                old_status = revision.status
                revision.status = "needs_rework"
                revision.updated_at = datetime.utcnow()

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
                rejection_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message=f"‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞:\n\n{reason}",
                    is_internal=False,
                    created_at=datetime.utcnow()
                )

                db.add(rejection_message)
                db.commit()

                revision_data = {
                    'id': revision.id,
                    'revision_number': revision.revision_number,
                    'project_id': revision.project_id
                }

                project = db.get(Project, revision.project_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_status_notification(revision, old_status, project, user)

            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('rejecting_revision_id', None)
            context.user_data.pop('rejecting_revision_step', None)

            log_user_action(user_id, "revision_rejected", f"#{revision_data['revision_number']}")

            text = """
‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏.

–û–Ω —É–≤–∏–¥–∏—Ç –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–Ω–µ—Å–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —Å–Ω–æ–≤–∞.
            """

            keyboard = [
                [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"revision_chat_{revision_id}")],
                [InlineKeyboardButton("üîô –ö –ø—Ä–∞–≤–∫–µ", callback_data=f"revision_details_{revision_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_rejection_reason: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    async def _send_message_notification(self, revision, message, user, project):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            from ...services.notification_service import notification_service

            await notification_service.notify_revision_message(
                revision, project, message, user, None
            )

        except Exception as e:
            logger.error(f"Error sending message notification: {e}")

    async def _send_status_notification(self, revision, old_status, project, user):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            from ...services.notification_service import notification_service

            await notification_service.notify_revision_status_changed(
                revision, project, user, old_status
            )

        except Exception as e:
            logger.error(f"Error sending status notification: {e}")

    @standard_handler
    async def show_all_my_revisions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            log_user_action(user_id, "show_all_my_revisions", "")

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JOIN —Å Project
                revisions = db.query(ProjectRevision).join(Project).filter(
                    Project.user_id == user.id
                ).order_by(ProjectRevision.created_at.desc()).limit(20).all()

                if not revisions:
                    await query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–æ–∫", show_alert=True)
                    return

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–æ–∫
                revisions_data = []
                for revision in revisions:
                    project = revision.project
                    revisions_data.append({
                        'id': revision.id,
                        'revision_number': revision.revision_number,
                        'title': revision.title,
                        'status': revision.status,
                        'priority': revision.priority,
                        'project_title': project.title,
                        'created_at': revision.created_at
                    })

            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
            status_emoji = {
                'open': 'üÜï',
                'in_progress': 'üîÑ',
                'completed': '‚úÖ',
                'rejected': '‚ùå'
            }

            text = f"üìã <b>–í–∞—à–∏ –ø—Ä–∞–≤–∫–∏</b>\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            for rev_data in revisions_data:
                emoji = status_emoji.get(rev_data['status'], 'üìù')
                button_text = f"{emoji} #{rev_data['revision_number']}: {rev_data['title'][:25]}"
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"revision_details_{rev_data['id']}"
                    )
                ])

            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.edit_message_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except Exception:
                await query.answer()
                await query.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_my_revisions: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–æ–∫")

    @standard_handler
    async def client_approve_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∫—É"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            revision_id = int(query.data.replace('revision_client_approve_', ''))

            log_user_action(user_id, "client_approve_revision", str(revision_id))

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                old_status = revision.status
                revision.status = "approved"
                revision.completed_at = datetime.utcnow()
                revision.updated_at = datetime.utcnow()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
                approval_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message="‚úÖ –ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º",
                    is_internal=False
                )
                db.add(approval_message)
                db.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                from ...services.notification_service import notification_service
                if revision.assigned_to:
                    admin_message = f"""
‚úÖ <b>–ü—Ä–∞–≤–∫–∞ #{revision.revision_number} –ø—Ä–∏–Ω—è—Ç–∞!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.first_name or user.username or '–ö–ª–∏–µ–Ω—Ç'}
üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {revision.project.title}
üîß <b>–ü—Ä–∞–≤–∫–∞:</b> {revision.title}

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ
                    """
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å telegram_id)
                    if hasattr(revision.assigned_to, 'telegram_id') and revision.assigned_to.telegram_id:
                        await notification_service.send_user_notification(
                            revision.assigned_to.telegram_id,
                            admin_message
                        )

                await query.answer("‚úÖ –ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=f"""
‚úÖ <b>–ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {revision.project.title}
üîß <b>–ü—Ä–∞–≤–∫–∞ #{revision.revision_number}:</b> {revision.title}

<b>–°—Ç–∞—Ç—É—Å:</b> –ü—Ä–∏–Ω—è—Ç–æ
<b>–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è:</b> {format_datetime(revision.completed_at)}

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üéâ
                    """,
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ client_approve_revision: {e}", exc_info=True)
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤–∫–∏")

    @standard_handler
    async def client_reject_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∫—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            revision_id = int(query.data.replace('revision_client_reject_', ''))

            log_user_action(user_id, "client_reject_revision", str(revision_id))

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã
                context.user_data['rejecting_revision_id'] = revision_id
                context.user_data['waiting_for_rejection_reason'] = True

                await query.answer()

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"revision_cancel_reject_{revision_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ü—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É
                await query.edit_message_text(
                    text=f"""
‚ùå <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {revision.project.title}
üîß <b>–ü—Ä–∞–≤–∫–∞ #{revision.revision_number}:</b> {revision.title}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å.
–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.

üí¨ <i>–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–º...</i>
                    """,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ client_reject_revision: {e}", exc_info=True)
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")

    @standard_handler
    async def cancel_reject_revision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id

            revision_id = int(query.data.replace('revision_cancel_reject_', ''))

            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
            context.user_data.pop('waiting_for_rejection_reason', None)
            context.user_data.pop('rejecting_revision_id', None)

            await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).join(Project).filter(
                    ProjectRevision.id == revision_id,
                    Project.user_id == user.id
                ).first()

                if not revision:
                    await query.edit_message_text("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∫—É",
                            callback_data=f"revision_client_approve_{revision.id}"
                        ),
                        InlineKeyboardButton(
                            "‚ùå –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É",
                            callback_data=f"revision_client_reject_{revision.id}"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    text=f"""
‚úÖ <b>–ü—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ!</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {revision.project.title}
üîß <b>–ü—Ä–∞–≤–∫–∞ #{revision.revision_number}:</b> {revision.title}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.

–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ <b>–ü—Ä–∏–Ω—è—Ç—å</b> - –µ—Å–ª–∏ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É</b> - –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    """,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_reject_revision: {e}", exc_info=True)
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
revision_chat_handlers = RevisionChatHandlers()
