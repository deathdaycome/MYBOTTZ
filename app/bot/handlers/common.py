"""
–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
"""
from telegram import Update, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from typing import Optional, Dict, Any, List, Union
from datetime import datetime, timedelta
import asyncio
import re
import traceback

from ..keyboards.main import get_main_menu_keyboard, get_back_to_main_keyboard
from ...database.database import get_db_context, get_or_create_user, update_user_state, get_user_by_telegram_id
from ...database.models import User, Settings, Project, ConsultantSession, ProjectRevision, RevisionMessage, RevisionMessageFile
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler, handle_errors, typing_action
from ...services.notification_service import NotificationService

logger = get_logger(__name__)

class CommonHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""

    async def unknown(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text if update.message else ""
            
            log_user_action(user_id, "unknown_command", message_text)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if not message_text.startswith('/'):
                # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
                return
            
            text = """
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.
            """
            
            keyboard = get_main_menu_keyboard()
            
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ unknown: {e}")

    @standard_handler
    async def show_calculator(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        try:
            text = """
üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</b>

–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ –î–∏–∑–∞–π–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ –°—Ä–æ–∫–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

<b>–ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç: –æ—Ç 15 000 ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–æ—Ç: –æ—Ç 35 000 ‚ÇΩ
‚Ä¢ –°–ª–æ–∂–Ω—ã–π –±–æ—Ç: –æ—Ç 75 000 ‚ÇΩ
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ—Ç 150 000 ‚ÇΩ

–î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üìã
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_tz")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calculator: {e}")

    @standard_handler
    async def show_faq(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        try:
            text = """
‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>ü§ñ –ß—Ç–æ —Ç–∞–∫–æ–µ Telegram-–±–æ—Ç?</b>
–≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ Telegram. –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

<b>‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞?</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç: 3-7 –¥–Ω–µ–π
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–æ—Ç: 1-2 –Ω–µ–¥–µ–ª–∏  
‚Ä¢ –°–ª–æ–∂–Ω—ã–π –±–æ—Ç: 2-4 –Ω–µ–¥–µ–ª–∏
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: 1-3 –º–µ—Å—è—Ü–∞

<b>üí∞ –ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ü–µ–Ω–∞?</b>
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –¥–∏–∑–∞–π–Ω–∞ –∏ —Å—Ä–æ–∫–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

<b>üîß –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É?</b>
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –º–µ–ª–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏.

<b>üì± –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ—Ç—ã?</b>
Telegram, WhatsApp, –≤–µ–±-—Å–∞–π—Ç—ã, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏.
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="consultant")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_faq: {e}")

    @standard_handler
    async def show_consultation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            text = """
üí¨ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>

–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ:
‚Ä¢ –í—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º –∏ API
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–æ–≤

<b>üéØ –§–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:</b>
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ (30-60 –º–∏–Ω)
‚Ä¢ –í–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å –¥–µ–º–æ
‚Ä¢ –ß–∞—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ Telegram
‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ (–ú–æ—Å–∫–≤–∞)

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>
‚Ä¢ –≠–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (15 –º–∏–Ω): –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (60 –º–∏–Ω): 3 000 ‚ÇΩ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (90 –º–∏–Ω): 5 000 ‚ÇΩ

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="consultant")],
                [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_consultation: {e}")

    @standard_handler
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback"""
        try:
            callback_data = update.callback_query.data
            user_id = update.effective_user.id
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"üîç CALLBACK RECEIVED: user_id={user_id}, callback_data='{callback_data}'")
            logger.info(f"üîç Update type: {type(update)}")
            logger.info(f"üîç CallbackQuery: {update.callback_query}")
            logger.info(f"üîç Message: {update.callback_query.message}")
            log_user_action(user_id, "callback", callback_data)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer() –¥–ª—è callback_data='{callback_data}'")
            await update.callback_query.answer()
            logger.info(f"üîç Answer() –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è callback_data='{callback_data}'")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback'–æ–≤
            if callback_data == "main_menu":
                logger.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º main_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                from ..handlers.start import StartHandler
                start_handler = StartHandler()
                await start_handler.start(update, context)
                
            elif callback_data == "calculator":
                logger.info(f"üßÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º calculator –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_calculator(update, context)
                
            elif callback_data == "faq":
                logger.info(f"‚ùì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º faq –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_faq(update, context)
                
            elif callback_data == "consultation":
                logger.info(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º consultation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_consultation(update, context)
                
            elif callback_data == "contacts":
                logger.info(f"üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º contacts –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_contacts(update, context)
                
            elif callback_data == "my_projects":
                logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º my_projects –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_my_projects(update, context)
                
            elif callback_data == "portfolio":
                logger.info(f"üíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º portfolio –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_portfolio_menu(update, context)
                
            elif callback_data == "portfolio":
                logger.info(f"üíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º portfolio –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_portfolio_categories(update, context)
                
            elif callback_data == "consultant":
                logger.info(f"ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º consultant –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_consultant_menu(update, context)
                
            elif callback_data == "create_tz":
                logger.info(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º create_tz –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                from ..handlers.tz_creation import TZCreationHandler
                tz_handler = TZCreationHandler()
                await tz_handler.show_tz_creation_menu(update, context)
                
            elif callback_data == "create_bot_guide":
                logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º create_bot_guide –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                from ..handlers.bot_creation import BotCreationHandler
                bot_handler = BotCreationHandler()
                await bot_handler.show_bot_creation_guide(update, context)
                
            elif callback_data.startswith("portfolio_"):
                logger.info(f"üíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {callback_data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_portfolio_category(update, context, callback_data)
                
            elif callback_data == "ask_question":
                logger.info(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ask_question –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_ask_question(update, context)
                
            elif callback_data == "example_questions":
                logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º example_questions –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_example_questions(update, context)
                
            elif callback_data == "settings":
                logger.info(f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_settings(update, context)
                
            elif callback_data == "setup_timeweb":
                logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º setup_timeweb –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.setup_timeweb(update, context)
                
            elif callback_data == "setup_bot_token":
                logger.info(f"ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º setup_bot_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.setup_bot_token(update, context)
                
            elif callback_data.startswith("project_chat_"):
                logger.info(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º project_chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.show_project_chat(update, context)
                
            elif callback_data.startswith("project_download_"):
                logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º project_download –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.download_project_tz(update, context)
                
            else:
                logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: '{callback_data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                text = f"""
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {callback_data}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
                """
                
                keyboard = get_main_menu_keyboard()
                
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
            logger.info(f"‚úÖ Callback '{callback_data}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
            logger.error(f"   Callback data: {callback_data if 'callback_data' in locals() else 'unknown'}")
            logger.error(f"   User ID: {user_id if 'user_id' in locals() else 'unknown'}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            try:
                keyboard = get_main_menu_keyboard()
                await update.callback_query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=keyboard
                )
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e2}")

    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"üîç MESSAGE RECEIVED: type={type(update.message)}, has_text={bool(update.message and update.message.text)}, has_photo={bool(update.message and update.message.photo)}, has_document={bool(update.message and update.message.document)}")
            
            # –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞ —ç—Ç–∞–ø–µ files - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ photo handler
            if update.message and update.message.photo and context.user_data.get('creating_revision_step') == 'files':
                logger.info(f"üîç PHOTO DETECTED IN TEXT HANDLER - routing to photo handler")
                await self.handle_photo(update, context)
                return
            
            user_id = update.effective_user.id
            message_text = update.message.text if update.message else ""
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î–´: message_text='{message_text}', startswith('/')={message_text.startswith('/')}")
            if message_text.startswith('/'):
                logger.info(f"üõë –≠–¢–û –ö–û–ú–ê–ù–î–ê - –û–ß–ò–©–ê–ï–ú –§–õ–ê–ì–ò –ò –í–´–•–û–î–ò–ú")
                context.user_data.pop('waiting_bot_token_settings', None)
                context.user_data.pop('waiting_timeweb_settings', None)
                context.user_data.pop('waiting_bot_token', None)
                context.user_data.pop('waiting_timeweb_credentials', None)
                # –î–ª—è –∫–æ–º–∞–Ω–¥ –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è CommandHandler
                return
            
            logger.info(f"üí¨ –¢–ï–ö–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –æ—Ç {user_id}: '{message_text}'")
            logger.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ context.user_data: {context.user_data}")
            
            log_user_action(user_id, "text_message", message_text[:50])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ Timeweb (—Å—Ç–∞—Ä—ã–π —Ñ–ª–æ—É)
            if context.user_data.get('waiting_timeweb_credentials'):
                await self.handle_timeweb_credentials(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–ª–æ—É)
            if context.user_data.get('waiting_bot_token'):
                await self.handle_bot_token(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ Timeweb (–Ω–æ–≤—ã–π —Ñ–ª–æ—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            if context.user_data.get('waiting_timeweb_settings'):
                await self.save_timeweb_settings(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–Ω–æ–≤—ã–π —Ñ–ª–æ—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ waiting_bot_token_settings: {context.user_data.get('waiting_bot_token_settings')}")
            if context.user_data.get('waiting_bot_token_settings'):
                logger.info(f"üîë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.save_bot_token_settings(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∫—É
            if context.user_data.get('creating_revision_step') == 'title':
                from .revisions import revisions_handler
                await revisions_handler.handle_revision_title(update, context)
                return
            
            if context.user_data.get('creating_revision_step') == 'description':
                from .revisions import revisions_handler
                await revisions_handler.handle_revision_description(update, context)
                return
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if not message_text.startswith('/'):
                keyboard = get_main_menu_keyboard()
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª–∏–∞—Å –¥–ª—è handle_text_input)"""
        await self.handle_text_input(update, context)
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "voice_message", "voice")
            
            await update.message.reply_text(
                "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            user_id = update.effective_user.id
            document = update.message.document
            file_name = document.file_name if document else "unknown"
            
            logger.info(f"üìÑ DOCUMENT HANDLER CALLED: user_id={user_id}, file_name={file_name}")
            logger.info(f"üìÑ User data: {context.user_data}")
            logger.info(f"üìÑ Creating revision step: {context.user_data.get('creating_revision_step')}")
            
            log_user_action(user_id, "document_message", file_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∫—É
            if context.user_data.get('creating_revision_step') == 'files':
                logger.info(f"üìÑ ROUTING TO REVISION DOCUMENT HANDLER")
                await self.handle_revision_document(update, context)
                return
            
            await update.message.reply_text(
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –ø–æ–ª—É—á–µ–Ω! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤."
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"üì∏ PHOTO HANDLER CALLED: user_id={user_id}")
            logger.info(f"üì∏ Update: {update}")
            logger.info(f"üì∏ Message: {update.message}")
            logger.info(f"ÔøΩ Photo: {update.message.photo if update.message else None}")
            logger.info(f"üì∏ User data: {context.user_data}")
            logger.info(f"ÔøΩ Creating revision step: {context.user_data.get('creating_revision_step')}")
            
            log_user_action(user_id, "photo_message")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∫—É
            if context.user_data.get('creating_revision_step') == 'files':
                logger.info(f"ÔøΩ ROUTING TO REVISION FILES HANDLER")
                await self.handle_revision_photo(update, context)
                return
            
            logger.info(f"ÔøΩ NOT IN REVISION MODE - sending default message")
            await update.message.reply_text(
                "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except:
                pass

    async def handle_any_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            message = update.message
            
            logger.info(f"üîç UNIVERSAL HANDLER: user_id={user_id}")
            logger.info(f"üîç Message type: {type(message)}")
            logger.info(f"üîç Has text: {bool(message and message.text)}")
            logger.info(f"üîç Has photo: {bool(message and message.photo)}")
            logger.info(f"üîç Has document: {bool(message and message.document)}")
            logger.info(f"üîç Has video: {bool(message and message.video)}")
            logger.info(f"üîç User data: {context.user_data}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ files
            if message and message.photo and context.user_data.get('creating_revision_step') == 'files':
                logger.info(f"üîç PHOTO DETECTED IN FILES STEP - routing to photo handler")
                await self.handle_photo(update, context)
                return
            
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üîç Universal handler: sending default message")
            await update.message.reply_text(
                "ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ universal handler: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")

    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
        try:
            user_id = update.effective_user.id
            
            logger.info(f"üé• VIDEO HANDLER CALLED: user_id={user_id}")
            logger.info(f"üé• User data: {context.user_data}")
            logger.info(f"üé• Creating revision step: {context.user_data.get('creating_revision_step')}")
            
            log_user_action(user_id, "video_message")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∫—É
            if context.user_data.get('creating_revision_step') == 'files':
                logger.info(f"üé• ROUTING TO REVISION VIDEO HANDLER")
                await self.handle_revision_video(update, context)
                return
            
            await update.message.reply_text(
                "üé• –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ."
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

    @standard_handler
    async def handle_timeweb_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Timeweb"""
        try:
            text = """
üåê <b>–ß—Ç–æ —Ç–∞–∫–æ–µ Timeweb –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω?</b>

<b>Timeweb Cloud</b> - —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ö–æ—Å—Ç–∏–Ω–≥-–ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ 24/7.

<b>üéØ –ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Ö–æ—Å—Ç–∏–Ω–≥ –¥–ª—è –±–æ—Ç–∞:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
‚Ä¢ –ù—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–¥–∞
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

<b>üí∞ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Timeweb:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã (–æ—Ç 150‚ÇΩ/–º–µ—Å)
‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è  
‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±—ã—Ö –±–æ—Ç–æ–≤

<b>üéÅ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞—à–µ–π —Å—Å—ã–ª–∫–µ:</b>
‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–∞ —Å—á–µ—Ç
‚Ä¢ –°–∫–∏–¥–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<i>–ú—ã –ø–æ–º–æ–∂–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–æ—Å—Ç–∏–Ω–≥ –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞—à –±–æ—Ç!</i>
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Timeweb", url="https://timeweb.cloud/r/xv15146")],
                [
                    InlineKeyboardButton("‚úÖ –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", callback_data="timeweb_registered"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_timeweb_info: {e}")

    @standard_handler 
    async def handle_timeweb_registered(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Timeweb"""
        try:
            user_id = update.effective_user.id
            callback_data = update.callback_query.data
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
            project_id = None
            if "timeweb_registered_" in callback_data:
                project_id = int(callback_data.split("_")[-1])
            
            text = """
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞</b>

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Timeweb:

üìß <b>–õ–æ–≥–∏–Ω</b> - –≤–∞—à email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ª–æ–≥–∏–Ω
üîë <b>–ü–∞—Ä–æ–ª—å</b> - –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞

<i>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–æ—Ç–∞. –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å.</i>

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>

<b>–í–∞—Ä–∏–∞–Ω—Ç 1:</b>
<code>–õ–æ–≥–∏–Ω: –≤–∞—à_–ª–æ–≥–∏–Ω
–ü–∞—Ä–æ–ª—å: –≤–∞—à_–ø–∞—Ä–æ–ª—å</code>

<b>–í–∞—Ä–∏–∞–Ω—Ç 2 (–ø—Ä–æ—Å—Ç–æ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏):</b>
<code>–≤–∞—à_–ª–æ–≥–∏–Ω
–≤–∞—à_–ø–∞—Ä–æ–ª—å</code>

<i>üí° –õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å email, –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—ã—á–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º</i>
            """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if project_id:
                context.user_data['waiting_timeweb_credentials'] = project_id
                logger.info(f"üîç Set waiting_timeweb_credentials to project_id: {project_id}")
            else:
                context.user_data['waiting_timeweb_credentials'] = True
                logger.info(f"üîç Set waiting_timeweb_credentials to True")
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_timeweb_registered: {e}")

    @standard_handler
    async def handle_timeweb_credentials(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Timeweb"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text
            
            logger.info(f"üîç TIMEWEB CREDENTIALS: user_id={user_id}, waiting_flag={context.user_data.get('waiting_timeweb_credentials')}")
            logger.info(f"üîç Message text: {message_text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ Timeweb
            if not context.user_data.get('waiting_timeweb_credentials'):
                logger.info("üîç Not waiting for Timeweb credentials, returning")
                return
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            login_match = re.search(r'–ª–æ–≥–∏–Ω:\s*(.+)', message_text, re.IGNORECASE)
            password_match = re.search(r'–ø–∞—Ä–æ–ª—å:\s*(.+)', message_text, re.IGNORECASE)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–õ–æ–≥–∏–Ω: ... –ü–∞—Ä–æ–ª—å: ...", –ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            if not login_match or not password_match:
                lines = [line.strip() for line in message_text.strip().split('\n') if line.strip()]
                
                if len(lines) >= 2:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ª–æ–≥–∏–Ω, –≤—Ç–æ—Ä—É—é –∫–∞–∫ –ø–∞—Ä–æ–ª—å
                    login = lines[0]
                    password = lines[1]
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
                        "<b>–í–∞—Ä–∏–∞–Ω—Ç 1:</b>\n"
                        "<code>–õ–æ–≥–∏–Ω: –≤–∞—à_–ª–æ–≥–∏–Ω\n"
                        "–ü–∞—Ä–æ–ª—å: –≤–∞—à_–ø–∞—Ä–æ–ª—å</code>\n\n"
                        "<b>–í–∞—Ä–∏–∞–Ω—Ç 2:</b>\n"
                        "<code>–≤–∞—à_–ª–æ–≥–∏–Ω\n"
                        "–≤–∞—à_–ø–∞—Ä–æ–ª—å</code>\n\n"
                        "<i>–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å email, –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –æ–±—ã—á–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º</i>",
                        parse_mode='HTML'
                    )
                    return
            else:
                login = login_match.group(1).strip()
                password = password_match.group(1).strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–µ–∫—Ç
            project_id = context.user_data.get('waiting_timeweb_credentials')
            
            logger.info(f"üîç SAVING TIMEWEB: project_id={project_id}, type={type(project_id)}")
            
            try:
                with get_db_context() as db:
                    if isinstance(project_id, int):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
                        logger.info(f"üîç Looking for project with ID: {project_id}")
                        project = db.query(Project).filter(Project.id == project_id).first()
                        if project:
                            logger.info(f"üîç Found project: {project.title}")
                            if not project.project_metadata:
                                project.project_metadata = {}
                            project.project_metadata['timeweb_credentials'] = {
                                'login': login,
                                'password': password,
                                'created_at': datetime.utcnow().isoformat()
                            }
                            db.commit()
                            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ Timeweb —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
                        else:
                            logger.error(f"‚ùå –ü—Ä–æ–µ–∫—Ç —Å ID {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    else:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        logger.info(f"üîç Looking for user with telegram_id: {user_id}")
                        user = get_user_by_telegram_id(db, user_id)
                        if user:
                            logger.info(f"üîç Found user: {user.id}")
                            project = db.query(Project).filter(Project.user_id == user.id).order_by(Project.created_at.desc()).first()
                            if project:
                                logger.info(f"üîç Found latest project: {project.id} - {project.title}")
                                if not project.project_metadata:
                                    project.project_metadata = {}
                                project.project_metadata['timeweb_credentials'] = {
                                    'login': login,
                                    'password': password,
                                    'created_at': datetime.utcnow().isoformat()
                                }
                                db.commit()
                                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ Timeweb —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project.id}")
                            else:
                                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                        else:
                            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            except Exception as db_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Timeweb: {db_error}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_timeweb_credentials', None)
            
            text = """
‚úÖ <b>–î–∞–Ω–Ω—ã–µ Timeweb —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>

–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:

<b>ü§ñ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ–π –ú–∞–≥–∞–∑–∏–Ω –ë–æ—Ç")
4. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_shop_bot)
5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API —Ç–æ–∫–µ–Ω

<b>üí° –ü—Ä–∏–º–µ—Ä API —Ç–æ–∫–µ–Ω–∞:</b>
<code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code>

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ (:)
‚Ä¢ –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω
‚Ä¢ –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ API —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>
            """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            context.user_data['waiting_bot_token'] = project_id if isinstance(project_id, int) else True
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º", callback_data="bot_creation_help")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
            ])
            
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_timeweb_credentials: {e}")
    
    @standard_handler
    async def handle_bot_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ç–æ–∫–µ–Ω
            if not context.user_data.get('waiting_bot_token'):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
            if not self._validate_bot_token(message_text):
                await update.message.reply_text(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    "<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
                    "<code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code>\n\n"
                    "<b>–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ß–∏—Å–ª–∞ –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è\n"
                    "‚Ä¢ –î–≤–æ–µ—Ç–æ—á–∏–µ (:)\n"
                    "‚Ä¢ –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è\n\n"
                    "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω:</b>",
                    parse_mode='HTML'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç
            project_id = context.user_data.get('waiting_bot_token')
            
            try:
                with get_db_context() as db:
                    if isinstance(project_id, int):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
                        project = db.query(Project).filter(Project.id == project_id).first()
                        if project:
                            if not project.project_metadata:
                                project.project_metadata = {}
                            project.project_metadata['bot_token'] = message_text
                            db.commit()
                            logger.info(f"API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
                    else:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = get_user_by_telegram_id(db, user_id)
                        if user:
                            project = db.query(Project).filter(Project.user_id == user.id).order_by(Project.created_at.desc()).first()
                            if project:
                                if not project.project_metadata:
                                    project.project_metadata = {}
                                project.project_metadata['bot_token'] = message_text
                                db.commit()
                                logger.info(f"API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project.id}")
                
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {db_error}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_bot_token', None)
            
            text = """
üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!</b>

–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Ö–æ—Å—Ç–∏–Ω–≥–∞ Timeweb
‚úÖ API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ú—ã –Ω–∞—á–Ω–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ Timeweb
‚Ä¢ –†–∞–∑–≤–µ—Ä–Ω–µ–º –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞–º –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ

<i>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!</i>

<b>üí¨ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"</b>
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
                    InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –¢–ó", callback_data="create_tz")
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bot_token: {e}")
    
    def _validate_bot_token(self, token: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        import re
        # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á–∏—Å–ª–∞:–±—É–∫–≤—ã-—Ü–∏—Ñ—Ä—ã
        pattern = r'^\d+:[A-Za-z0-9_-]+$'
        return bool(re.match(pattern, token)) and len(token) > 20
    
    @standard_handler
    async def handle_bot_creation_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞"""
        try:
            text = """
ü§ñ <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞</b>

<b>–®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç—å @BotFather</b>
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ –ø–æ–∏—Å–∫–µ Telegram
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ START –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start

<b>–®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/newbot</code>
‚Ä¢ BotFather –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∏–º—è –±–æ—Ç–∞

<b>–®–∞–≥ 3: –ü—Ä–∏–¥—É–º–∞—Ç—å –∏–º—è</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ–π –º–∞–≥–∞–∑–∏–Ω")
‚Ä¢ –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö

<b>–®–∞–≥ 4: –ü—Ä–∏–¥—É–º–∞—Ç—å username</b>
‚Ä¢ Username –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot"
‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: <code>my_shop_bot</code>
‚Ä¢ –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ

<b>–®–∞–≥ 5: –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω</b>
‚Ä¢ BotFather –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ

<b>üí° –ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞:</b>
<code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code>

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
‚Ä¢ –¢–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã, –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –±—É–∫–≤—ã
‚Ä¢ –î–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 45-50 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å @BotFather", url="https://t.me/botfather")],
                [InlineKeyboardButton("‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, —Å–æ–∑–¥–∞—é –±–æ—Ç–∞", callback_data="bot_creation_understood")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bot_creation_help: {e}")
    
    @standard_handler
    async def handle_bot_creation_understood(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
        try:
            text = """
ü§ñ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω</b>

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather
2. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

<b>üí° –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:</b>
<code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code>

<b>–ñ–¥—É –≤–∞—à —Ç–æ–∫–µ–Ω...</b>
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–Ω–æ–≤–∞", callback_data="bot_creation_help")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bot_creation_understood: {e}")

    @standard_handler
    async def show_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            text = """
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>

<b>üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> Ivan Petrov
<b>üìß Email:</b> ivan@botdev.ru
<b>üì± Telegram:</b> @botdev_ivan
<b>üåê –°–∞–π—Ç:</b> botdev.ru

<b>üí¨ –°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
‚Ä¢ Telegram: @botdev_ivan
‚Ä¢ Email: ivan@botdev.ru
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67

<b>üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 10:00 - 19:00 (–ú–°–ö)
–°–±: 11:00 - 16:00 (–ú–°–ö)
–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π

<b>üíº –û—Ñ–∏—Å:</b>
–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1
(—Ä–∞–±–æ—Ç–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ)

–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–∏—à–∏—Ç–µ –≤ Telegram!
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_tz")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_contacts: {e}")

    @standard_handler
    async def show_my_projects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProjectsHandler –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
            from .projects import ProjectsHandler
            projects_handler = ProjectsHandler()
            await projects_handler.show_user_projects(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_my_projects: {e}")

    @standard_handler
    async def show_consultant_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        try:
            text = """
ü§ñ <b>AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</b>

–ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤!

<b>üí° –ß—Ç–æ –º–æ–∂–µ—Ç AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:</b>
‚Ä¢ –ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
‚Ä¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã

<b>üéØ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
3. –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

<b>üìù –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–ª–∞—Ç—É –∫ –±–æ—Ç—É?"
‚Ä¢ "–ö–∞–∫–∏–µ API –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CRM?"
‚Ä¢ "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞?"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                [InlineKeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="example_questions")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_consultant_menu: {e}")

    @standard_handler
    async def show_portfolio_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            text = """
üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>

–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç!

<b>üöÄ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>

ü§ñ <b>Telegram –±–æ—Ç—ã</b>
‚Ä¢ –ë–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ E-commerce –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã
‚Ä¢ CRM –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ

üì± <b>WhatsApp –±–æ—Ç—ã</b>
‚Ä¢ –ë–æ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏

üåê <b>–í–µ–±-—á–∞—Ç–±–æ—Ç—ã</b>
‚Ä¢ –ß–∞—Ç–±–æ—Ç—ã –¥–ª—è —Å–∞–π—Ç–æ–≤
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã

üîó <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</b>
‚Ä¢ CRM —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ API –∏ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç:
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("ü§ñ Telegram –±–æ—Ç—ã", callback_data="portfolio_telegram"),
                    InlineKeyboardButton("üì± WhatsApp –±–æ—Ç—ã", callback_data="portfolio_whatsapp")
                ],
                [
                    InlineKeyboardButton("üåê –í–µ–±-—á–∞—Ç–±–æ—Ç—ã", callback_data="portfolio_web"),
                    InlineKeyboardButton("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="portfolio_integration")
                ],
                [
                    InlineKeyboardButton("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ", callback_data="portfolio_featured"),
                    InlineKeyboardButton("üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="portfolio_all")
                ],
                [
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio_menu: {e}")

    @standard_handler
    async def show_portfolio_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            category = callback_data.replace("portfolio_", "")
            
            category_names = {
                "telegram": "ü§ñ Telegram –±–æ—Ç—ã",
                "whatsapp": "üì± WhatsApp –±–æ—Ç—ã", 
                "web": "üåê –í–µ–±-—á–∞—Ç–±–æ—Ç—ã",
                "integrations": "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                "all": "üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
            }
            
            category_descriptions = {
                "telegram": """
ü§ñ <b>Telegram –±–æ—Ç—ã</b>

<b>üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:</b>

<b>1. –ë–æ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>
‚Ä¢ –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞

<b>2. CRM-–±–æ—Ç –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞</b>
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AmoCRM
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

<b>3. –ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞</b>
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ö–æ—Ä–∑–∏–Ω–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–°
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç 25 000 ‚ÇΩ
                """,
                "whatsapp": """
üì± <b>WhatsApp –±–æ—Ç—ã</b>

<b>üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:</b>

<b>1. –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>
‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ 24/7
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏ FAQ

<b>2. –ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏</b>
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ

<b>3. –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç 35 000 ‚ÇΩ
                """,
                "web": """
üåê <b>–í–µ–±-—á–∞—Ç–±–æ—Ç—ã</b>

<b>üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:</b>

<b>1. –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —Å–∞–π—Ç–∞</b>
‚Ä¢ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö
‚Ä¢ –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM

<b>2. –ë–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã</b>
‚Ä¢ –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞
‚Ä¢ –î–µ–º–æ-—É—Ä–æ–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—É—Ä—Å—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤

<b>3. –ë–æ—Ç –¥–ª—è –±–∞–Ω–∫–∞</b>
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å–ª—É–≥–∞—Ö
‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ã
‚Ä¢ –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç 40 000 ‚ÇΩ
                """,
                "integrations": """
üîó <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</b>

<b>üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:</b>

<b>1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM</b>
‚Ä¢ AmoCRM, Bitrix24, Salesforce
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
‚Ä¢ –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

<b>2. –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</b>
‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Å—Å–∞, –°–±–µ—Ä–±–∞–Ω–∫
‚Ä¢ Stripe, PayPal
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–µ–∫–∏
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã

<b>3. –í–Ω–µ—à–Ω–∏–µ API</b>
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ –ü–æ—á—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –°–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç 15 000 ‚ÇΩ
                """,
                "all": """
üìä <b>–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</b>

<b>üéØ –ù–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ 150+ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ 95% –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ 200+ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
‚Ä¢ 50+ –æ—Ç—Ä–∞—Å–ª–µ–π –±–∏–∑–Ω–µ—Å–∞

<b>üèÜ –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –Ω–∞ 40%
‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 80%
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 25%
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ 30%

<b>üöÄ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Python, Node.js, PHP
‚Ä¢ Telegram Bot API, WhatsApp API
‚Ä¢ AI –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –û–±–ª–∞—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

<b>üíº –û—Ç—Ä–∞—Å–ª–∏:</b>
–†–∏—Ç–µ–π–ª, HoReCa, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –§–∏–Ω–∞–Ω—Å—ã, –ú–µ–¥–∏—Ü–∏–Ω–∞, –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ê–≤—Ç–æ, IT-—É—Å–ª—É–≥–∏

<b>üìû –ì–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç?</b>
                """
            }
            
            text = category_descriptions.get(category, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_tz")],
                [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
                [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio_category: {e}")

    @standard_handler
    async def show_ask_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            text = """
üí¨ <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É</b>

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–∞—Å—Ç –≤–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç!

<b>üìù –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

<b>‚ö° –ù–∞–ø—Ä–∏–º–µ—Ä:</b>
"–ù—É–∂–µ–Ω –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã. –•–æ—á—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ–ø–ª–∞—Ç–æ–π. –ë—é–¥–∂–µ—Ç –¥–æ 50 000 —Ä—É–±–ª–µ–π."

–û–∂–∏–¥–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å! üëá
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="example_questions")],
                [InlineKeyboardButton("üîô –ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", callback_data="consultant")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_ask_question: {e}")

    @standard_handler
    async def show_example_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            text = """
üìã <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤</b>

<b>üíº –î–ª—è –±–∏–∑–Ω–µ—Å–∞:</b>
‚Ä¢ "–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤?"
‚Ä¢ "–ö–∞–∫–æ–π –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞?"
‚Ä¢ "–ö–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å CRM?"

<b>üè™ –î–ª—è —Ä–∏—Ç–µ–π–ª–∞:</b>
‚Ä¢ "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–æ—Ç–µ?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –≤ –±–æ—Ç–µ?"
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö?"

<b>üéì –î–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞?"
‚Ä¢ "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è?"

<b>üè• –î–ª—è —É—Å–ª—É–≥:</b>
‚Ä¢ "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º?"
‚Ä¢ "–ö–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º?"

<b>üí∞ –û —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç?"
‚Ä¢ "–ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?"
‚Ä¢ "–ï—Å—Ç—å –ª–∏ –ø–æ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞?"

–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π!
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                [InlineKeyboardButton("üîô –ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", callback_data="consultant")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_example_questions: {e}")

    @standard_handler
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            logger.info(f"üîß Showing settings for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                user = get_user_by_telegram_id(db, user_id)
                if not user:
                    await update.callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                timeweb_login = ""
                timeweb_password = ""
                bot_token = ""
                
                if user.preferences:
                    timeweb_creds = user.preferences.get('timeweb_credentials', {})
                    timeweb_login = timeweb_creds.get('login', '')
                    timeweb_password = timeweb_creds.get('password', '')
                    bot_token = user.preferences.get('bot_token', '')
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∏—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–µ
                if not timeweb_login and not bot_token:
                    project = db.query(Project).filter(Project.user_id == user.id).order_by(Project.created_at.desc()).first()
                    if project and project.project_metadata:
                        timeweb_creds = project.project_metadata.get('timeweb_credentials', {})
                        timeweb_login = timeweb_creds.get('login', '')
                        timeweb_password = timeweb_creds.get('password', '')
                        bot_token = project.project_metadata.get('bot_token', '')
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_password = "*" * len(timeweb_password) if timeweb_password else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            masked_token = f"{bot_token[:10]}..." if bot_token and len(bot_token) > 10 else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            
            text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

<b>üåê –î–∞–Ω–Ω—ã–µ Timeweb:</b>
‚Ä¢ –õ–æ–≥–∏–Ω: {timeweb_login or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
‚Ä¢ –ü–∞—Ä–æ–ª—å: {masked_password}

<b>ü§ñ –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞:</b>
‚Ä¢ API —Ç–æ–∫–µ–Ω: {masked_token}

<b>üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üåê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Timeweb", callback_data="setup_timeweb"),
                    InlineKeyboardButton("ü§ñ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", callback_data="setup_bot_token")
                ],
                [
                    InlineKeyboardButton("üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_settings: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    @standard_handler
    async def setup_timeweb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Timeweb"""
        try:
            text = """üåê <b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö Timeweb</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Timeweb –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:

<b>–§–æ—Ä–º–∞—Ç 1:</b>
<code>–õ–æ–≥–∏–Ω: –≤–∞—à_email@example.com
–ü–∞—Ä–æ–ª—å: –≤–∞—à_–ø–∞—Ä–æ–ª—å</code>

<b>–§–æ—Ä–º–∞—Ç 2:</b>
<code>–≤–∞—à_email@example.com
–≤–∞—à_–ø–∞—Ä–æ–ª—å</code>

<b>üí° –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏–Ω–∞:</b>
‚Ä¢ email@example.com
‚Ä¢ +7 900 123 45 67
‚Ä¢ myusername

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
‚Ä¢ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞"""
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Timeweb
            context.user_data['waiting_timeweb_settings'] = True
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url="https://timeweb.cloud/r/xv15146")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="settings")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_timeweb: {e}")
    
    @standard_handler
    async def setup_bot_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            text = """ü§ñ <b>–í–≤–æ–¥ API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather:

<b>–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞:</b>
<code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code>

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
‚Ä¢ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω"""
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            context.user_data['waiting_bot_token_settings'] = True
            logger.info(f"üîë –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ waiting_bot_token_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å @BotFather", url="https://t.me/botfather")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="settings")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_bot_token: {e}")


    @standard_handler
    async def save_timeweb_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Timeweb"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text
            logger.info(f"üåê –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Timeweb –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ Timeweb
            if not context.user_data.get('waiting_timeweb_settings'):
                logger.info(f"üåê –§–ª–∞–≥ waiting_timeweb_settings –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            login_match = re.search(r'–ª–æ–≥–∏–Ω:\s*(.+)', message_text, re.IGNORECASE)
            password_match = re.search(r'–ø–∞—Ä–æ–ª—å:\s*(.+)', message_text, re.IGNORECASE)
            
            if login_match and password_match:
                login = login_match.group(1).strip()
                password = password_match.group(1).strip()
            else:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç (–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö)
                lines = message_text.strip().split('\n')
                if len(lines) >= 2:
                    login = lines[0].strip()
                    password = lines[1].strip()
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                        ])
                    )
                    return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                user = get_user_by_telegram_id(db, user_id)
                if user:
                    if not user.preferences:
                        user.preferences = {}
                    
                    user.preferences['timeweb_credentials'] = {
                        'login': login,
                        'password': password,
                        'created_at': datetime.utcnow().isoformat()
                    }
                    db.commit()
                    logger.info(f"üåê –î–∞–Ω–Ω—ã–µ Timeweb —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ preferences")
                else:
                    logger.error(f"üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_timeweb_settings', None)
            
            await update.message.reply_text(
                "‚úÖ <b>–î–∞–Ω–Ω—ã–µ Timeweb —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                ]),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ save_timeweb_settings: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                ])
            )

    @standard_handler
    async def save_bot_token_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text.strip()
            logger.info(f"üîë –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–æ–∫–µ–Ω: {message_text[:10]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ç–æ–∫–µ–Ω
            if not context.user_data.get('waiting_bot_token_settings'):
                logger.info(f"üîë –§–ª–∞–≥ waiting_bot_token_settings –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
            if not self._validate_bot_token(message_text):
                logger.warning(f"üîë –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text[:10]}...")
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                user = get_user_by_telegram_id(db, user_id)
                if user:
                    if not user.preferences:
                        user.preferences = {}
                    
                    user.preferences['bot_token'] = message_text
                    user.preferences['bot_token_added_at'] = datetime.utcnow().isoformat()
                    db.commit()
                    logger.info(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ preferences")
                else:
                    logger.error(f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_bot_token_settings', None)
            
            await update.message.reply_text(
                "‚úÖ <b>API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–ª—è—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                ]),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ save_bot_token_settings: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                ])
            )


    @standard_handler
    async def handle_revision_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id
            
            logger.info(f"üì∏ REVISION PHOTO: user_id={user_id}")
            logger.info(f"üì∏ Context state: {context.user_data.get('creating_revision_step')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if context.user_data.get('creating_revision_step') != 'files':
                logger.warning(f"üì∏ User {user_id} sent photo but not in files step")
                await update.message.reply_text(
                    "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                return
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ revisions handler
            from .revisions import revisions_handler
            await revisions_handler.handle_revision_photo(update, context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_revision_photo: {e}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except:
                pass

    async def handle_revision_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id
            
            logger.info(f"üé• REVISION VIDEO: user_id={user_id}")
            logger.info(f"üé• Context state: {context.user_data.get('creating_revision_step')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if context.user_data.get('creating_revision_step') != 'files':
                logger.warning(f"üé• User {user_id} sent video but not in files step")
                await update.message.reply_text(
                    "üé• –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                return
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ revisions handler
            from .revisions import revisions_handler
            await revisions_handler.handle_revision_video(update, context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_revision_video: {e}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except:
                pass

    async def handle_revision_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id
            document = update.message.document
            file_name = document.file_name if document else "unknown"
            
            logger.info(f"üìÑ REVISION DOCUMENT: user_id={user_id}, file_name={file_name}")
            logger.info(f"üìÑ Context state: {context.user_data.get('creating_revision_step')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if context.user_data.get('creating_revision_step') != 'files':
                logger.warning(f"üìÑ User {user_id} sent document but not in files step")
                await update.message.reply_text(
                    f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                return
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ revisions handler
            from .revisions import revisions_handler
            await revisions_handler.handle_revision_document(update, context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_revision_document: {e}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except:
                pass

    async def handle_revision_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∫–∏"""
        try:
            user_id = update.effective_user.id
            
            logger.info(f"üìÇ REVISION FILES: user_id={user_id}")
            logger.info(f"üìÇ Context data: {context.user_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if context.user_data.get('creating_revision_step') != 'files':
                logger.warning(f"üìÇ User {user_id} is not in files step")
                await update.message.reply_text(
                    "üìÇ –í—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'creating_revision_files' not in context.user_data:
                context.user_data['creating_revision_files'] = []
                logger.info(f"üìÇ Initialized file list")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            if update.message and update.message.document:
                document = update.message.document
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ç–∏–ø—É
                if not is_allowed_file_type(document.file_name):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.",
                        reply_markup=get_back_to_main_keyboard()
                    )
                    return
                
                file_info = await context.bot.get_file(document.file_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                context.user_data['creating_revision_files'].append({
                    'file_id': document.file_id,
                    'file_name': document.file_name,
                    'file_size': document.file_size,
                    'mime_type': document.mime_type
                })
                
                log_user_action(user_id, "revision_file_added", document.file_name)
                
                await update.message.reply_text(
                    f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç '{document.file_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–∞–≤–∫–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="revision_files_done")]
                    ])
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            elif update.message and update.message.photo:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                photo = update.message.photo[-1]
                file_info = await context.bot.get_file(photo.file_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                context.user_data['creating_revision_files'].append({
                    'file_id': photo.file_id,
                    'file_name': f"photo_{len(context.user_data['creating_revision_files']) + 1}.jpg",
                    'file_size': photo.file_size,
                    'mime_type': "image/jpeg"
                })
                
                log_user_action(user_id, "revision_photo_added", f"photo_{len(context.user_data['creating_revision_files'])}")
                
                await update.message.reply_text(
                    f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø—Ä–∞–≤–∫–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="revision_files_done")]
                    ])
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            elif update.message and update.message.video:
                video = update.message.video
                file_info = await context.bot.get_file(video.file_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                context.user_data['creating_revision_files'].append({
                    'file_id': video.file_id,
                    'file_name': f"video_{len(context.user_data['creating_revision_files']) + 1}.mp4",
                    'file_size': video.file_size,
                    'mime_type': "video/mp4"
                })
                
                log_user_action(user_id, "revision_video_added", f"video_{len(context.user_data['creating_revision_files'])}")
                
                await update.message.reply_text(
                    f"üé• –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø—Ä–∞–≤–∫–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="revision_files_done")]
                    ])
                )
            
            else:
                await update.message.reply_text(
                    "üìÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –ø—Ä–∞–≤–∫–µ.",
                    reply_markup=get_back_to_main_keyboard()
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_revision_files: {e}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except:
                pass

    @standard_handler
    async def show_project_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            project_id = int(query.data.replace('project_chat_', ''))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, update.effective_user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                revisions = db.query(ProjectRevision).filter(
                    ProjectRevision.project_id == project_id
                ).order_by(ProjectRevision.created_at.desc()).all()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = f"üí¨ <b>–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞: {project.title}</b>\n\n"
                
                if not revisions:
                    text += "üìù <b>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É</b>\n\n"
                    text += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∞–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º!"
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–∞–≤–æ–∫
                    text += f"üìã <b>–ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ({len(revisions)}):</b>\n\n"
                    
                    for i, revision in enumerate(revisions[:5]):
                        status_emoji = self._get_revision_status_emoji(revision.status)
                        priority_emoji = self._get_revision_priority_emoji(revision.priority)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                        messages_count = db.query(RevisionMessage).filter(
                            RevisionMessage.revision_id == revision.id
                        ).count()
                        
                        text += f"{i+1}. {status_emoji} <b>–ü—Ä–∞–≤–∫–∞ #{revision.revision_number}</b>\n"
                        text += f"   üìù {revision.title}\n"
                        text += f"   {priority_emoji} {self._get_revision_priority_name(revision.priority)}\n"
                        text += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                        text += f"   üìÖ {self._format_date(revision.created_at)}\n\n"
                    
                    if len(revisions) > 5:
                        text += f"... –∏ –µ—â—ë {len(revisions) - 5} –ø—Ä–∞–≤–æ–∫\n\n"
                
                text += "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∞–≤–æ–∫
                for revision in revisions[:5]:
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üí¨ –ü—Ä–∞–≤–∫–∞ #{revision.revision_number}", 
                            callback_data=f"revision_chat_{revision.id}"
                        )
                    ])
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∫—É", callback_data=f"create_revision_{project_id}"),
                    InlineKeyboardButton("üìã –í—Å–µ –ø—Ä–∞–≤–∫–∏", callback_data=f"project_revisions_{project_id}")
                ])
                
                keyboard.append([
                    InlineKeyboardButton("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"project_details_{project_id}"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ])
                
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_chat: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞")

    def _get_revision_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        emojis = {
            'pending': '‚è≥',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'rejected': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def _get_revision_status_name(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        names = {
            'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }
        return names.get(status, status)
    
    def _get_revision_priority_emoji(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        emojis = {
            'low': 'üü¢',
            'normal': 'üîµ',
            'high': 'üü°',
            'urgent': 'üî¥'
        }
        return emojis.get(priority, '‚ö™')
    
    def _get_revision_priority_name(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–≤–∫–∏"""
        names = {
            'low': '–ù–∏–∑–∫–∏–π',
            'normal': '–û–±—ã—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'urgent': '–°—Ä–æ—á–Ω—ã–π'
        }
        return names.get(priority, priority)
    
    def _format_date(self, date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not date:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try:
            return date.strftime("%d.%m.%Y %H:%M")
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    async def _send_revision_images(self, query, revision_id: int, messages: list):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∞–≤–∫–∏"""
        try:
            from ...database.database import get_db_context
            import os
            from pathlib import Path
            
            with get_db_context() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                recent_messages = messages[-5:] if len(messages) > 5 else messages
                
                for message in recent_messages:
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_files = db.query(RevisionMessageFile).filter(
                        RevisionMessageFile.message_id == message.id
                    ).all()
                    
                    for file in message_files:
                        if file.file_type == 'image':
                            file_path = Path(file.file_path)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                            if file_path.exists():
                                try:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                                    sender_name = "–ö–ª–∏–µ–Ω—Ç"
                                    if message.sender_type == "admin" or message.sender_type == "executor":
                                        sender_name = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                                    
                                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                                    caption = f"üì∏ –û—Ç: {sender_name}\n"
                                    caption += f"üìÖ {self._format_date(message.created_at)}\n"
                                    caption += f"üìé {file.original_filename}"
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    with open(file_path, 'rb') as photo:
                                        await query.bot.send_photo(
                                            chat_id=query.message.chat_id,
                                            photo=photo,
                                            caption=caption,
                                            parse_mode='HTML'
                                        )
                                        
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file.original_filename}: {e}")
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                                    await query.bot.send_message(
                                        chat_id=query.message.chat_id,
                                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file.original_filename}",
                                        parse_mode='HTML'
                                    )
                            else:
                                # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                                await query.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text=f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file.original_filename}",
                                    parse_mode='HTML'
                                )
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _send_revision_images: {e}")

    @standard_handler
    async def show_revision_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∞–≤–∫–∏"""
        try:
            query = update.callback_query
            revision_id = int(query.data.replace('revision_chat_', ''))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, update.effective_user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).filter(
                    ProjectRevision.id == revision_id,
                    ProjectRevision.created_by_id == user.id
                ).first()
                
                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∏
                messages = db.query(RevisionMessage).filter(
                    RevisionMessage.revision_id == revision_id
                ).order_by(RevisionMessage.created_at.asc()).all()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                status_emoji = self._get_revision_status_emoji(revision.status)
                priority_emoji = self._get_revision_priority_emoji(revision.priority)
                
                text = f"üí¨ <b>–ß–∞—Ç –ø—Ä–∞–≤–∫–∏ #{revision.revision_number}</b>\n\n"
                text += f"üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {revision.title}\n"
                text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {self._get_revision_status_name(revision.status)}\n"
                text += f"{priority_emoji} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_revision_priority_name(revision.priority)}\n\n"
                
                if not messages:
                    text += "üí¨ <b>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
                    text += "–û–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å"
                else:
                    text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è ({len(messages)}):</b>\n\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    for message in messages[-5:]:
                        sender_name = "–ö–ª–∏–µ–Ω—Ç"
                        sender_emoji = "üë§"
                        
                        if message.sender_type == "admin" or message.sender_type == "executor":
                            sender_name = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                            sender_emoji = "üë®‚Äçüíª"
                        
                        message_text = message.message
                        if len(message_text) > 100:
                            message_text = message_text[:100] + "..."
                        
                        text += f"{sender_emoji} <b>{sender_name}</b>\n"
                        text += f"üìÖ {self._format_date(message.created_at)}\n"
                        text += f"üí¨ {message_text}\n"
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                        message_files = db.query(RevisionMessageFile).filter(
                            RevisionMessageFile.message_id == message.id
                        ).all()
                        
                        if message_files:
                            text += "üìé <b>–§–∞–π–ª—ã:</b>\n"
                            for file in message_files:
                                if file.file_type == 'image':
                                    text += f"üñºÔ∏è {file.original_filename}\n"
                                elif file.file_type == 'video':
                                    text += f"üé• {file.original_filename}\n"
                                elif file.file_type == 'document':
                                    text += f"üìÑ {file.original_filename}\n"
                                else:
                                    text += f"üìé {file.original_filename}\n"
                        
                        text += "\n"
                    
                    if len(messages) > 5:
                        text += f"... –∏ –µ—â—ë {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                
                text += "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = [
                    [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"revision_comment_{revision_id}")],
                    [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏", callback_data=f"revision_details_{revision_id}")],
                    [InlineKeyboardButton("üîô –ö —á–∞—Ç—É –ø—Ä–æ–µ–∫—Ç–∞", callback_data=f"project_chat_{revision.project_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._send_revision_images(query, revision_id, messages)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_revision_chat: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ –ø—Ä–∞–≤–∫–∏")

    @standard_handler
    async def start_revision_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø—Ä–∞–≤–∫–µ"""
        try:
            query = update.callback_query
            revision_id = int(query.data.replace('revision_comment_', ''))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, update.effective_user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).filter(
                    ProjectRevision.id == revision_id,
                    ProjectRevision.created_by_id == user.id
                ).first()
                
                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                context.user_data['commenting_revision_id'] = revision_id
                
                text = f"""
üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø—Ä–∞–≤–∫–µ #{revision.revision_number}</b>

üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {revision.title}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É

‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
                """
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"revision_chat_{revision_id}")]
                ])
                
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_revision_comment: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    @standard_handler
    async def handle_revision_comment_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø—Ä–∞–≤–∫–µ"""
        try:
            if 'commenting_revision_id' not in context.user_data:
                return
            
            revision_id = context.user_data['commenting_revision_id']
            comment_text = update.message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            context.user_data['comment_text'] = comment_text
            context.user_data['comment_files'] = []
            
            text = f"""
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ</b>

üìù <b>–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
{comment_text}

üìé <b>–§–∞–π–ª—ã:</b> –ù–µ—Ç

üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"attach_file_{revision_id}")],
                [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_comment_{revision_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"revision_chat_{revision_id}")]
            ])
            
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revision_comment_text: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    @standard_handler
    async def send_revision_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∞–≤–∫–µ"""
        try:
            query = update.callback_query
            revision_id = int(query.data.replace('send_comment_', ''))
            
            if ('commenting_revision_id' not in context.user_data or 
                context.user_data['commenting_revision_id'] != revision_id or
                'comment_text' not in context.user_data):
                await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            comment_text = context.user_data['comment_text']
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, update.effective_user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∫—É
                revision = db.query(ProjectRevision).filter(
                    ProjectRevision.id == revision_id,
                    ProjectRevision.created_by_id == user.id
                ).first()
                
                if not revision:
                    await query.answer("–ü—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                revision_message = RevisionMessage(
                    revision_id=revision_id,
                    sender_type="client",
                    sender_user_id=user.id,
                    message=comment_text,
                    is_internal=False
                )
                
                db.add(revision_message)
                db.commit()
                db.refresh(revision_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
                await self._send_comment_notification(revision, revision_message, user)
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('commenting_revision_id', None)
                context.user_data.pop('comment_text', None)
                context.user_data.pop('comment_files', None)
                
                await query.edit_message_text(
                    f"‚úÖ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–∞–≤–∫–µ #{revision.revision_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.\n"
                    f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–≤–µ—Ç–µ.",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç –ø—Ä–∞–≤–∫–∏
                await self.show_revision_chat(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_revision_comment: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    async def _send_comment_notification(self, revision: ProjectRevision, message: RevisionMessage, user):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
        try:
            from ...services.notification_service import notification_service
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            await notification_service.send_admin_notification(
                f"üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
                f"üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {revision.project.title}\n"
                f"üî¢ <b>–ü—Ä–∞–≤–∫–∞:</b> #{revision.revision_number}\n"
                f"üë§ <b>–û—Ç:</b> {user.first_name or user.username or '–ö–ª–∏–µ–Ω—Ç'}\n\n"
                f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{message.message[:300]}{'...' if len(message.message) > 300 else ''}"
            )
            
            logger.info(f"Comment notification sent: revision_id={revision.id}, message_id={message.id}")
            
        except Exception as e:
            logger.error(f"Error sending comment notification: {e}")

    async def download_project_tz(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞—á–∞—Ç—å –¢–ó –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            project_id = int(query.data.replace('project_download_', ''))
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, update.effective_user.id)
                
                project = db.query(Project).filter(
                    Project.id == project_id,
                    Project.user_id == user.id
                ).first()
                
                if not project:
                    await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                project_data = {
                    'id': project.id,
                    'title': project.title,
                    'description': project.description,
                    'status': project.status,
                    'estimated_cost': project.estimated_cost,
                    'created_at': project.created_at
                }
            
            text = f"""
üìÑ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>

<b>–ü—Ä–æ–µ–∫—Ç:</b> {project_data['title']}
<b>ID:</b> #{project_data['id']}
<b>–°—Ç–∞—Ç—É—Å:</b> {project_data['status']}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {format_currency(project_data['estimated_cost'])}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{project_data['description']}

<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {format_datetime(project_data['created_at'])}

üöß <b>–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¢–ó –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç:
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚Ä¢ –°—Ö–µ–º—ã –∏ –º–∞–∫–µ—Ç—ã
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìß –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¢–ó –Ω–∞ email", callback_data=f"request_tz_{project_id}")],
                [InlineKeyboardButton("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"project_details_{project_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ download_project_tz: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¢–ó –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
ERROR_MESSAGES = {
    'general': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    'permission_denied': "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
    'invalid_input': "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    'user_not_found': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    'session_expired': "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
    'rate_limit': "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
    'maintenance': "üîß –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
}

SUCCESS_MESSAGES = {
    'saved': "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
    'updated': "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
    'deleted': "‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
    'sent': "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
    'completed': "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

# –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async def get_user_context(update: Update) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not update.effective_user:
            return None
            
        user_id = update.effective_user.id
        
        with get_db_context() as db:
            db_user = get_user_by_telegram_id(db, user_id)
            if not db_user:
                db_user = get_or_create_user(
                    db=db,
                    telegram_id=user_id,
                    username=update.effective_user.username,
                    first_name=update.effective_user.first_name,
                    last_name=update.effective_user.last_name
                )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            projects_count = db.query(Project).filter(Project.user_id == db_user.id).count()
            sessions_count = db.query(ConsultantSession).filter(ConsultantSession.user_id == db_user.id).count()
            
            return {
                'db_user': db_user,
                'telegram_user': update.effective_user,
                'projects_count': projects_count,
                'sessions_count': sessions_count,
                'is_new_user': db_user.registration_date is None or 
                              (datetime.utcnow() - db_user.registration_date) < timedelta(hours=24)
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def update_user_context(user_id: int, **updates) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db_context() as db:
            user = get_user_by_telegram_id(db, user_id)
            if user:
                for key, value in updates.items():
                    if hasattr(user, key):
                        setattr(user, key, value)
                db.commit()
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def send_typing_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏"""
    try:
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.TYPING
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ typing action: {e}")

async def send_safe_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    parse_mode: str = 'HTML',
    disable_web_page_preview: bool = True
) -> Optional[Message]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
        
        if update.callback_query:
            return await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
        else:
            return await update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            fallback_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            if update.callback_query:
                return await update.callback_query.edit_message_text(
                    text=fallback_text,
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                return await update.message.reply_text(
                    text=fallback_text,
                    reply_markup=get_main_menu_keyboard()
                )
        except Exception as fallback_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
            return None

async def answer_callback_query(
    update: Update,
    text: Optional[str] = None,
    show_alert: bool = False
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        if update.callback_query:
            await update.callback_query.answer(text=text, show_alert=show_alert)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def set_user_state(user_id: int, state: str, context_data: Optional[Dict] = None) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db_context() as db:
            success = update_user_state(db, user_id, state)
            if success and context_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                pass
            return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def get_user_state(user_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db_context() as db:
            user = get_user_by_telegram_id(db, user_id)
            return user.state if user else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def clear_user_state(user_id: int) -> bool:
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–µ—Ä–Ω—É—Ç—å –≤ main_menu)"""
    return await set_user_state(user_id, "main_menu")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç
    return len(clean_phone) >= 10 and (clean_phone.startswith('+') or clean_phone.startswith('8'))

def validate_text_length(text: str, min_length: int = 10, max_length: int = 2000) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    return min_length <= len(text.strip()) <= max_length

def sanitize_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', text)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(clean_text) > 4000:
        clean_text = clean_text[:3900] + "..."
    return clean_text.strip()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
async def get_setting(key: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        with get_db_context() as db:
            setting = db.query(Settings).filter(Settings.key == key).first()
            if setting:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø
                try:
                    if setting.value.lower() in ['true', 'false']:
                        return setting.value.lower() == 'true'
                    elif setting.value.isdigit():
                        return int(setting.value)
                    elif '.' in setting.value and setting.value.replace('.', '').isdigit():
                        return float(setting.value)
                    else:
                        return setting.value
                except:
                    return setting.value
            return default
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        return default

async def set_setting(key: str, value: Any) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        with get_db_context() as db:
            setting = db.query(Settings).filter(Settings.key == key).first()
            if setting:
                setting.value = str(value)
            else:
                setting = Settings(key=key, value=str(value))
                db.add(setting)
            db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def format_datetime(dt: datetime, format_type: str = 'full') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    if format_type == 'date':
        return dt.strftime('%d.%m.%Y')
    elif format_type == 'time':
        return dt.strftime('%H:%M')
    elif format_type == 'short':
        return dt.strftime('%d.%m.%Y %H:%M')
    else:  # full
        return dt.strftime('%d.%m.%Y –≤ %H:%M')

def format_currency(amount: Union[int, float], currency: str = '‚ÇΩ') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    if amount is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    return f"{amount:,.0f} {currency}".replace(',', ' ')

def format_duration(days: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if days == 1:
        return "1 –¥–µ–Ω—å"
    elif days < 5:
        return f"{days} –¥–Ω—è"
    else:
        return f"{days} –¥–Ω–µ–π"

def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def get_file_size_str(size_bytes: int) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"

def is_allowed_file_type(filename: str, allowed_types: List[str] = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    if not allowed_types:
        allowed_types = ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png']
    
    filename_lower = filename.lower()
    return any(filename_lower.endswith(ext) for ext in allowed_types)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification_to_admins(
    context: ContextTypes.DEFAULT_TYPE,
    message: str,
    notification_type: str = "info"
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        notification_service = NotificationService()
        return await notification_service.send_admin_notification(
            message=message,
            notification_type=notification_type,
            context=context
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        return False

async def send_user_notification(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    message: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def log_user_interaction(
    user_id: int,
    action: str,
    details: Optional[str] = None,
    success: bool = True
):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        log_user_action(
            user_id=user_id,
            action=action,
            details=details or ""
        )
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
        if not success:
            logger.warning(f"–ù–µ—É—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å callback –¥–∞–Ω–Ω—ã–º–∏
def parse_callback_data(callback_data: str) -> Dict[str, str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö"""
    try:
        parts = callback_data.split('_')
        if len(parts) >= 2:
            return {
                'action': parts[0],
                'type': parts[1],
                'id': parts[2] if len(parts) > 2 else None,
                'extra': '_'.join(parts[3:]) if len(parts) > 3 else None
            }
        return {'action': callback_data}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'action': callback_data}

def build_callback_data(action: str, type_: str = None, id_: Union[str, int] = None, extra: str = None) -> str:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callback –¥–∞–Ω–Ω—ã—Ö"""
    parts = [action]
    if type_:
        parts.append(type_)
    if id_:
        parts.append(str(id_))
    if extra:
        parts.append(extra)
    
    result = '_'.join(parts)
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç callback_data –¥–æ 64 –±–∞–π—Ç
    if len(result) > 64:
        logger.warning(f"Callback data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ: {result}")
        result = result[:64]
    
    return result

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è–º–∏
async def start_conversation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    conversation_type: str,
    initial_message: str,
    keyboard: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏"""
    try:
        user_id = update.effective_user.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_state(user_id, conversation_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_safe_message(
            update=update,
            context=context,
            text=initial_message,
            reply_markup=keyboard
        )
        
        await log_user_interaction(user_id, f"start_conversation_{conversation_type}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏: {e}")
        return False

async def end_conversation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    success_message: str = None
) -> bool:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏"""
    try:
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await clear_user_state(user_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if success_message:
            await send_safe_message(
                update=update,
                context=context,
                text=success_message,
                reply_markup=get_main_menu_keyboard()
            )
        
        await log_user_interaction(user_id, "end_conversation")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏: {e}")
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
def require_user_state(required_state: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def decorator(func):
        @standard_handler
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            current_state = await get_user_state(user_id)
            
            if current_state != required_state:
                await send_safe_message(
                    update=update,
                    context=context,
                    text="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

def require_text_input(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    @standard_handler
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not update.message or not update.message.text:
            await send_safe_message(
                update=update,
                context=context,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=get_back_to_main_keyboard()
            )
            return
        
        return await func(update, context, *args, **kwargs)
    return wrapper

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async def track_user_action(
    user_id: int,
    action_type: str,
    action_data: Optional[Dict] = None
):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await log_user_interaction(
            user_id=user_id,
            action=f"analytics_{action_type}",
            details=str(action_data) if action_data else None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI
def create_confirmation_keyboard(
    confirm_callback: str,
    cancel_callback: str = "main_menu",
    confirm_text: str = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
    cancel_text: str = "‚ùå –û—Ç–º–µ–Ω–∞"
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton(confirm_text, callback_data=confirm_callback),
            InlineKeyboardButton(cancel_text, callback_data=cancel_callback)
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_back_keyboard(
    back_callback: str = "main_menu",
    back_text: str = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = [[InlineKeyboardButton(back_text, callback_data=back_callback)]]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞
async def handle_media_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    allowed_types: List[str] = None
) -> Optional[Dict[str, Any]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message = update.message
        
        if message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            photo = message.photo[-1]
            file_info = await context.bot.get_file(photo.file_id)
            return {
                'type': 'photo',
                'file_id': photo.file_id,
                'file_size': photo.file_size,
                'file_path': file_info.file_path
            }
        
        elif message.document:
            document = message.document
            if allowed_types and not is_allowed_file_type(document.file_name, allowed_types):
                await send_safe_message(
                    update=update,
                    context=context,
                    text=f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_types)}"
                )
                return None
            
            file_info = await context.bot.get_file(document.file_id)
            return {
                'type': 'document',
                'file_id': document.file_id,
                'file_name': document.file_name,
                'file_size': document.file_size,
                'file_path': file_info.file_path,
                'mime_type': document.mime_type
            }
        
        elif message.voice:
            voice = message.voice
            file_info = await context.bot.get_file(voice.file_id)
            return {
                'type': 'voice',
                'file_id': voice.file_id,
                'file_size': voice.file_size,
                'file_path': file_info.file_path,
                'duration': voice.duration
            }
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
        return None
