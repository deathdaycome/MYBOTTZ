from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
import requests
import json
import os
from urllib.parse import urljoin

from ..keyboards.main import get_portfolio_categories_keyboard, get_pagination_keyboard
from ...database.database import get_db_context
from ...database.models import Portfolio
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler
from ...config.settings import settings

logger = get_logger(__name__)

class PortfolioHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
    CATEGORY, PROJECT = range(2)

    def __init__(self):
        self.items_per_page = 3
        self.base_url = f"http://147.45.215.199:{settings.ADMIN_PORT}"
        self.media_base_url = f"http://147.45.215.199:{settings.ADMIN_PORT}/uploads/portfolio"
    
    def get_image_url(self, image_path: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not image_path:
            return ""
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å uploads/ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ø—É—Ç–∏
        clean_path = image_path.replace("uploads/portfolio/", "").replace("uploads/", "")
        return f"{self.base_url}/uploads/portfolio/{clean_path}"
    
    @standard_handler
    async def show_portfolio_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "show_portfolio_categories")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/categories", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    categories = data.get("categories", [])
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    categories = await self._get_categories_from_db()
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                categories = await self._get_categories_from_db()
            
            if not categories:
                text = """
üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
                """
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            else:
                text = """
üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

<b>–ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ üìã –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
‚Ä¢ üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞  
‚Ä¢ üõ† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ ‚è± –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ üöÄ –î–µ–º–æ-–≤–µ—Ä—Å–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
‚Ä¢ üëç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É

<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>
                """
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                keyboard_buttons = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"
                keyboard_buttons.append([
                    InlineKeyboardButton("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã", callback_data="portfolio_featured")
                ])
                
                for category in categories:
                    category_id = category.get("id", "")
                    category_name = category.get("name", category_id)
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            category_name,
                            callback_data=f"portfolio_category_{category_id}"
                        )
                    ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard_buttons.append([
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                ])
                
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio_categories: {e}")
            error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            error_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=error_keyboard
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=error_keyboard
                )
    
    @standard_handler
    async def show_category_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
            if query.data == "portfolio_featured":
                category = None
                featured_only = True
                category_name = "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã"
            else:
                category = query.data.replace('portfolio_category_', '')
                featured_only = False
                category_name = self._get_category_name(category)
            
            page = 1
            
            log_user_action(user_id, "show_category_portfolio", category or "featured")
            
            await self._display_portfolio_page(update, context, category, page, featured_only, category_name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_category_portfolio: {e}")
            await self._send_error_message(update)
    
    @standard_handler
    async def show_portfolio_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            query = update.callback_query
            data_parts = query.data.split('_')
            
            if len(data_parts) < 3:
                return
            
            category = data_parts[2] if data_parts[2] != "featured" else None
            featured_only = data_parts[2] == "featured"
            page = int(data_parts[3]) if len(data_parts) > 3 else 1
            
            category_name = self._get_category_name(category) if category else "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã"
            
            await self._display_portfolio_page(update, context, category, page, featured_only, category_name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio_page: {e}")
            await self._send_error_message(update)
    
    @standard_handler
    async def show_project_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            project_id = int(query.data.split('_')[2])
            user_id = update.effective_user.id
            
            log_user_action(user_id, "show_project_details", project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/{project_id}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        project = data.get("data")
                    else:
                        raise Exception("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    project = await self._get_project_from_db(project_id)
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                project = await self._get_project_from_db(project_id)
            
            if not project:
                await query.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            text = self._format_project_details(project)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            keyboard = self._create_project_keyboard(project)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            main_image = project.get("main_image")
            if main_image:
                image_url = self.get_image_url(main_image)
                try:
                    await query.edit_message_media(
                        media=InputMediaPhoto(
                            media=image_url,
                            caption=text,
                            parse_mode='HTML'
                        ),
                        reply_markup=keyboard
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                    await query.edit_message_text(
                        text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
            else:
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_details: {e}")
            await self._send_error_message(update)
    
    @standard_handler
    async def show_project_gallery(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query
            project_id = int(query.data.split('_')[2])
            user_id = update.effective_user.id
            
            log_user_action(user_id, "show_project_gallery", project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/{project_id}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        project = data.get("data")
                    else:
                        raise Exception("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    project = await self._get_project_from_db(project_id)
            except:
                project = await self._get_project_from_db(project_id)
            
            if not project:
                await query.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            
            # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if project.get("main_image"):
                images.append(self.get_image_url(project["main_image"]))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_paths = project.get("image_paths", [])
            for image_path in image_paths:
                images.append(self.get_image_url(image_path))
            
            if not images:
                await query.answer("üì∑ –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
            media_group = []
            for i, image_url in enumerate(images[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if i == 0:
                    # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    caption = f"üñº <b>{project.get('title', '–ü—Ä–æ–µ–∫—Ç')}</b>\n\n{project.get('subtitle', '')}"
                    media_group.append(InputMediaPhoto(media=image_url, caption=caption, parse_mode='HTML'))
                else:
                    media_group.append(InputMediaPhoto(media=image_url))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
            await query.message.reply_media_group(media_group)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"project_{project_id}")
            ]])
            
            await query.message.reply_text(
                "üì∑ –ì–∞–ª–µ—Ä–µ—è –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã—à–µ",
                reply_markup=back_keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_gallery: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏", show_alert=True)
    
    @standard_handler
    async def like_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø—Ä–æ–µ–∫—Ç—É"""
        try:
            query = update.callback_query
            project_id = int(query.data.split('_')[2])
            user_id = update.effective_user.id
            
            log_user_action(user_id, "like_project", project_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ —á–µ—Ä–µ–∑ API
            try:
                response = requests.post(f"{self.base_url}/admin/api/portfolio/public/{project_id}/like", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        likes_count = data.get("likes_count", 0)
                        await query.answer(f"üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {likes_count}", show_alert=True)
                    else:
                        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞", show_alert=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            except:
                # Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –Ω–∞–ø—Ä—è–º—É—é
                await self._like_project_in_db(project_id)
                await query.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ like_project: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞", show_alert=True)
    
    async def _display_portfolio_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    category: str = None, page: int = 1, featured_only: bool = False,
                                    category_name: str = "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ API
            params = {
                "page": page,
                "per_page": self.items_per_page,
                "featured_only": featured_only
            }
            
            if category:
                params["category"] = category
            
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/list", 
                                      params=params, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        projects = data.get("data", [])
                        pagination = data.get("pagination", {})
                    else:
                        projects = []
                        pagination = {}
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    projects, pagination = await self._get_projects_from_db(category, page, featured_only)
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                projects, pagination = await self._get_projects_from_db(category, page, featured_only)
            
            if not projects:
                text = f"""
üìÇ <b>{category_name}</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.
                """
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")
                ]])
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
                text = f"üìÇ <b>{category_name}</b>\n\n"
                
                for i, project in enumerate(projects, 1):
                    text += self._format_project_brief(project, (page - 1) * self.items_per_page + i)
                    text += "\n" + "‚îÄ" * 30 + "\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                keyboard = self._create_portfolio_keyboard(projects, category, page, pagination, featured_only)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _display_portfolio_page: {e}")
            await self._send_error_message(update)
    
    def _format_project_brief(self, project: dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        title = project.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        subtitle = project.get("subtitle", "")
        complexity = project.get("complexity", "medium")
        development_time = project.get("development_time")
        technologies = project.get("technologies", [])
        views_count = project.get("views_count", 0)
        likes_count = project.get("likes_count", 0)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_emoji = {
            "simple": "üü¢",
            "medium": "üü°", 
            "complex": "üî¥",
            "premium": "üü£"
        }
        
        text = f"<b>{index}. {title}</b>"
        
        if subtitle:
            text += f"\n<i>{subtitle}</i>"
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤)
        description = project.get("description", "")
        if description:
            short_desc = (description[:147] + "...") if len(description) > 150 else description
            text += f"\n\n{short_desc}"
        
        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        if technologies:
            tech_list = technologies[:3]  # –ü–µ—Ä–≤—ã–µ 3 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            text += f"\n\nüõ† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> {', '.join(tech_list)}"
            if len(technologies) > 3:
                text += f" –∏ –µ—â–µ {len(technologies) - 3}"
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è
        info_line = f"\n\n{complexity_emoji.get(complexity, '‚ö™')} <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {complexity.title()}"
        
        if development_time:
            info_line += f" | ‚è± <b>–í—Ä–µ–º—è:</b> {development_time} –¥–Ω."
        
        text += info_line
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if views_count or likes_count:
            text += f"\nüëÄ {views_count} | üëç {likes_count}"
        
        return text
    
    def _format_project_details(self, project: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        title = project.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        subtitle = project.get("subtitle", "")
        description = project.get("description", "")
        technologies = project.get("technologies", [])
        complexity = project.get("complexity", "medium")
        complexity_level = project.get("complexity_level", 5)
        development_time = project.get("development_time")
        cost_display = project.get("cost_display")
        demo_link = project.get("demo_link")
        views_count = project.get("views_count", 0)
        likes_count = project.get("likes_count", 0)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_emoji = {
            "simple": "üü¢",
            "medium": "üü°", 
            "complex": "üî¥",
            "premium": "üü£"
        }
        
        text = f"üéØ <b>{title}</b>"
        
        if subtitle:
            text += f"\n<i>{subtitle}</i>"
        
        text += "\n" + "=" * 30 + "\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if description:
            text += f"\nüìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n"
        
        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        if technologies:
            text += f"\nüõ† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
            for tech in technologies[:8]:  # –ú–∞–∫—Å–∏–º—É–º 8 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                text += f"‚Ä¢ {tech}\n"
            if len(technologies) > 8:
                text += f"‚Ä¢ –∏ –µ—â–µ {len(technologies) - 8} —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n"
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        text += f"\nüìä <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
        text += f"‚Ä¢ {complexity_emoji.get(complexity, '‚ö™')} –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity.title()} ({complexity_level}/10)\n"
        
        if development_time:
            text += f"‚Ä¢ ‚è± –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {development_time} –¥–Ω–µ–π\n"
        
        if cost_display:
            text += f"‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost_display} ‚ÇΩ\n"
        
        # –î–µ–º–æ –∏ —Å—Å—ã–ª–∫–∏
        if demo_link:
            text += f"\nüöÄ <b>–î–µ–º–æ –¥–æ—Å—Ç—É–ø–Ω–æ!</b>\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_count}\n"
        text += f"‚Ä¢ üëç –õ–∞–π–∫–æ–≤: {likes_count}"
        
        return text
    
    def _create_project_keyboard(self, project: dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        keyboard_buttons = []
        project_id = project.get("id")
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        first_row = []
        
        # –ö–Ω–æ–ø–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        image_paths = project.get("image_paths", [])
        if image_paths:
            first_row.append(InlineKeyboardButton("üì∑ –ì–∞–ª–µ—Ä–µ—è", callback_data=f"gallery_{project_id}"))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        demo_link = project.get("demo_link")
        if demo_link:
            first_row.append(InlineKeyboardButton("üöÄ –î–µ–º–æ", url=demo_link))
        
        # –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞
        likes_count = project.get("likes_count", 0)
        first_row.append(InlineKeyboardButton(f"üëç {likes_count}", callback_data=f"like_{project_id}"))
        
        if first_row:
            keyboard_buttons.append(first_row)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        keyboard_buttons.append([
            InlineKeyboardButton("üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_back")
        ])
        
        return InlineKeyboardMarkup(keyboard_buttons)
    
    def _create_portfolio_keyboard(self, projects: list, category: str = None, page: int = 1, 
                                 pagination: dict = None, featured_only: bool = False) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        for project in projects:
            project_id = project.get("id")
            title = project.get("title", "–ü—Ä–æ–µ–∫—Ç")
            keyboard_buttons.append([
                InlineKeyboardButton(f"üìã {title}", callback_data=f"project_{project_id}")
            ])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if pagination:
            nav_buttons = []
            has_prev = page > 1
            has_next = pagination.get("has_next", False)
            
            if has_prev:
                prev_callback = f"page_{category or 'featured'}_{page - 1}"
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=prev_callback))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            total_pages = pagination.get("pages", 1)
            nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
            
            if has_next:
                next_callback = f"page_{category or 'featured'}_{page + 1}"
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=next_callback))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        keyboard_buttons.append([
            InlineKeyboardButton("üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")
        ])
        
        return InlineKeyboardMarkup(keyboard_buttons)
    
    def _get_category_name(self, category: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_map = {
            "telegram_bots": "ü§ñ Telegram –±–æ—Ç—ã",
            "web_development": "üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
            "mobile_apps": "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            "ai_integration": "üß† AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            "automation": "‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            "ecommerce": "üõí E-commerce",
            "other": "üì¶ –î—Ä—É–≥–æ–µ"
        }
        return category_map.get(category, category.replace("_", " ").title())
    
    async def _get_categories_from_db(self) -> list:
        """Fallback: –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            async with get_db_context() as db:
                categories = db.query(Portfolio.category).filter(
                    Portfolio.category.isnot(None),
                    Portfolio.is_visible == True
                ).distinct().all()
                
                category_list = [cat[0] for cat in categories if cat[0]]
                
                result = []
                for cat in category_list:
                    result.append({
                        "id": cat,
                        "name": self._get_category_name(cat)
                    })
                
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î: {e}")
            return []
    
    async def _get_projects_from_db(self, category: str = None, page: int = 1, 
                                  featured_only: bool = False) -> tuple:
        """Fallback: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            async with get_db_context() as db:
                query = db.query(Portfolio).filter(Portfolio.is_visible == True)
                
                if featured_only:
                    query = query.filter(Portfolio.is_featured == True)
                
                if category:
                    query = query.filter(Portfolio.category == category)
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                query = query.order_by(
                    Portfolio.sort_order.desc(),
                    Portfolio.is_featured.desc(),
                    Portfolio.created_at.desc()
                )
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                total = query.count()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                offset = (page - 1) * self.items_per_page
                projects = query.offset(offset).limit(self.items_per_page).all()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
                projects_data = [project.to_bot_dict() for project in projects]
                
                pagination = {
                    "page": page,
                    "per_page": self.items_per_page,
                    "total": total,
                    "has_next": offset + self.items_per_page < total
                }
                
                return projects_data, pagination
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            return [], {}
    
    async def _get_project_from_db(self, project_id: int) -> dict:
        """Fallback: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            async with get_db_context() as db:
                project = db.query(Portfolio).filter(
                    Portfolio.id == project_id,
                    Portfolio.is_visible == True
                ).first()
                
                if project:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                    project.views_count += 1
                    db.commit()
                    return project.to_bot_dict()
                
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î: {e}")
            return None
    
    async def _like_project_in_db(self, project_id: int):
        """Fallback: –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø—Ä–æ–µ–∫—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            async with get_db_context() as db:
                project = db.query(Portfolio).filter(Portfolio.id == project_id).first()
                if project:
                    project.likes_count += 1
                    db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î: {e}")
    
    async def _send_error_message(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            error_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=error_keyboard
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=error_keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    @standard_handler
    async def select_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ."""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            callback_data = query.data
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
            category_map = {
                "portfolio_telegram": "telegram_bot",
                "portfolio_whatsapp": "whatsapp", 
                "portfolio_web": "web",
                "portfolio_integration": "ai_integration",
                "portfolio_featured": "featured",
                "portfolio_all": "all"
            }
            
            category = category_map.get(callback_data, "all")
            
            log_user_action(user_id, "select_portfolio_category", category)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/list", 
                                      params={"category": category}, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    projects = data.get("data", [])
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    projects = await self._get_projects_from_db(category)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
                projects = await self._get_projects_from_db(category)
            
            if not projects:
                category_names = {
                    "telegram_bot": "ü§ñ Telegram –±–æ—Ç—ã",
                    "whatsapp": "üí¨ WhatsApp –±–æ—Ç—ã",
                    "web": "üåê –í–µ–±-–±–æ—Ç—ã",
                    "ai_integration": "üß† AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                    "featured": "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ",
                    "all": "üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
                }
                
                text = f"""
üíº <b>{category_names.get(category, '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ')}</b>

–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!
                """
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
            context.user_data['portfolio_category'] = category
            context.user_data['portfolio_projects'] = projects
            context.user_data['portfolio_page'] = 0
            
            await self._show_projects_page(query, projects, category, 0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_category: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    async def _get_projects_from_db(self, category: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                query = db.query(Portfolio).filter(Portfolio.is_visible == True)
                
                if category != "all":
                    if category == "featured":
                        query = query.filter(Portfolio.is_featured == True)
                    else:
                        query = query.filter(Portfolio.category == category)
                
                portfolio_items = query.order_by(Portfolio.created_at.desc()).all()
                
                projects = []
                for item in portfolio_items:
                    projects.append({
                        "id": item.id,
                        "title": item.title,
                        "description": item.description,
                        "category": item.category,
                        "image_url": self.get_image_url(item.main_image),
                        "technologies": item.technologies,
                        "link": item.link,
                        "is_featured": item.is_featured
                    })
                
                return projects
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            return []
    
    async def _show_projects_page(self, query, projects: List[Dict], category: str, page: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            total_pages = (len(projects) + self.items_per_page - 1) // self.items_per_page
            start_idx = page * self.items_per_page
            end_idx = start_idx + self.items_per_page
            page_projects = projects[start_idx:end_idx]
            
            category_names = {
                "telegram_bot": "ü§ñ Telegram –±–æ—Ç—ã",
                "whatsapp": "üí¨ WhatsApp –±–æ—Ç—ã", 
                "web": "üåê –í–µ–±-–±–æ—Ç—ã",
                "ai_integration": "üß† AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                "featured": "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ",
                "all": "üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
            }
            
            text = f"""
üíº <b>{category_names.get(category, '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ')}</b>

–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}
–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}

"""
            
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            for project in page_projects:
                tech_str = ', '.join(project.get('technologies', [])[:3])
                if not tech_str:
                    tech_str = '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                    
                text += f"""
<b>{project['title']}</b>
{project['description'][:100]}{'...' if len(project['description']) > 100 else ''}

üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {tech_str}
{'‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç' if project.get('is_featured') else ''}

"""
                
                keyboard.append([
                    InlineKeyboardButton(f"üëÅ {project['title']}", callback_data=f"project_{project['id']}")
                ])
            
            # –ï—Å–ª–∏ —É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            first_project = page_projects[0] if page_projects else None
            if first_project and first_project.get('main_image'):
                image_url = self.get_image_url(first_project['main_image'])
                try:
                    await query.edit_message_media(
                        media=InputMediaPhoto(
                            media=image_url,
                            caption=text,
                            parse_mode='HTML'
                        )
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    keyboard.append([
                        InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio"),
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ])
                    
                    await query.edit_message_reply_markup(
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"portfolio_page_{page-1}"))
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"portfolio_page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.extend([
                [InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    @standard_handler
    async def select_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ."""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            callback_data = query.data
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: project_123)
            project_id = int(callback_data.split('_')[1])
            
            log_user_action(user_id, "select_portfolio_project", str(project_id))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/project/{project_id}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    project = data.get("project")
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    project = await self._get_project_from_db(project_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
                project = await self._get_project_from_db(project_id)
            
            if not project:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
            text = f"""
üíº <b>{project['title']}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{project['description']}

üõ† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
{project.get('technologies', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>
{project.get('category', '–û–±—â–∞—è').title()}

{'‚≠ê <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç!</b>' if project.get('is_featured') else ''}

"""
            
            keyboard = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
            if project.get('link'):
                keyboard.append([
                    InlineKeyboardButton("üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç", url=project['link'])
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard.extend([
                [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="consultation")],
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π", callback_data="create_tz")],
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data=f"portfolio_{project.get('category', 'all')}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            if project.get('image_url'):
                try:
                    await query.delete_message()
                    await update.effective_chat.send_photo(
                        photo=project['image_url'],
                        caption=text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='HTML'
                    )
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_project: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    
    async def _get_project_from_db(self, project_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                project = db.query(Portfolio).filter(
                    Portfolio.id == project_id,
                    Portfolio.is_visible == True
                ).first()
                
                if project:
                    return {
                        "id": project.id,
                        "title": project.title,
                        "description": project.description,
                        "category": project.category,
                        "image_url": self.get_image_url(project.main_image),
                        "technologies": project.technologies,
                        "link": project.link,
                        "is_featured": project.is_featured
                    }
                
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î: {e}")
            return None

    @standard_handler
    async def handle_portfolio_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: portfolio_page_1)
            page = int(query.data.split('_')[-1])
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            category = context.user_data.get('portfolio_category', 'all')
            projects = context.user_data.get('portfolio_projects', [])
            
            if not projects:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            context.user_data['portfolio_page'] = page
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self._show_projects_page(query, projects, category, page)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
portfolio_handler = PortfolioHandler()
