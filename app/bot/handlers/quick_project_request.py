# app/bot/handlers/quick_project_request.py
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ..keyboards.main import get_main_menu_keyboard
from ...database.database import get_db_context, create_project, get_or_create_user
from ...database.models import User, Project
from ...config.logging import get_logger, log_user_action

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
WAITING_PROJECT_NAME = "waiting_project_name"
WAITING_PROJECT_DESCRIPTION = "waiting_project_description"
WAITING_PROJECT_BUDGET = "waiting_project_budget"
WAITING_PROJECT_DEADLINE = "waiting_project_deadline"

class QuickProjectRequestHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"""

    async def show_quick_request_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            logger.info("üî• show_quick_request_menu –í–´–ó–í–ê–ù!")
            logger.info(f"üî• update={update}")
            logger.info(f"üî• callback_query={update.callback_query if update else None}")

            user_id = update.effective_user.id
            logger.info(f"üî• user_id={user_id}")
            log_user_action(user_id, "show_quick_request_menu")

            text = """
‚ö° <b>–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</b>

–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã!
–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏
4Ô∏è‚É£ –ì–æ—Ç–æ–≤–æ! –ú—ã –ø–æ–ª—É—á–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É

<b>üí° –ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ò–∑—É—á–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É
‚Ä¢ –°–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
‚Ä¢ –û–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</i>
            """

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("ü§ñ Telegram –±–æ—Ç", callback_data="quick_telegram"),
                    InlineKeyboardButton("‚ú® Telegram Mini App", callback_data="quick_miniapp")
                ],
                [
                    InlineKeyboardButton("üí¨ WhatsApp –±–æ—Ç", callback_data="quick_whatsapp")
                ],
                [
                    InlineKeyboardButton("ü§ñ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="quick_android"),
                    InlineKeyboardButton("üì± iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="quick_ios")
                ],
                [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–æ–µ –¢–ó", callback_data="create_tz")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_quick_request_menu: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

    async def handle_quick_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞ - –Ω–∞—á–∞–ª–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            logger.info("üî• handle_quick_request –í–´–ó–í–ê–ù!")
            query = update.callback_query
            logger.info(f"üî• query.data={query.data}")
            user_id = update.effective_user.id
            logger.info(f"üî• user_id={user_id}")

            project_types = {
                "quick_telegram": {
                    "name": "Telegram –±–æ—Ç",
                    "type": "telegram_bot",
                    "emoji": "ü§ñ"
                },
                "quick_miniapp": {
                    "name": "Telegram Mini App",
                    "type": "telegram_miniapp",
                    "emoji": "‚ú®"
                },
                "quick_whatsapp": {
                    "name": "WhatsApp –±–æ—Ç",
                    "type": "whatsapp_bot",
                    "emoji": "üí¨"
                },
                "quick_android": {
                    "name": "Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "type": "android_app",
                    "emoji": "ü§ñ"
                },
                "quick_ios": {
                    "name": "iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "type": "ios_app",
                    "emoji": "üì±"
                }
            }

            project_key = query.data
            if project_key not in project_types:
                await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")
                return

            project_info = project_types[project_key]

            log_user_action(user_id, "start_quick_request", project_info['name'])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≤ context
            context.user_data['quick_project_type'] = project_info
            context.user_data['quick_project_state'] = WAITING_PROJECT_NAME

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await query.answer()

            text = f"""
{project_info['emoji']} <b>{project_info['name']}</b>

<b>–®–∞–≥ 1 –∏–∑ 4:</b> –ù–∞–∑–≤–∞–Ω–∏–µ

–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç?
–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.

<i>–ü—Ä–∏–º–µ—Ä—ã:</i>
‚Ä¢ "–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã"
‚Ä¢ "–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏"
‚Ä¢ "–ú–∏–Ω–∏-–∏–≥—Ä–∞ –¥–ª—è Telegram"

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:
            """

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="quick_request")]
            ])

            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quick_request: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")

    async def handle_project_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            if context.user_data.get('quick_project_state') != WAITING_PROJECT_NAME:
                return

            project_name = update.message.text.strip()

            if len(project_name) < 3:
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            context.user_data['quick_project_name'] = project_name
            context.user_data['quick_project_state'] = WAITING_PROJECT_DESCRIPTION

            project_info = context.user_data.get('quick_project_type', {})

            text = f"""
{project_info.get('emoji', '‚ö°')} <b>{project_info.get('name', '')}</b>

‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{project_name}</i>

<b>–®–∞–≥ 2 –∏–∑ 4:</b> –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
–ù–∞–ø–∏—à–∏—Ç–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≥–ª–∞–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.

<i>–ü—Ä–∏–º–µ—Ä—ã:</i>
‚Ä¢ "–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º, –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –æ–ø–ª–∞—Ç–æ–π"
‚Ä¢ "–ò–≥—Ä–∞ –≤ Telegram —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø—Ä–∏–∑–∞–º–∏"
‚Ä¢ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã —Å –∫–∞—Ä—Ç–æ–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–æ–º"

–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:
            """

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="quick_request")]
            ])

            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_project_name: {e}")

    async def handle_project_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            if context.user_data.get('quick_project_state') != WAITING_PROJECT_DESCRIPTION:
                return

            description = update.message.text.strip()

            if len(description) < 10:
                await update.message.reply_text(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            context.user_data['quick_project_description'] = description
            context.user_data['quick_project_state'] = WAITING_PROJECT_BUDGET

            project_info = context.user_data.get('quick_project_type', {})
            project_name = context.user_data.get('quick_project_name', '')

            text = f"""
{project_info.get('emoji', '‚ö°')} <b>{project_info.get('name', '')}</b>

‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{project_name}</i>
‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{description[:50]}...</i>

<b>–®–∞–≥ 3 –∏–∑ 4:</b> –ë—é–¥–∂–µ—Ç

–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?
–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
            """

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–î–æ 50 000 ‚ÇΩ", callback_data="budget_50000"),
                    InlineKeyboardButton("50-100 —Ç—ã—Å ‚ÇΩ", callback_data="budget_100000")
                ],
                [
                    InlineKeyboardButton("100-200 —Ç—ã—Å ‚ÇΩ", callback_data="budget_200000"),
                    InlineKeyboardButton("200-500 —Ç—ã—Å ‚ÇΩ", callback_data="budget_500000")
                ],
                [
                    InlineKeyboardButton("–ë–æ–ª–µ–µ 500 —Ç—ã—Å ‚ÇΩ", callback_data="budget_500000plus"),
                    InlineKeyboardButton("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è", callback_data="budget_unknown")
                ],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="quick_request")]
            ])

            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_project_description: {e}")

    async def handle_project_budget(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query

            if context.user_data.get('quick_project_state') != WAITING_PROJECT_BUDGET:
                # –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç–æ–º –±—é–¥–∂–µ—Ç
                if update.message and update.message.text:
                    budget_text = update.message.text.strip()
                    context.user_data['quick_project_budget'] = budget_text
                    await self._ask_deadline(update, context)
                return

            await query.answer()

            budget_map = {
                "budget_50000": "–î–æ 50 000 ‚ÇΩ",
                "budget_100000": "50 000 - 100 000 ‚ÇΩ",
                "budget_200000": "100 000 - 200 000 ‚ÇΩ",
                "budget_500000": "200 000 - 500 000 ‚ÇΩ",
                "budget_500000plus": "–ë–æ–ª–µ–µ 500 000 ‚ÇΩ",
                "budget_unknown": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è"
            }

            budget = budget_map.get(query.data, "–ù–µ —É–∫–∞–∑–∞–Ω")
            context.user_data['quick_project_budget'] = budget

            await self._ask_deadline(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_project_budget: {e}")

    async def _ask_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–æ—Å–∏—Ç—å –æ —Å—Ä–æ–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
        context.user_data['quick_project_state'] = WAITING_PROJECT_DEADLINE

        project_info = context.user_data.get('quick_project_type', {})
        project_name = context.user_data.get('quick_project_name', '')
        budget = context.user_data.get('quick_project_budget', '')

        text = f"""
{project_info.get('emoji', '‚ö°')} <b>{project_info.get('name', '')}</b>

‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{project_name}</i>
‚úÖ –ë—é–¥–∂–µ—Ç: <i>{budget}</i>

<b>–®–∞–≥ 4 –∏–∑ 4:</b> –°—Ä–æ–∫–∏

–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?
–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫.
        """

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", callback_data="deadline_asap"),
                InlineKeyboardButton("–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", callback_data="deadline_month")
            ],
            [
                InlineKeyboardButton("1-3 –º–µ—Å—è—Ü–∞", callback_data="deadline_3months"),
                InlineKeyboardButton("3-6 –º–µ—Å—è—Ü–µ–≤", callback_data="deadline_6months")
            ],
            [
                InlineKeyboardButton("–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤", callback_data="deadline_6plus"),
                InlineKeyboardButton("–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ", callback_data="deadline_flexible")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="quick_request")]
        ])

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

    async def handle_project_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            query = update.callback_query

            if context.user_data.get('quick_project_state') != WAITING_PROJECT_DEADLINE:
                return

            await query.answer("–°–æ–∑–¥–∞—é –ø—Ä–æ–µ–∫—Ç...")

            deadline_map = {
                "deadline_asap": "–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ",
                "deadline_month": "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
                "deadline_3months": "1-3 –º–µ—Å—è—Ü–∞",
                "deadline_6months": "3-6 –º–µ—Å—è—Ü–µ–≤",
                "deadline_6plus": "–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤",
                "deadline_flexible": "–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
            }

            deadline = deadline_map.get(query.data, "–ù–µ —É–∫–∞–∑–∞–Ω")
            context.user_data['quick_project_deadline'] = deadline

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            user_id = update.effective_user.id
            username = update.effective_user.username or f"user_{user_id}"
            first_name = update.effective_user.first_name or ""
            last_name = update.effective_user.last_name or ""
            full_name = f"{first_name} {last_name}".strip()

            project_info = context.user_data.get('quick_project_type', {})
            project_name = context.user_data.get('quick_project_name', '')
            description = context.user_data.get('quick_project_description', '')
            budget = context.user_data.get('quick_project_budget', '')

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project_id = None
            with get_db_context() as db:
                user = get_or_create_user(db, user_id)

                # –í—ã—á–∏—Å–ª—è–µ–º planned_end_date –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
                from datetime import datetime, timedelta
                start_date = datetime.now()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
                deadline_days_map = {
                    "–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ": 7,
                    "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞": 30,
                    "1-3 –º–µ—Å—è—Ü–∞": 60,
                    "3-6 –º–µ—Å—è—Ü–µ–≤": 120,
                    "–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤": 180,
                    "–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ": 90
                }
                days_to_add = deadline_days_map.get(deadline, 30)
                planned_end_date = start_date + timedelta(days=days_to_add)

                # –ü–∞—Ä—Å–∏–º –±—é–¥–∂–µ—Ç –≤ —á–∏—Å–ª–æ –¥–ª—è estimated_cost
                estimated_cost = 0.0
                if "–î–æ 50" in budget:
                    estimated_cost = 50000.0
                elif "50 000 - 100 000" in budget or "50-100" in budget:
                    estimated_cost = 75000.0
                elif "100 000 - 200 000" in budget or "100-200" in budget:
                    estimated_cost = 150000.0
                elif "200 000 - 500 000" in budget or "200-500" in budget:
                    estimated_cost = 350000.0
                elif "–ë–æ–ª–µ–µ 500" in budget:
                    estimated_cost = 500000.0
                else:
                    estimated_cost = 0.0

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—é–¥–∂–µ—Ç–∞
                if estimated_cost < 50000:
                    complexity = 'simple'
                elif estimated_cost < 200000:
                    complexity = 'medium'
                elif estimated_cost < 500000:
                    complexity = 'complex'
                else:
                    complexity = 'premium'

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è original_request
                original_request = f"""–ö–ª–∏–µ–Ω—Ç: @{username} ({full_name})
Telegram ID: {user_id}
–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_info.get('name', '')}
–ë—é–¥–∂–µ—Ç: {budget}
–ñ–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏: {deadline}

–û–ø–∏—Å–∞–Ω–∏–µ:
{description}"""

                project_data = {
                    'title': project_name,
                    'description': description,  # –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                    'original_request': original_request,  # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
                    'project_type': project_info.get('type', 'other'),
                    'status': 'new',
                    'estimated_cost': estimated_cost,
                    'estimated_hours': days_to_add * 8,  # –ü—Ä–∏–º–µ—Ä–Ω–æ 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
                    'complexity': complexity,
                    'start_date': start_date,
                    'planned_end_date': planned_end_date,
                    'structured_tz': {
                        'quick_request': True,
                        'request_type': project_info.get('name', ''),
                        'created_via': 'quick_request_stepwise',
                        'client_username': username,
                        'client_name': full_name,
                        'client_tg_id': user_id,
                        'budget': budget,
                        'budget_numeric': estimated_cost,
                        'deadline': deadline,
                        'deadline_text': deadline,
                        'raw_description': description
                    }
                }

                project = create_project(db, user.id, project_data)
                db.commit()
                project_id = project.id

            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å: ID={project_id}, User={user_id} (@{username}), Type={project_info.get('name')}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            try:
                from ...services.notification_service import notification_service
                admin_message = f"""
üÜï <b>–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç #{project_id}:</b> {project_name}
{project_info.get('emoji', '‚ö°')} <b>–¢–∏–ø:</b> {project_info.get('name', '')}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{username} ({full_name})
üÜî <b>Telegram ID:</b> <code>{user_id}</code>

üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}
‚è∞ <b>–°—Ä–æ–∫–∏:</b> {deadline}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description}

üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</b> /admin (–ø—Ä–æ–µ–∫—Ç #{project_id})
                """
                await notification_service.send_admin_notification(admin_message)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('quick_project_state', None)
            context.user_data.pop('quick_project_type', None)
            context.user_data.pop('quick_project_name', None)
            context.user_data.pop('quick_project_description', None)
            context.user_data.pop('quick_project_budget', None)
            context.user_data.pop('quick_project_deadline', None)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            text = f"""
‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–ù–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞:</b> #{project_id}
{project_info.get('emoji', '‚ö°')} <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project_name}
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}
‚è∞ <b>–°—Ä–æ–∫–∏:</b> {deadline}

<b>üìû –ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑—É—á–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É
‚Ä¢ –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤)
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã

<b>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "ÔøΩÔøΩÔøΩÔøΩ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            """

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
                    InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")
                ],
                [
                    InlineKeyboardButton("‚ö° –ï—â—ë –ø—Ä–æ–µ–∫—Ç", callback_data="quick_request"),
                    InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ –¢–ó", callback_data="create_tz")
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_project_deadline: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")

    async def _send_error_message(self, update: Update, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        keyboard = get_main_menu_keyboard()

        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"‚ùå {message}",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                f"‚ùå {message}",
                reply_markup=keyboard
            )

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
quick_project_handler = QuickProjectRequestHandler()
