import uuid
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from ..keyboards.consultant import (
    get_consultant_main_keyboard,
    get_consultant_topics_keyboard,
    get_consultant_session_keyboard,
    get_popular_questions_keyboard,
    get_consultant_rating_keyboard,
    get_consultant_history_keyboard,
    get_session_actions_keyboard,
    get_quick_questions_keyboard,
    get_consultant_feedback_keyboard
)
from ...database.database import get_db_context, create_consultant_session, add_consultant_query
from ...database.models import User, ConsultantSession, ConsultantQuery
from ...services.openai_service import ai_service
from ...config.logging import get_logger, log_consultant_query

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
# CONSULTANT_TOPIC, CONSULTANT_QUESTION, CONSULTANT_RATING = range(3)

class ConsultantHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–Ω—É—Ç—Ä—å –∫–ª–∞—Å—Å–∞
    CONSULTANT_TOPIC, CONSULTANT_QUESTION, CONSULTANT_RATING = range(3)
    
    def __init__(self):
        self.active_sessions: Dict[int, str] = {}  # user_id -> session_id
        self.session_topics: Dict[str, str] = {}  # session_id -> topic
        self.conversation_history: Dict[str, List[Dict]] = {}  # session_id -> messages
    
    async def show_consultant_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        try:
            text = """
ü§ñ <b>AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –í—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚Ä¢ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –∏ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –õ—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
‚Ä¢ –†–µ—à–µ–Ω–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            keyboard = get_consultant_main_keyboard()
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text, 
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_consultant_main: {e}")
            await self._send_error_message(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞")
    
    async def start_consultation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            
            text = """
ü§ñ <b>–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:
            """
            
            keyboard = get_consultant_topics_keyboard()
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            return self.CONSULTANT_TOPIC
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_consultation: {e}")
            return ConversationHandler.END

    async def start_new_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            user_id = update.effective_user.id
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_id = str(uuid.uuid4())
            self.active_sessions[user_id] = session_id
            self.conversation_history[session_id] = []
            
            text = """
üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            """
            
            keyboard = get_consultant_topics_keyboard()
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            return ConsultantHandler.CONSULTANT_TOPIC
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_new_session: {e}")
            await self._send_error_message(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
    
    async def select_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Ç–µ–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            topic_data = query.data.replace('topic_', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            session_id = self.active_sessions.get(user_id)
            if not session_id:
                await self.start_new_session(update, context)
                return ConsultantHandler.CONSULTANT_TOPIC
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
            topic_names = {
                'telegram_bots': 'Telegram –±–æ—Ç—ã',
                'whatsapp_bots': 'WhatsApp –±–æ—Ç—ã',
                'web_bots': '–í–µ–±-–±–æ—Ç—ã –∏ —á–∞—Ç-–±–æ—Ç—ã',
                'integrations': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                'architecture': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'databases': '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                'deployment': '–î–µ–ø–ª–æ–π –∏ —Ö–æ—Å—Ç–∏–Ω–≥',
                'security': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                'pricing': '–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'marketing': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ',
                'other': '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã'
            }
            
            topic_name = topic_names.get(topic_data, '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã')
            self.session_topics[session_id] = topic_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                create_consultant_session(db, user.id, session_id, topic_name)
            
            text = f"""
‚úÖ <b>–¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: {topic_name}</b>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!
            """
            
            keyboard = get_consultant_session_keyboard(session_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            return ConsultantHandler.CONSULTANT_QUESTION
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_topic: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã")
    
    async def handle_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            session_id = self.active_sessions.get(user_id)
            
            if not session_id:
                await update.message.reply_text(
                    "–°–µ—Å—Å–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.",
                    reply_markup=get_consultant_main_keyboard()
                )
                return ConversationHandler.END
            
            user_question = update.message.text
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_history = self.conversation_history.get(session_id, [])
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            ai_response_data = await ai_service.consultant_response(
                user_question, 
                conversation_history
            )
            
            ai_response = ai_response_data['response']
            tokens_used = ai_response_data['tokens_used']
            response_time = ai_response_data['response_time']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_history.extend([
                {"role": "user", "content": user_question},
                {"role": "assistant", "content": ai_response}
            ])
            self.conversation_history[session_id] = conversation_history
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
                session = db.query(ConsultantSession).filter(
                    ConsultantSession.session_id == session_id
                ).first()
                
                if session:
                    query_record = add_consultant_query(
                        db, session.id, user_question, ai_response, tokens_used, response_time
                    )
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º
                    log_consultant_query(user_id, user_question, len(ai_response))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(
                f"ü§ñ <b>–û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:</b>\n\n{ai_response}",
                parse_mode='HTML',
                reply_markup=get_consultant_session_keyboard(session_id)
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
            rating_text = "–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞:"
            rating_keyboard = get_consultant_rating_keyboard(session_id, query_record.id if 'query_record' in locals() else 0)
            
            await update.message.reply_text(
                rating_text,
                reply_markup=rating_keyboard
            )
            
            return ConsultantHandler.CONSULTANT_QUESTION
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_question: {e}")
            await self._send_error_message(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞")
    
    async def show_popular_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        try:
            text = """
üìö <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
            """
            
            keyboard = get_popular_questions_keyboard()
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_popular_questions: {e}")
    
    async def handle_popular_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            query = update.callback_query
            question_id = query.data.replace('q_', '')
            
            # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            answers = {
                'how_to_start': """
üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ—Ç–æ–≤?</b>

<b>1. –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã:</b>
‚Ä¢ Python (–æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –¥–ª—è –±–æ—Ç–æ–≤)
‚Ä¢ HTTP/API –ø–æ–Ω—è—Ç–∏—è
‚Ä¢ Telegram Bot API

<b>2. –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É:</b>
‚Ä¢ python-telegram-bot (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é)
‚Ä¢ aiogram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
‚Ä¢ telebot (–ø—Ä–æ—Å—Ç–∞—è)

<b>3. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞:</b>
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-–±–æ—Ç
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—ã

<b>4. –ò–∑—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚Ä¢ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite, PostgreSQL)
‚Ä¢ –î–µ–ø–ª–æ–π (VPS, Heroku, Railway)
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

<b>–†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è python-telegram-bot
‚Ä¢ YouTube –∫–∞–Ω–∞–ª—ã –ø–æ Python
‚Ä¢ GitHub –ø—Ä–∏–º–µ—Ä—ã –±–æ—Ç–æ–≤
                """,
                
                'bot_cost': """
üí∞ <b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞?</b>

<b>–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç (10,000-25,000‚ÇΩ):</b>
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é
‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
‚Ä¢ –ë–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
‚Ä¢ 3-7 –¥–Ω–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

<b>–°—Ä–µ–¥–Ω–∏–π –±–æ—Ç (25,000-50,000‚ÇΩ):</b>
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ 1-2 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
‚Ä¢ 1-2 –Ω–µ–¥–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

<b>–°–ª–æ–∂–Ω—ã–π –±–æ—Ç (50,000-100,000‚ÇΩ):</b>
‚Ä¢ –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏
‚Ä¢ 2-4 –Ω–µ–¥–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

<b>–ü—Ä–µ–º–∏—É–º –±–æ—Ç (100,000‚ÇΩ+):</b>
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
‚Ä¢ –í—ã—Å–æ–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ 1+ –º–µ—Å—è—Ü —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

<b>–§–∞–∫—Ç–æ—Ä—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∏–∑–∞–π–Ω—É
‚Ä¢ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                """,
                
                'development_time': """
‚è± <b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É?</b>

<b>–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç: 3-7 –¥–Ω–µ–π</b>
‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ú–∏–Ω–∏–º—É–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

<b>–°—Ä–µ–¥–Ω–∏–π –±–æ—Ç: 1-2 –Ω–µ–¥–µ–ª–∏</b>
‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

<b>–°–ª–æ–∂–Ω—ã–π –±–æ—Ç: 2-4 –Ω–µ–¥–µ–ª–∏</b>
‚Ä¢ –°–ª–æ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
‚Ä¢ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

<b>–ü—Ä–µ–º–∏—É–º –±–æ—Ç: 1+ –º–µ—Å—è—Ü</b>
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

<b>–ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏:</b>
‚Ä¢ –ß–µ—Ç–∫–æ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
                """,
                
                'technologies': """
üîß <b>–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>

<b>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ Python (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é) - –ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
‚Ä¢ Node.js - –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ Go - –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
‚Ä¢ PHP - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

<b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤:</b>
‚Ä¢ python-telegram-bot - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
‚Ä¢ aiogram - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
‚Ä¢ grammy (TS/JS) - –¥–ª—è Node.js
‚Ä¢ telebot (Python) - –ø—Ä–æ—Å—Ç–∞—è

<b>–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ SQLite - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ PostgreSQL - –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ Redis - –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ MongoDB - –¥–ª—è –≥–∏–±–∫–∏—Ö —Å—Ö–µ–º

<b>–î–µ–ø–ª–æ–π –∏ —Ö–æ—Å—Ç–∏–Ω–≥:</b>
‚Ä¢ VPS (Ubuntu) - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
‚Ä¢ Heroku - –ø—Ä–æ—Å—Ç–æ—Ç–∞ –¥–µ–ø–ª–æ—è
‚Ä¢ Railway - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
‚Ä¢ Docker - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>
‚Ä¢ nginx - –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
‚Ä¢ systemd - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
‚Ä¢ Prometheus - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ Sentry - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
                """
            }
            
            answer = answers.get(question_id, "–û—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            
            await query.edit_message_text(
                answer,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="consultant_new_session")],
                    [InlineKeyboardButton("üìö –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="consultant_popular_questions")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_popular_question: {e}")
    
    async def show_consultant_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
        try:
            user_id = update.effective_user.id
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                sessions = db.query(ConsultantSession).filter(
                    ConsultantSession.user_id == user.id
                ).order_by(ConsultantSession.created_at.desc()).all()
            
            if not sessions:
                text = """
üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.
–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!
                """
                keyboard = get_consultant_main_keyboard()
            else:
                text = f"""
üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</b>

–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(sessions)}
–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
                """
                sessions_data = [session.to_dict() for session in sessions]
                keyboard = get_consultant_history_keyboard(sessions_data)
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_consultant_history: {e}")
    
    async def rate_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        try:
            query = update.callback_query
            rating_data = query.data.split('_')
            rating = int(rating_data[1])
            session_id = rating_data[2]
            query_id = int(rating_data[3]) if len(rating_data) > 3 else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                if query_id:
                    query_record = db.query(ConsultantQuery).filter(
                        ConsultantQuery.id == query_id
                    ).first()
                    
                    if query_record:
                        query_record.rating = rating
                        db.commit()
            
            rating_stars = "‚≠ê" * rating
            await query.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! {rating_stars}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ—Å—Å–∏—é
            keyboard = get_consultant_session_keyboard(session_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ rate_response: {e}")
    
    async def end_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            session_id = query.data.replace('consultant_end_', '')
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                session = db.query(ConsultantSession).filter(
                    ConsultantSession.session_id == session_id
                ).first()
                
                if session:
                    session.status = "completed"
                    db.commit()
            
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]
            
            if session_id in self.conversation_history:
                del self.conversation_history[session_id]
            
            text = """
‚úÖ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!
–ù–∞–¥–µ—é—Å—å, —Å–º–æ–≥ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
            """
            
            keyboard = get_consultant_main_keyboard()
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ end_session: {e}")
    
    async def continue_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            user_id = update.effective_user.id
            
            with get_db_context() as db:
                from ...database.database import get_or_create_user
                user = get_or_create_user(db, user_id)
                
                # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                active_session = db.query(ConsultantSession).filter(
                    ConsultantSession.user_id == user.id,
                    ConsultantSession.status == "active"
                ).order_by(ConsultantSession.created_at.desc()).first()
            
            if not active_session:
                text = """
‚ùå <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.
                """
                keyboard = get_consultant_main_keyboard()
            else:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                session_id = active_session.session_id
                self.active_sessions[user_id] = session_id
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                with get_db_context() as db:
                    queries = db.query(ConsultantQuery).filter(
                        ConsultantQuery.session_id == active_session.id
                    ).order_by(ConsultantQuery.created_at.asc()).all()
                    
                    conversation_history = []
                    for q in queries:
                        conversation_history.extend([
                            {"role": "user", "content": q.user_query},
                            {"role": "assistant", "content": q.ai_response}
                        ])
                    
                    self.conversation_history[session_id] = conversation_history
                
                text = f"""
üîÑ <b>–°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>

–¢–µ–º–∞: {active_session.topic}
–í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {len(queries)}

–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!
                """
                keyboard = get_consultant_session_keyboard(session_id)
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            if active_session:
                return ConsultantHandler.CONSULTANT_QUESTION
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ continue_session: {e}")
    
    async def _send_error_message(self, update: Update, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_text = f"‚ùå {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            keyboard = get_consultant_main_keyboard()
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
consultant_handler = ConsultantHandler()