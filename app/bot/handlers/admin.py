from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Dict, Any

from ...config.settings import settings
from ...config.logging import get_logger, log_user_action
from ...database.database import get_db_context
from ...database.models import User, Project, ConsultantSession
from ...services.analytics_service import analytics_service
from ...services.notification_service import notification_service
from ...utils.decorators import admin_only, standard_handler
from ...utils.helpers import format_currency, format_datetime


logger = get_logger(__name__)

class AdminHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self):
        self.admin_ids = getattr(settings, 'ADMIN_IDS', [])
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in self.admin_ids or str(user_id) == settings.NOTIFICATION_CHAT_ID
    
    @standard_handler
    async def admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
        try:
            user_id = update.effective_user.id
            
            if not self.is_admin(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            log_user_action(user_id, "admin_menu")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            with get_db_context() as db:
                total_users = db.query(User).count()
                total_projects = db.query(Project).count()
                active_projects = db.query(Project).filter(
                    Project.status.in_(['new', 'review', 'accepted', 'in_progress', 'testing'])
                ).count()
                total_sessions = db.query(ConsultantSession).count()
            
            text = f"""
üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤: {total_projects}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {active_projects}
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {total_sessions}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                    InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", callback_data="admin_projects")
                ],
                [
                    InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                    InlineKeyboardButton("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="admin_consultations")
                ],
                [
                    InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
                ],
                [
                    InlineKeyboardButton("üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh")
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_menu: {e}")
    
    @standard_handler
    async def show_admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            user_id = update.effective_user.id
            
            if not self.is_admin(user_id):
                await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
            stats = analytics_service.get_dashboard_data(7)
            
            user_stats = stats.get('user_stats', {})
            project_stats = stats.get('project_stats', {})
            consultant_stats = stats.get('consultant_stats', {})
            financial_stats = stats.get('financial_stats', {})
            
            text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (7 –¥–Ω–µ–π)</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {user_stats.get('total_users', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö: {user_stats.get('new_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.get('active_users', 0)}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {user_stats.get('conversion_rate', 0):.1f}%

üìã <b>–ü—Ä–æ–µ–∫—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {project_stats.get('total_projects', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö: {project_stats.get('new_projects', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {project_stats.get('completed_projects', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {project_stats.get('completion_rate', 0):.1f}%

ü§ñ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>
‚Ä¢ –°–µ—Å—Å–∏–π: {consultant_stats.get('total_sessions', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {consultant_stats.get('new_sessions', 0)}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {consultant_stats.get('total_queries', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {consultant_stats.get('avg_rating', 0):.1f}/5

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –î–æ—Ö–æ–¥: {format_currency(financial_stats.get('total_revenue', 0))}
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {format_currency(financial_stats.get('potential_revenue', 0))}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(financial_stats.get('avg_check', 0))}
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_monthly_report"),
                    InlineKeyboardButton("üìä –í–æ—Ä–æ–Ω–∫–∞", callback_data="admin_funnel")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"),
                    InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_stats: {e}")
    
    @standard_handler
    async def show_recent_projects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã"""
        try:
            user_id = update.effective_user.id
            
            if not self.is_admin(user_id):
                await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            with get_db_context() as db:
                recent_projects = db.query(Project).order_by(
                    Project.created_at.desc()
                ).limit(10).all()
            
            if not recent_projects:
                text = "üì≠ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤"
            else:
                text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n"
                
                for i, project in enumerate(recent_projects, 1):
                    status_emoji = self._get_status_emoji(project.status)
                    created_date = format_datetime(project.created_at, 'short') if project.created_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    
                    text += f"<b>{i}. {project.title[:30]}{'...' if len(project.title) > 30 else ''}</b>\n"
                    text += f"{status_emoji} {project.status} | {format_currency(project.estimated_cost)} | {created_date}\n\n"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_projects")],
                [InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
            ])
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_recent_projects: {e}")
    
    def _get_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            'new': 'üÜï',
            'review': 'üëÄ',
            'accepted': '‚úÖ',
            'in_progress': 'üîÑ',
            'testing': 'üß™',
            'completed': 'üéâ',
            'cancelled': '‚ùå'
        }
        return emojis.get(status, 'üìä')
    
    @standard_handler
    async def send_daily_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            user_id = update.effective_user.id
            
            if not self.is_admin(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            success = await notification_service.send_daily_report()
            
            if success:
                await update.message.reply_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_report: {e}")
    
    @standard_handler
    async def clear_analytics_cache(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            user_id = update.effective_user.id
            
            if not self.is_admin(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            analytics_service.clear_cache()
            await update.message.reply_text("‚úÖ –ö—ç—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ clear_analytics_cache: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
admin_handler = AdminHandler()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    await admin_handler.admin_menu(update, context)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    await admin_handler.show_admin_stats(update, context)

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /report"""
    await admin_handler.send_daily_report(update, context)