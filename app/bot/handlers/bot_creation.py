"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∞–π–¥–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather
"""
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from ..keyboards.main import (
    get_bot_creation_guide_keyboard, 
    get_bot_guide_steps_keyboard,
    get_back_to_main_keyboard
)
from ...database.database import get_db_context, get_or_create_user
from ...database.models import Project
from ...config.logging import get_logger, log_user_action

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_BOT_TOKEN = 1

class BotCreationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""

    async def show_bot_creation_guide(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–∞–π–¥–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "bot_creation_guide", "–ü–æ–∫–∞–∑ –≥–∞–π–¥–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞")

            message_text = """
üéØ **–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞**

–°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ! 
–°–ª–µ–¥—É–π—Ç–µ –Ω–∞—à–µ–º—É –ø–æ—à–∞–≥–æ–≤–æ–º—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É:

üîπ –û—Ç–∫—Ä–æ–π—Ç–µ BotFather (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç Telegram)
üîπ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
üîπ –ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω
üîπ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

‚ú® –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à API –∫–ª—é—á –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ!
            """

            keyboard = get_bot_creation_guide_keyboard()

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–π–¥–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞: {e}")
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_main_keyboard()
            )

    async def show_bot_creation_steps(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "bot_creation_steps", "–ü–æ–∫–∞–∑ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

            message_text = """
üìñ **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞**

**–®–∞–≥ 1:** –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather
üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather –≤ –ø–æ–∏—Å–∫–µ

**–®–∞–≥ 2:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/newbot`
üì± BotFather –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∏–º—è –±–æ—Ç–∞

**–®–∞–≥ 3:** –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
üí¨ –ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ–π –ü–µ—Ä–≤—ã–π –ë–æ—Ç"

**–®–∞–≥ 4:** –í–≤–µ–¥–∏—Ç–µ username –±–æ—Ç–∞
üîó –î–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot", –Ω–∞–ø—Ä–∏–º–µ—Ä: my_first_bot

**–®–∞–≥ 5:** –ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω
üîë BotFather –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Ç–æ–∫–µ–Ω –≤–∏–¥–∞: `123456789:ABCdef...`

**–®–∞–≥ 6:** –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å
üíæ –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω!
            """

            keyboard = get_bot_guide_steps_keyboard()

            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_main_keyboard()
            )

    async def start_bot_token_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "bot_token_entry_start", "–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ API —Ç–æ–∫–µ–Ω–∞")

            message_text = """
üîë **–í–≤–æ–¥ API —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather.

–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
`123456789:ABCdef1234567890abcdef1234567890abc`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** 
‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
‚Ä¢ –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
            """

            await update.callback_query.edit_message_text(
                text=message_text,
                parse_mode='Markdown'
            )

            return ENTER_BOT_TOKEN

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_main_keyboard()
            )
            return ConversationHandler.END

    async def save_bot_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
        try:
            user_id = update.effective_user.id
            token = update.message.text.strip()

            log_user_action(user_id, "bot_token_save", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞: {token[:10]}...")

            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            if not self.validate_bot_token(token):
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!**\n\n"
                    "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n"
                    "`123456789:ABCdef1234567890abcdef1234567890abc`\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞:",
                    parse_mode='Markdown'
                )
                return ENTER_BOT_TOKEN

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with get_db_context() as db:
                db_user = get_or_create_user(
                    db=db,
                    telegram_id=user_id,
                    username=update.effective_user.username,
                    first_name=update.effective_user.first_name,
                    last_name=update.effective_user.last_name
                )

                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                project = db.query(Project).filter(
                    Project.user_id == db_user.id
                ).order_by(Project.created_at.desc()).first()

                if not project:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –±–æ—Ç–∞
                    project = Project(
                        user_id=db_user.id,
                        title="Telegram –±–æ—Ç",
                        description="–ü—Ä–æ–µ–∫—Ç Telegram –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ BotFather",
                        project_type="bot",
                        status="new",
                        complexity="medium",
                        priority="medium"
                    )
                    db.add(project)
                    db.flush()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
                if not project.project_metadata:
                    project.project_metadata = {}

                project.project_metadata['bot_token'] = token
                project.project_metadata['bot_token_added_at'] = str(update.message.date)

                db.commit()

                success_message = f"""
‚úÖ **API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**

ü§ñ –í–∞—à —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É: "{project.title}"
üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"

üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞!**

–ß—Ç–æ –¥–∞–ª—å—à–µ?
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ

                """

                keyboard = get_back_to_main_keyboard()
                await update.message.reply_text(
                    text=success_message,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )

                return ConversationHandler.END

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_main_keyboard()
            )
            return ConversationHandler.END

    async def cancel_bot_token_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞"""
        user_id = update.effective_user.id
        log_user_action(user_id, "bot_token_entry_cancel", "–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞")

        await update.message.reply_text(
            "‚ùå –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_back_to_main_keyboard()
        )
        return ConversationHandler.END

    def validate_bot_token(self, token: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        if not token:
            return False
        
        # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å : –∏ –∏–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–ª–∏–Ω—É
        if ':' not in token:
            return False
        
        parts = token.split(':')
        if len(parts) != 2:
            return False
        
        # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º
        try:
            int(parts[0])
        except ValueError:
            return False
        
        # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π
        if len(parts[1]) < 10:
            return False
        
        return True

    def get_conversation_handler(self):
        """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
        return ConversationHandler(
            entry_points=[],  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            states={
                ENTER_BOT_TOKEN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_bot_token)
                ]
            },
            fallbacks=[
                MessageHandler(filters.COMMAND, self.cancel_bot_token_entry)
            ]
        )
