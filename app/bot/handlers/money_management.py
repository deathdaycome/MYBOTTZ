"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å OCR
"""

from telegram import Update, File
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging
import os
import io
from PIL import Image
import pytesseract
import json
from datetime import datetime
import uuid
import mimetypes
from sqlalchemy import func

from ...config.settings import settings
from ...database.database import get_db_context
from ...database.models import FinanceTransaction, FinanceCategory, ReceiptFile, AdminUser
from ...utils.decorators import standard_handler
from ..keyboards.main import get_admin_console_keyboard, get_admin_money_keyboard

logger = logging.getLogger(__name__)

class MoneyManagementHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
        self.allowed_file_types = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf']
        self.max_file_size = 10 * 1024 * 1024  # 10MB
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–µ–∫–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.receipts_dir = "uploads/receipts"
        os.makedirs(self.receipts_dir, exist_ok=True)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in settings.ADMIN_IDS
    
    @standard_handler
    async def handle_admin_console(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –∫–æ–Ω—Å–æ–ª–∏")
            return
        
        await update.callback_query.answer()
        
        text = """
üîß <b>–ê–¥–º–∏–Ω –∫–æ–Ω—Å–æ–ª—å</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</b> - —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
üì± <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
üìÅ <b>–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        """
        
        keyboard = get_admin_console_keyboard()
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    @standard_handler
    async def handle_admin_money(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with get_db_context() as db:
            total_income = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "income"
            ).count()
            
            total_expenses = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "expense"
            ).count()
            
            total_receipts = db.query(ReceiptFile).count()
        
        text = f"""
üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</b>

üìà <b>–î–æ—Ö–æ–¥—ã:</b> {total_income} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
üìâ <b>–†–∞—Å—Ö–æ–¥—ã:</b> {total_expenses} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π  
üìÑ <b>–ß–µ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</b> {total_receipts}

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
üìÑ <b>–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
üíº <b>–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

<i>üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å—É–º–º—É –∏ –¥–∞—Ç—É!</i>
        """
        
        keyboard = get_admin_money_keyboard()
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    @standard_handler
    async def handle_upload_receipt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = "waiting_for_receipt"
        
        text = """
üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, JPG, PNG)

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å—É–º–º—É
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–∞—Ç—É
‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç —á–µ–∫
‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ JPG, PNG, GIF
‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã  
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB

üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å–µ–π—á–∞—Å...
        """
        
        await update.callback_query.edit_message_text(
            text=text,
            parse_mode='HTML'
        )
    
    @standard_handler
    async def handle_document_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞/—Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user_states.get(user_id) != "waiting_for_receipt":
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_obj = None
        file_name = None
        file_size = None
        
        if update.message.photo:
            # –§–æ—Ç–æ
            file_obj = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file_name = f"receipt_{user_id}_{int(datetime.now().timestamp())}.jpg"
            file_size = file_obj.file_size
        elif update.message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç
            file_obj = update.message.document
            file_name = file_obj.file_name or f"receipt_{user_id}_{int(datetime.now().timestamp())}"
            file_size = file_obj.file_size
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(file_name)
            if mime_type not in self.allowed_file_types:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG, GIF –∏–ª–∏ PDF."
                )
                return
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size and file_size > self.max_file_size:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB."
            )
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...\nüìÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            telegram_file = await file_obj.get_file()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path = os.path.join(self.receipts_dir, file_name)
            await telegram_file.download_to_drive(file_path)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º OCR
            ocr_result = await self._process_ocr(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with get_db_context() as db:
                # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                admin_user = db.query(AdminUser).filter(
                    AdminUser.username == "admin"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç username "admin"
                ).first()
                
                if not admin_user:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    admin_user = AdminUser(
                        username="admin",
                        password_hash="dummy",  # –ó–∞–≥–ª—É—à–∫–∞
                        role="owner"
                    )
                    db.add(admin_user)
                    db.commit()
                    db.refresh(admin_user)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —á–µ–∫–∞
                receipt_file = ReceiptFile(
                    filename=file_name,
                    original_filename=file_obj.file_name if hasattr(file_obj, 'file_name') else file_name,
                    file_path=file_path,
                    file_size=file_size or 0,
                    file_type=file_name.split('.')[-1].lower(),
                    ocr_status="completed" if ocr_result['success'] else "failed",
                    ocr_result=ocr_result,
                    ocr_confidence=ocr_result.get('confidence', 0.0),
                    ocr_error=ocr_result.get('error'),
                    uploaded_by_id=admin_user.id,
                    processed_at=datetime.utcnow()
                )
                db.add(receipt_file)
                db.commit()
                db.refresh(receipt_file)
            
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ _show_ocr_result
                receipt_file_id = receipt_file.id
                receipt_filename = receipt_file.filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states[user_id] = {
                "state": "choosing_transaction_type",
                "receipt_file_id": receipt_file_id,
                "receipt_filename": receipt_filename,
                "ocr_result": ocr_result,
                "file_path": file_path
            }
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await self._show_transaction_type_selection(update, context, ocr_result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª."
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.user_states.pop(user_id, None)
    
    async def _process_ocr(self, file_path: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é OCR —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º AI OCR –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}")
        try:
            import base64
            import aiohttp
            import json
            from ...config.settings import get_settings
            
            settings = get_settings()
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            with open(file_path, 'rb') as image_file:
                image_data = base64.b64encode(image_file.read()).decode('utf-8')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            if file_path.lower().endswith(('.jpg', '.jpeg')):
                mime_type = 'image/jpeg'
            elif file_path.lower().endswith('.png'):
                mime_type = 'image/png'
            elif file_path.lower().endswith('.gif'):
                mime_type = 'image/gif'
            elif file_path.lower().endswith('.pdf'):
                mime_type = 'application/pdf'
            else:
                mime_type = 'image/jpeg'
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —á–µ–∫–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
1. –°—É–º–º—É (–∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ)
2. –î–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏
3. –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–º–∞–≥–∞–∑–∏–Ω–∞

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "amount": —á–∏—Å–ª–æ_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤_–∏_–≤–∞–ª—é—Ç—ã,
    "date": "–¥–∞—Ç–∞_–≤_—Ñ–æ—Ä–º–∞—Ç–µ_DD.MM.YYYY",
    "organization": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
    "success": true_–∏–ª–∏_false,
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1
}

–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏ success: false."""

            user_prompt = "–†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ–∫–∞/–¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—É–º–º—É, –¥–∞—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            headers = {
                'Authorization': f'Bearer {settings.OPENROUTER_API_KEY}',
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://telegram-bot.local',
                'X-Title': 'Telegram Receipt OCR Bot'
            }
            
            data = {
                'model': settings.DEFAULT_MODEL,  # Claude 3.5 Sonnet –∏–ª–∏ GPT-4 Vision
                'messages': [
                    {
                        'role': 'system',
                        'content': system_prompt
                    },
                    {
                        'role': 'user',
                        'content': [
                            {
                                'type': 'text',
                                'text': user_prompt
                            },
                            {
                                'type': 'image_url',
                                'image_url': {
                                    'url': f'data:{mime_type};base64,{image_data}'
                                }
                            }
                        ]
                    }
                ],
                'max_tokens': 1024,
                'temperature': 0.1
            }
            
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏: {settings.DEFAULT_MODEL}")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{settings.OPENROUTER_BASE_URL}/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"‚ùå AI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return {
                            'success': False,
                            'error': f'AI API –æ—à–∏–±–∫–∞: {response.status}',
                            'confidence': 0.0
                        }
                    
                    result = await response.json()
                    ai_response = result['choices'][0]['message']['content']
                    
                    logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {ai_response[:200]}...")
                    
                    # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ ```json)
                        json_start = ai_response.find('{')
                        json_end = ai_response.rfind('}') + 1
                        if json_start != -1 and json_end > json_start:
                            json_str = ai_response[json_start:json_end]
                            ocr_data = json.loads(json_str)
                        else:
                            ocr_data = json.loads(ai_response)
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        parsed_date = None
                        if ocr_data.get('date'):
                            try:
                                parsed_date = datetime.strptime(ocr_data['date'], '%d.%m.%Y')
                            except:
                                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                                for fmt in ['%Y-%m-%d', '%d/%m/%Y', '%d.%m.%y']:
                                    try:
                                        parsed_date = datetime.strptime(ocr_data['date'], fmt)
                                        break
                                    except:
                                        continue
                        
                        return {
                            'success': ocr_data.get('success', True),
                            'amount': float(ocr_data.get('amount', 0)) if ocr_data.get('amount') else None,
                            'date': parsed_date.isoformat() if parsed_date else None,
                            'organization': ocr_data.get('organization', ''),
                            'confidence': float(ocr_data.get('confidence', 0.8)),
                            'raw_response': ai_response,
                            'source': 'ai_ocr'
                        }
                        
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI: {e}")
                        logger.error(f"AI response: {ai_response}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        amount = None
                        date_str = None
                        
                        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–∏—Å–µ–ª –∫–∞–∫ —Å—É–º–º
                        import re
                        amount_matches = re.findall(r'(\d+\.?\d*)', ai_response)
                        if amount_matches:
                            amount = float(amount_matches[0])
                        
                        return {
                            'success': amount is not None,
                            'amount': amount,
                            'date': None,
                            'organization': '',
                            'confidence': 0.3,
                            'raw_response': ai_response,
                            'source': 'ai_ocr_fallback',
                            'error': f'JSON parse error: {str(e)}'
                        }
                    
        except Exception as e:
            logger.error(f"‚ùå AI OCR Error: {e}")
            return {
                'success': False,
                'error': str(e),
                'confidence': 0.0,
                'source': 'ai_ocr_error'
            }
    
    async def _show_ocr_result(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              receipt_file_id: int, receipt_filename: str, ocr_result: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        
        if ocr_result['success'] and ocr_result.get('amount'):
            amount = ocr_result['amount']
            date_str = ocr_result.get('date', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
            
            if date_str != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞':
                try:
                    date_obj = datetime.fromisoformat(date_str)
                    date_str = date_obj.strftime('%d.%m.%Y')
                except:
                    pass
            
            text = f"""
‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üìÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:</b>
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ
üìÖ <b>–î–∞—Ç–∞:</b> {date_str}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {ocr_result.get('confidence', 0) * 100:.1f}%

<b>–≠—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?</b>
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [
                    InlineKeyboardButton("üìà –î–æ—Ö–æ–¥", callback_data=f"transaction_income_{receipt_file_id}"),
                    InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥", callback_data=f"transaction_expense_{receipt_file_id}")
                ],
                [
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data=f"edit_amount_{receipt_file_id}"),
                    InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"edit_date_{receipt_file_id}")
                ],
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_money")
                ]
            ]
            
            await update.message.reply_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        else:
            # OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            error_msg = ocr_result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
            
            text = f"""
‚ö†Ô∏è <b>–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>

‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:</b> {error_msg}

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
            """
            
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_entry_{receipt_file_id}")
                ],
                [
                    InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —á–µ–∫", callback_data="upload_receipt"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_money")
                ]
            ]
            
            await update.message.reply_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
    
    @standard_handler
    async def handle_transaction_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        callback_data = update.callback_query.data
        
        # –ü–∞—Ä—Å–∏–º callback_data: transaction_{type}_{receipt_id}
        parts = callback_data.split('_')
        if len(parts) != 3:
            return
        
        transaction_type = parts[1]  # income –∏–ª–∏ expense
        receipt_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
        with get_db_context() as db:
            receipt_file = db.query(ReceiptFile).filter(ReceiptFile.id == receipt_id).first()
            
            if not receipt_file:
                await update.callback_query.edit_message_text("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            ocr_data = receipt_file.ocr_result
            amount = ocr_data.get('amount', 0)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            transaction_date = datetime.utcnow()
            if ocr_data.get('date'):
                try:
                    transaction_date = datetime.fromisoformat(ocr_data['date'])
                except:
                    pass
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_query = db.query(FinanceCategory).filter(
                FinanceCategory.type == transaction_type,
                FinanceCategory.is_active == True
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã" –∏–ª–∏ "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
            default_category_name = "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã" if transaction_type == "income" else "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
            category = category_query.filter(FinanceCategory.name.contains("–ü—Ä–æ—á–∏–µ")).first()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            if not category:
                category = category_query.first()
            
            if not category:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = FinanceTransaction(
                amount=amount,
                type=transaction_type,
                description=f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ —á–µ–∫–∞ {receipt_file.filename}",
                date=transaction_date,
                category_id=category.id,
                receipt_url=receipt_file.file_path,
                notes=f"OCR –¥–∞–Ω–Ω—ã–µ: {json.dumps(ocr_data, ensure_ascii=False)}",
                created_by_id=receipt_file.uploaded_by_id
            )
            
            db.add(transaction)
            db.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            type_emoji = "üìà" if transaction_type == "income" else "üìâ"
            type_name = "–î–æ—Ö–æ–¥" if transaction_type == "income" else "–†–∞—Å—Ö–æ–¥"
            
            text = f"""
‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>

{type_emoji} <b>–¢–∏–ø:</b> {type_name}
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ
üìÖ <b>–î–∞—Ç–∞:</b> {transaction_date.strftime('%d.%m.%Y')}
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.name}
üìÑ <b>–ß–µ–∫:</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω

–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
            """
            
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [
                    InlineKeyboardButton("üíº –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="my_transactions"),
                    InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="money_analytics")
                ],
                [
                    InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", callback_data="upload_receipt"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states.pop(user_id, None)


    @standard_handler
    async def handle_my_transactions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        with get_db_context() as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = db.query(FinanceTransaction).order_by(
                FinanceTransaction.created_at.desc()
            ).limit(10).all()
            
            if not transactions:
                text = """
üíº <b>–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>

üì≠ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é!
                """
                
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload_receipt")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_money")]
                ]
                
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            text = "üíº <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
            
            total_income = 0
            total_expense = 0
            
            for transaction in transactions:
                emoji = "üìà" if transaction.type == "income" else "üìâ"
                amount_str = f"+{transaction.amount:,.0f}" if transaction.type == "income" else f"-{transaction.amount:,.0f}"
                date_str = transaction.date.strftime('%d.%m.%Y') if transaction.date else "‚Äî"
                
                if transaction.type == "income":
                    total_income += transaction.amount
                else:
                    total_expense += transaction.amount
                
                text += f"{emoji} <b>{amount_str} ‚ÇΩ</b> - {transaction.category}\n"
                text += f"üìÖ {date_str}"
                if transaction.description:
                    text += f" | {transaction.description[:50]}{'...' if len(transaction.description) > 50 else ''}"
                text += "\n\n"
            
            text += f"üí∞ <b>–ò—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b>\n"
            text += f"üìà –î–æ—Ö–æ–¥—ã: +{total_income:,.0f} ‚ÇΩ\n"
            text += f"üìâ –†–∞—Å—Ö–æ–¥—ã: -{total_expense:,.0f} ‚ÇΩ\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: {total_income - total_expense:+,.0f} ‚ÇΩ"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üìà –î–æ—Ö–æ–¥—ã", callback_data="view_income"),
                InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥—ã", callback_data="view_expenses")
            ],
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="money_analytics"),
                InlineKeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="money_categories")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_money"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    @standard_handler
    async def handle_view_income(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        with get_db_context() as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            from datetime import datetime, timedelta
            last_month = datetime.now() - timedelta(days=30)
            
            income_transactions = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "income",
                FinanceTransaction.date >= last_month
            ).order_by(FinanceTransaction.date.desc()).all()
            
            if not income_transactions:
                text = """
üìà <b>–î–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>

üì≠ –î–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ—Ö–æ–¥–∞!
                """
            else:
                text = "üìà <b>–î–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>\n\n"
                
                total = 0
                category_totals = {}
                
                for transaction in income_transactions:
                    total += transaction.amount
                    
                    if transaction.category not in category_totals:
                        category_totals[transaction.category] = 0
                    category_totals[transaction.category] += transaction.amount
                    
                    date_str = transaction.date.strftime('%d.%m.%Y') if transaction.date else "‚Äî"
                    text += f"üí∞ <b>+{transaction.amount:,.0f} ‚ÇΩ</b> - {transaction.category}\n"
                    text += f"üìÖ {date_str}"
                    if transaction.description:
                        text += f" | {transaction.description[:40]}{'...' if len(transaction.description) > 40 else ''}"
                    text += "\n\n"
                
                text += f"üíµ <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥: +{total:,.0f} ‚ÇΩ</b>\n\n"
                
                # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if category_totals:
                    text += "<b>üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
                    sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)[:5]
                    for i, (category, amount) in enumerate(sorted_categories, 1):
                        text += f"{i}. {category}: +{amount:,.0f} ‚ÇΩ\n"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload_receipt"),
                InlineKeyboardButton("üíº –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="my_transactions")
            ],
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="money_analytics"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_money")
            ]
        ]
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    @standard_handler
    async def handle_view_expenses(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        with get_db_context() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            from datetime import datetime, timedelta
            last_month = datetime.now() - timedelta(days=30)
            
            expense_transactions = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "expense",
                FinanceTransaction.date >= last_month
            ).order_by(FinanceTransaction.date.desc()).all()
            
            if not expense_transactions:
                text = """
üìâ <b>–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>

üì≠ –†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.

–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞!
                """
            else:
                text = "üìâ <b>–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>\n\n"
                
                total = 0
                category_totals = {}
                
                for transaction in expense_transactions:
                    total += transaction.amount
                    
                    if transaction.category not in category_totals:
                        category_totals[transaction.category] = 0
                    category_totals[transaction.category] += transaction.amount
                    
                    date_str = transaction.date.strftime('%d.%m.%Y') if transaction.date else "‚Äî"
                    text += f"üí∏ <b>-{transaction.amount:,.0f} ‚ÇΩ</b> - {transaction.category}\n"
                    text += f"üìÖ {date_str}"
                    if transaction.description:
                        text += f" | {transaction.description[:40]}{'...' if len(transaction.description) > 40 else ''}"
                    text += "\n\n"
                
                text += f"üí∏ <b>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: -{total:,.0f} ‚ÇΩ</b>\n\n"
                
                # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
                if category_totals:
                    text += "<b>üí∏ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:</b>\n"
                    sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)[:5]
                    for i, (category, amount) in enumerate(sorted_categories, 1):
                        text += f"{i}. {category}: -{amount:,.0f} ‚ÇΩ\n"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload_receipt"),
                InlineKeyboardButton("üíº –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="my_transactions")
            ],
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="money_analytics"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_money")
            ]
        ]
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    @standard_handler
    async def handle_money_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        with get_db_context() as db:
            income_categories = db.query(MoneyCategory).filter(
                MoneyCategory.type == "income", 
                MoneyCategory.is_active == True
            ).order_by(MoneyCategory.sort_order).all()
            
            expense_categories = db.query(MoneyCategory).filter(
                MoneyCategory.type == "expense", 
                MoneyCategory.is_active == True
            ).order_by(MoneyCategory.sort_order).all()
        
        text = "üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        
        if income_categories:
            text += "üìà <b>–î–æ—Ö–æ–¥—ã:</b>\n"
            for cat in income_categories[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"‚Ä¢ {cat.name}\n"
            if len(income_categories) > 10:
                text += f"... –∏ –µ—â–µ {len(income_categories) - 10}\n"
            text += "\n"
        
        if expense_categories:
            text += "üìâ <b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
            for cat in expense_categories[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"‚Ä¢ {cat.name}\n"
            if len(expense_categories) > 10:
                text += f"... –∏ –µ—â–µ {len(expense_categories) - 10}\n"
        
        text += "\nüí° <i>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.</i>"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload_receipt"),
                InlineKeyboardButton("üíº –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="my_transactions")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_money"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    @standard_handler
    async def handle_money_analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        with get_db_context() as db:
            from datetime import datetime, timedelta
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            now = datetime.now()
            last_month = now - timedelta(days=30)
            last_week = now - timedelta(days=7)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_transactions = db.query(FinanceTransaction).count()
            total_income = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "income"
            ).count()
            total_expenses = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "expense"
            ).count()
            
            # –°—É–º–º—ã –∑–∞ –º–µ—Å—è—Ü
            month_income_sum = db.query(FinanceTransaction).filter(
                FinanceTransaction.type == "income",
                FinanceTransaction.date >= last_month
            ).with_entities(func.sum(FinanceTransaction.amount)).scalar() or 0
            
            month_expense_sum = db.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM finance_transactions WHERE type = 'expense' AND date >= ?",
                (last_month,)
            ).scalar() or 0
            
            # –°—É–º–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            week_income_sum = db.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM finance_transactions WHERE type = 'income' AND date >= ?",
                (last_week,)
            ).scalar() or 0
            
            week_expense_sum = db.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM finance_transactions WHERE type = 'expense' AND date >= ?",
                (last_week,)
            ).scalar() or 0
            
            # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –º–µ—Å—è—Ü
            top_income_categories = db.execute("""
                SELECT category, SUM(amount) as total
                FROM finance_transactions 
                WHERE type = 'income' AND date >= ?
                GROUP BY category 
                ORDER BY total DESC 
                LIMIT 3
            """, (last_month,)).fetchall()
            
            top_expense_categories = db.execute("""
                SELECT category, SUM(amount) as total
                FROM finance_transactions 
                WHERE type = 'expense' AND date >= ?
                GROUP BY category 
                ORDER BY total DESC 
                LIMIT 3
            """, (last_month,)).fetchall()
        
        text = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}\n"
        text += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {total_income} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        text += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {total_expenses} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
        
        # –ó–∞ –º–µ—Å—è—Ü
        month_balance = month_income_sum - month_expense_sum
        text += f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n"
        text += f"üìà –î–æ—Ö–æ–¥—ã: +{month_income_sum:,.0f} ‚ÇΩ\n"
        text += f"üìâ –†–∞—Å—Ö–æ–¥—ã: -{month_expense_sum:,.0f} ‚ÇΩ\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {month_balance:+,.0f} ‚ÇΩ\n\n"
        
        # –ó–∞ –Ω–µ–¥–µ–ª—é
        week_balance = week_income_sum - week_expense_sum
        text += f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n"
        text += f"üìà –î–æ—Ö–æ–¥—ã: +{week_income_sum:,.0f} ‚ÇΩ\n"
        text += f"üìâ –†–∞—Å—Ö–æ–¥—ã: -{week_expense_sum:,.0f} ‚ÇΩ\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {week_balance:+,.0f} ‚ÇΩ\n\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        if top_income_categories:
            text += f"üèÜ <b>–¢–æ–ø –¥–æ—Ö–æ–¥—ã (–º–µ—Å—è—Ü):</b>\n"
            for i, (category, amount) in enumerate(top_income_categories, 1):
                text += f"{i}. {category}: +{amount:,.0f} ‚ÇΩ\n"
            text += "\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if top_expense_categories:
            text += f"üí∏ <b>–¢–æ–ø —Ä–∞—Å—Ö–æ–¥—ã (–º–µ—Å—è—Ü):</b>\n"
            for i, (category, amount) in enumerate(top_expense_categories, 1):
                text += f"{i}. {category}: -{amount:,.0f} ‚ÇΩ\n"
            text += "\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        if month_income_sum > 0 and month_expense_sum > 0:
            text += f"üìä <b>–ü—Ä–æ–≥–Ω–æ–∑:</b>\n"
            avg_daily_income = month_income_sum / 30
            avg_daily_expense = month_expense_sum / 30
            monthly_forecast = (avg_daily_income - avg_daily_expense) * 30
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥/–¥–µ–Ω—å: +{avg_daily_income:,.0f} ‚ÇΩ\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥/–¥–µ–Ω—å: -{avg_daily_expense:,.0f} ‚ÇΩ\n"
            text += f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {monthly_forecast:+,.0f} ‚ÇΩ\n"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üìà –î–æ—Ö–æ–¥—ã", callback_data="view_income"),
                InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥—ã", callback_data="view_expenses")
            ],
            [
                InlineKeyboardButton("üíº –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="my_transactions"),
                InlineKeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="money_categories")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_money"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )


    async def _show_transaction_type_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ocr_result: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ OCR"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OCR –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        amount = ocr_result.get('amount', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        date = ocr_result.get('date', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        confidence = ocr_result.get('confidence', 0)
        
        text = f"""
üìÑ <b>–ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üîç <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ
üìÖ –î–∞—Ç–∞: {date}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {confidence}%

‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>
        """
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìà –î–æ—Ö–æ–¥", callback_data="transaction_type_income")],
            [InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥", callback_data="transaction_type_expense")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_money")]
        ]
        keyboard_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=keyboard_markup, parse_mode='HTML')
    
    async def handle_transaction_type_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        user_id = update.effective_user.id
        callback_data = update.callback_query.data
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_type = callback_data.split("_")[-1]  # income –∏–ª–∏ expense
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id)
        if not user_state or user_state.get("state") != "choosing_transaction_type":
            await update.callback_query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state["transaction_type"] = transaction_type
        user_state["state"] = "choosing_category"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await self._show_category_selection(update, context, transaction_type)
    
    async def _show_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, transaction_type: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        
        with get_db_context() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            categories = db.query(FinanceCategory).filter(
                FinanceCategory.type == transaction_type,
                FinanceCategory.is_active == True
            ).all()
            
            type_emoji = "üìà" if transaction_type == "income" else "üìâ"
            type_name = "–¥–æ—Ö–æ–¥–æ–≤" if transaction_type == "income" else "—Ä–∞—Å—Ö–æ–¥–æ–≤"
            
            text = f"""
{type_emoji} <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {type_name}:</b>
            """
            
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = []
            for category in categories:
                callback_data = f"category_{category.id}"
                keyboard.append([InlineKeyboardButton(
                    f"{category.icon or 'üìÇ'} {category.name}", 
                    callback_data=callback_data
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø—É", callback_data="back_to_transaction_type")])
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_money")])
            
            keyboard_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text, 
                reply_markup=keyboard_markup, 
                parse_mode='HTML'
            )
    
    async def handle_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_id = update.effective_user.id
        callback_data = update.callback_query.data
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        await update.callback_query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = int(callback_data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id)
        if not user_state or user_state.get("state") != "choosing_category":
            await update.callback_query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await self._create_transaction(
            update, 
            context, 
            user_state["receipt_file_id"],
            user_state["receipt_filename"], 
            user_state["ocr_result"],
            user_state["transaction_type"],
            category_id
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states.pop(user_id, None)
    
    async def _create_transaction(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                receipt_file_id: int, receipt_filename: str, ocr_result: dict, 
                                transaction_type: str, category_id: int):
        """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
        
        with get_db_context() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = db.query(FinanceCategory).filter(FinanceCategory.id == category_id).first()
            if not category:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ–∫–∞
            receipt_file = db.query(ReceiptFile).filter(ReceiptFile.id == receipt_file_id).first()
            if not receipt_file:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OCR
            amount = float(ocr_result.get('amount', 0))
            transaction_date = datetime.now()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ OCR
            if ocr_result.get('date'):
                try:
                    transaction_date = datetime.fromisoformat(ocr_result['date'])
                except:
                    pass
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = FinanceTransaction(
                amount=amount,
                type=transaction_type,
                description=f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ —á–µ–∫–∞ {receipt_filename}",
                date=transaction_date,
                category_id=category_id,
                receipt_url=receipt_file.file_path,
                notes=f"OCR –¥–∞–Ω–Ω—ã–µ: {json.dumps(ocr_result, ensure_ascii=False)}",
                created_by_id=receipt_file.uploaded_by_id
            )
            
            db.add(transaction)
            db.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            type_emoji = "üìà" if transaction_type == "income" else "üìâ"
            type_name = "–î–æ—Ö–æ–¥" if transaction_type == "income" else "–†–∞—Å—Ö–æ–¥"
            
            text = f"""
‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>

{type_emoji} <b>–¢–∏–ø:</b> {type_name}
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ
üìÖ <b>–î–∞—Ç–∞:</b> {transaction_date.strftime('%d.%m.%Y')}
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.name}
üìÑ <b>–ß–µ–∫:</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω

–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
            """
            
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [InlineKeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á–µ–∫", callback_data="upload_receipt")],
                [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏", callback_data="admin_money")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            keyboard_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text, 
                reply_markup=keyboard_markup, 
                parse_mode='HTML'
            )


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
money_handler = MoneyManagementHandler()