from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
import requests
import json

from ..keyboards.main import get_portfolio_categories_keyboard, get_pagination_keyboard
from ...database.database import get_db_context
from ...database.models import Portfolio
from ...config.logging import get_logger, log_user_action
from ...utils.decorators import standard_handler
from ...config.settings import settings

logger = get_logger(__name__)

class PortfolioHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self):
        self.items_per_page = 3
        self.base_url = f"http://localhost:{settings.ADMIN_PORT}"
    
    @standard_handler
    async def show_portfolio_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "show_portfolio_categories")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/categories", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    categories = data.get("categories", [])
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    categories = await self._get_categories_from_db()
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                categories = await self._get_categories_from_db()
            
            if not categories:
                text = """
üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
                """
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            else:
                text = """
üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–æ–≤</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

<b>–ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ üìã –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
‚Ä¢ üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞  
‚Ä¢ üõ† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ ‚è± –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ üöÄ –î–µ–º–æ-–≤–µ—Ä—Å–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
‚Ä¢ üëç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É

<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>
                """
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                keyboard_buttons = []
                for category in categories:
                    category_id = category.get("id", "")
                    category_name = category.get("name", category_id)
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            category_name,
                            callback_data=f"portfolio_category_{category_id}"
                        )
                    ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"
                keyboard_buttons.insert(0, [
                    InlineKeyboardButton("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã", callback_data="portfolio_featured")
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard_buttons.append([
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                ])
                
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio_categories: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
    
    async def _get_categories_from_db(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                categories = db.query(Portfolio.category).filter(
                    Portfolio.is_visible == True
                ).distinct().all()
                
                category_names = {
                    "telegram_bots": "ü§ñ Telegram –±–æ—Ç—ã",
                    "web_development": "üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
                    "mobile_apps": "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "ai_integration": "üß† AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                    "automation": "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                    "ecommerce": "üõí E-commerce",
                    "other": "üîß –î—Ä—É–≥–æ–µ"
                }
                
                return [
                    {"id": cat[0], "name": category_names.get(cat[0], cat[0])}
                    for cat in categories
                ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î: {e}")
            return []
    
    @standard_handler
    async def show_featured_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, "show_featured_portfolio")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/featured", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    items = data.get("items", [])
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    items = await self._get_featured_from_db()
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                items = await self._get_featured_from_db()
            
            if not items:
                text = """
‚≠ê <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã</b>

–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ä–∞–±–æ—Ç.
–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã.
                """
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")
                ]])
            else:
                text = f"""
‚≠ê <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã</b>

–ù–∞—à–∏ –ª—É—á—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É:

<i>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(items)}</i>
                """
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–µ–∫—Ç–∞
                for i, item in enumerate(items[:3]):
                    text += await self._format_portfolio_item(item, i + 1)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard_buttons = []
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                for i, item in enumerate(items[:3]):
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            f"üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ {i + 1}",
                            callback_data=f"portfolio_item_{item['id']}"
                        )
                    ])
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                keyboard_buttons.append([
                    InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")
                ])
                
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_featured_portfolio: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ä–∞–±–æ—Ç")
    
    async def _get_featured_from_db(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                items = db.query(Portfolio).filter(
                    Portfolio.is_featured == True,
                    Portfolio.is_visible == True
                ).order_by(
                    Portfolio.sort_order.asc(),
                    Portfolio.views_count.desc()
                ).limit(3).all()
                
                return [item.to_bot_dict() for item in items]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∏–∑ –ë–î: {e}")
            return []
    
    @standard_handler
    async def show_category_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            user_id = update.effective_user.id
            callback_data = update.callback_query.data
            category = callback_data.split("_")[-1]
            page = context.user_data.get(f"portfolio_page_{category}", 1)
            
            log_user_action(user_id, "show_category_portfolio", {"category": category, "page": page})
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(
                    f"{self.base_url}/admin/api/portfolio/public/category/{category}",
                    params={"page": page, "limit": self.items_per_page},
                    timeout=5
                )
                if response.status_code == 200:
                    data = response.json()
                    items = data.get("items", [])
                    total = data.get("total", 0)
                    pages = data.get("pages", 1)
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    items, total, pages = await self._get_category_from_db(category, page)
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                items, total, pages = await self._get_category_from_db(category, page)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_names = {
                "telegram_bots": "ü§ñ Telegram –±–æ—Ç—ã",
                "web_development": "üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
                "mobile_apps": "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "ai_integration": "üß† AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                "automation": "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "ecommerce": "üõí E-commerce",
                "other": "üîß –î—Ä—É–≥–æ–µ"
            }
            category_name = category_names.get(category, category)
            
            if not items:
                text = f"""
{category_name}

–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.
–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
                """
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")
                ]])
            else:
                text = f"""
{category_name}

<i>–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {total} ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {pages}</i>

                """
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
                for i, item in enumerate(items):
                    text += await self._format_portfolio_item(item, i + 1)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard_buttons = []
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                for i, item in enumerate(items):
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            f"üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ {i + 1}",
                            callback_data=f"portfolio_item_{item['id']}"
                        )
                    ])
                
                # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                if pages > 1:
                    pagination_buttons = []
                    if page > 1:
                        pagination_buttons.append(
                            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"portfolio_page_{category}_{page-1}")
                        )
                    if page < pages:
                        pagination_buttons.append(
                            InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥", callback_data=f"portfolio_page_{category}_{page+1}")
                        )
                    if pagination_buttons:
                        keyboard_buttons.append(pagination_buttons)
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                keyboard_buttons.append([
                    InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="portfolio")
                ])
                
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_category_portfolio: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    async def _get_category_from_db(self, category: str, page: int):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                query = db.query(Portfolio).filter(
                    Portfolio.category == category,
                    Portfolio.is_visible == True
                ).order_by(
                    Portfolio.is_featured.desc(),
                    Portfolio.sort_order.asc(),
                    Portfolio.created_at.desc()
                )
                
                total = query.count()
                offset = (page - 1) * self.items_per_page
                items = query.offset(offset).limit(self.items_per_page).all()
                pages = (total + self.items_per_page - 1) // self.items_per_page
                
                return [item.to_bot_dict() for item in items], total, pages
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î: {e}")
            return [], 0, 1
    
    @standard_handler
    async def handle_portfolio_pagination(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            callback_data = update.callback_query.data
            parts = callback_data.split("_")
            category = parts[2]
            page = int(parts[3])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            context.user_data[f"portfolio_page_{category}"] = page
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            context.user_data['temp_callback'] = f"portfolio_category_{category}"
            await self.show_category_portfolio(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_portfolio_pagination: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    
    @standard_handler
    async def show_portfolio_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        try:
            user_id = update.effective_user.id
            callback_data = update.callback_query.data
            item_id = int(callback_data.split("_")[-1])
            
            log_user_action(user_id, "show_portfolio_item", {"item_id": item_id})
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(f"{self.base_url}/admin/api/portfolio/public/{item_id}", timeout=5)
                if response.status_code == 200:
                    item = response.json()
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                    item = await self._get_item_from_db(item_id)
            except:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
                item = await self._get_item_from_db(item_id)
            
            if not item:
                text = "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")
                ]])
            else:
                text = await self._format_portfolio_item_detail(item)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        f"üëç –ù—Ä–∞–≤–∏—Ç—Å—è ({item.get('likes_count', 0)})",
                        callback_data=f"portfolio_like_{item_id}"
                    )
                ])
                
                # –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                if item.get('demo_link'):
                    keyboard_buttons.append([
                        InlineKeyboardButton("üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–º–æ", url=item['demo_link'])
                    ])
                
                # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π
                keyboard_buttons.append([
                    InlineKeyboardButton("üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π", callback_data="create_project")
                ])
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                keyboard_buttons.append([
                    InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")
                ])
                
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if item and item.get('main_image'):
                try:
                    image_url = f"{self.base_url}/{item['main_image']}"
                    await update.callback_query.edit_message_media(
                        media=InputMediaPhoto(
                            media=image_url,
                            caption=text,
                            parse_mode='HTML'
                        ),
                        reply_markup=keyboard
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await update.callback_query.edit_message_text(
                        text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
            else:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_portfolio_item: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    
    async def _get_item_from_db(self, item_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                item = db.query(Portfolio).filter(
                    Portfolio.id == item_id,
                    Portfolio.is_visible == True
                ).first()
                
                if item:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                    item.increment_views()
                    db.commit()
                    return item.to_bot_dict()
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î: {e}")
            return None
    
    @standard_handler
    async def handle_portfolio_like(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            user_id = update.effective_user.id
            callback_data = update.callback_query.data
            item_id = int(callback_data.split("_")[-1])
            
            log_user_action(user_id, "portfolio_like", {"item_id": item_id})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫
            user_likes = context.user_data.get('portfolio_likes', [])
            if item_id in user_likes:
                await update.callback_query.answer("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É!", show_alert=True)
                return
            
            # –°—Ç–∞–≤–∏–º –ª–∞–π–∫ —á–µ—Ä–µ–∑ API
            try:
                response = requests.post(f"{self.base_url}/admin/api/portfolio/{item_id}/like", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    likes_count = data.get('likes_count', 0)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_likes.append(item_id)
                    context.user_data['portfolio_likes'] = user_likes
                    
                    await update.callback_query.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üëç ({likes_count})")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    await self._update_like_button(update, item_id, likes_count)
                else:
                    await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞")
            except:
                # Fallback: —Å—Ç–∞–≤–∏–º –ª–∞–π–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
                await self._like_item_in_db(item_id, user_likes, context, update)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_portfolio_like: {e}")
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞")
    
    async def _like_item_in_db(self, item_id: int, user_likes: list, context, update):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with get_db_context() as db:
                item = db.query(Portfolio).filter(Portfolio.id == item_id).first()
                if item:
                    item.increment_likes()
                    db.commit()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_likes.append(item_id)
                    context.user_data['portfolio_likes'] = user_likes
                    
                    await update.callback_query.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üëç ({item.likes_count})")
                    await self._update_like_button(update, item_id, item.likes_count)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ –≤ –ë–î: {e}")
    
    async def _update_like_button(self, update, item_id: int, likes_count: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            current_keyboard = update.callback_query.message.reply_markup
            if not current_keyboard:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞
            new_buttons = []
            for row in current_keyboard.inline_keyboard:
                new_row = []
                for button in row:
                    if button.callback_data and f"portfolio_like_{item_id}" in button.callback_data:
                        new_row.append(InlineKeyboardButton(
                            f"üëç –ù—Ä–∞–≤–∏—Ç—Å—è ({likes_count})",
                            callback_data=button.callback_data
                        ))
                    else:
                        new_row.append(button)
                new_buttons.append(new_row)
            
            new_keyboard = InlineKeyboardMarkup(new_buttons)
            
            await update.callback_query.edit_message_reply_markup(reply_markup=new_keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞: {e}")
    
    async def _format_portfolio_item(self, item: dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        try:
            text = f"""
<b>{index}. {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>"""
            
            if item.get('subtitle'):
                text += f"\n<i>{item['subtitle']}</i>"
            
            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            description = item.get('description', '')
            if len(description) > 100:
                description = description[:100] + "..."
            text += f"\n{description}"
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            technologies = item.get('technologies', [])
            if technologies:
                tech_str = ", ".join(technologies[:3])  # –ü–µ—Ä–≤—ã–µ 3 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                if len(technologies) > 3:
                    tech_str += f" –∏ –µ—â–µ {len(technologies) - 3}"
                text += f"\nüõ† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> {tech_str}"
            
            # –°–ª–æ–∂–Ω–æ—Å—Ç—å
            complexity = item.get('complexity', '')
            complexity_names = {
                'simple': 'üü¢ –ü—Ä–æ—Å—Ç–æ–π',
                'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π', 
                'complex': 'üî¥ –°–ª–æ–∂–Ω—ã–π',
                'premium': 'üü£ –ü—Ä–µ–º–∏—É–º'
            }
            if complexity in complexity_names:
                text += f"\nüìä <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {complexity_names[complexity]}"
            
            # –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            dev_time = item.get('development_time')
            if dev_time:
                if dev_time == 1:
                    text += f"\n‚è± <b>–°—Ä–æ–∫:</b> {dev_time} –¥–µ–Ω—å"
                elif dev_time < 5:
                    text += f"\n‚è± <b>–°—Ä–æ–∫:</b> {dev_time} –¥–Ω—è"
                else:
                    text += f"\n‚è± <b>–°—Ä–æ–∫:</b> {dev_time} –¥–Ω–µ–π"
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è)
            cost_display = item.get('cost_display')
            if cost_display:
                text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost_display} —Ä—É–±."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            views = item.get('views_count', 0)
            likes = item.get('likes_count', 0)
            text += f"\nüëÄ {views} ‚Ä¢ üëç {likes}"
            
            if item.get('is_featured'):
                text += " ‚≠ê"
            
            text += "\n"
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}")
            return f"\n<b>{index}. –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</b>\n"
    
    async def _format_portfolio_item_detail(self, item: dict) -> str:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            text = f"<b>{item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            
            if item.get('subtitle'):
                text += f"<i>{item['subtitle']}</i>\n"
            
            text += "\n"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = item.get('description', '')
            text += f"{description}\n\n"
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            technologies = item.get('technologies', [])
            if technologies:
                text += f"üõ† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> {', '.join(technologies)}\n"
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            text += "<b>üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n"
            
            # –°–ª–æ–∂–Ω–æ—Å—Ç—å
            complexity = item.get('complexity', '')
            complexity_level = item.get('complexity_level', 0)
            complexity_names = {
                'simple': 'üü¢ –ü—Ä–æ—Å—Ç–æ–π',
                'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π', 
                'complex': 'üî¥ –°–ª–æ–∂–Ω—ã–π',
                'premium': 'üü£ –ü—Ä–µ–º–∏—É–º'
            }
            if complexity in complexity_names:
                text += f"‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_names[complexity]}"
                if complexity_level:
                    text += f" ({complexity_level}/10)"
                text += "\n"
            
            # –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            dev_time = item.get('development_time')
            if dev_time:
                if dev_time == 1:
                    text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {dev_time} –¥–µ–Ω—å\n"
                elif dev_time < 5:
                    text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {dev_time} –¥–Ω—è\n"
                else:
                    text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {dev_time} –¥–Ω–µ–π\n"
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è)
            cost_display = item.get('cost_display')
            if cost_display:
                text += f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost_display} —Ä—É–±.\n"
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
            status = item.get('project_status', 'completed')
            status_names = {
                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
                'in_progress': 'üîÑ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                'demo': 'üöÄ –î–µ–º–æ-–≤–µ—Ä—Å–∏—è'
            }
            if status in status_names:
                text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_names[status]}\n"
            
            # –ö–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            client_name = item.get('client_name')
            if client_name:
                text += f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            
            text += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            views = item.get('views_count', 0)
            likes = item.get('likes_count', 0)
            text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> üëÄ {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚Ä¢ üëç {likes} –ª–∞–π–∫–æ–≤"
            
            if item.get('is_featured'):
                text += " ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º"
            
            # –¢–µ–≥–∏
            tags = item.get('tags', [])
            if tags:
                text += f"\n\nüè∑ <b>–¢–µ–≥–∏:</b> {', '.join(tags)}"
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"
    
    async def _send_error_message(self, update, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")
            ]])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    f"‚ùå {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    f"‚ùå {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
portfolio_handler = PortfolioHandler()
