"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞
"""
import logging
import asyncio
import sys
from pathlib import Path

from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
    PicklePersistence,
)

from app.config.settings import get_settings
from app.bot.handlers.start import StartHandler
from app.bot.handlers.admin import AdminHandler, admin_command
from app.bot.handlers.consultant import ConsultantHandler
from app.bot.handlers.projects import ProjectsHandler
from app.bot.handlers.revisions import RevisionsHandler
from app.bot.handlers.tz_creation import TZCreationHandler
from app.bot.handlers.common import CommonHandler
from app.bot.handlers.portfolio import PortfolioHandler
from app.bot.handlers.bot_creation import BotCreationHandler
from app.bot.handlers.money_management import money_handler
from app.database.database import init_db

logger = logging.getLogger(__name__)


async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


def setup_handlers(app: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    start_handler = StartHandler()
    admin_handler = AdminHandler()
    consultant_handler = ConsultantHandler()
    projects_handler = ProjectsHandler()
    revisions_handler = RevisionsHandler()
    tz_handler = TZCreationHandler()
    common_handler = CommonHandler()
    portfolio_handler = PortfolioHandler()
    bot_creation_handler = BotCreationHandler()
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_handler.start))
    app.add_handler(CommandHandler("help", start_handler.help))
    app.add_handler(CommandHandler("my_id", start_handler.my_id))
    app.add_handler(CommandHandler("admin", admin_command))
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º conversation handlers...")
    # Conversation handlers
    if hasattr(tz_handler, 'conversation_handler'):
        app.add_handler(tz_handler.conversation_handler)
    
    if hasattr(portfolio_handler, 'conversation_handler'):
        app.add_handler(portfolio_handler.conversation_handler)
    
    # Bot creation conversation handler - –û–¢–ö–õ–Æ–ß–ï–ù, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    # bot_token_conversation = ConversationHandler(
    #     entry_points=[
    #         CallbackQueryHandler(
    #             bot_creation_handler.start_bot_token_entry,
    #             pattern="^bot_enter_token$"
    #         )
    #     ],
    #     states={
    #         1: [  # ENTER_BOT_TOKEN
    #             MessageHandler(filters.TEXT & ~filters.COMMAND, bot_creation_handler.save_bot_token)
    #         ]
    #     },
    #     fallbacks=[
    #         MessageHandler(filters.COMMAND, bot_creation_handler.cancel_bot_token_entry)
    #     ]
    # )
    # app.add_handler(bot_token_conversation)
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º callback query handlers...")
    # Callback query handlers
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.show_portfolio_categories, 
        pattern="^portfolio$"
    ))
    
    app.add_handler(CallbackQueryHandler(
        common_handler.handle_callback, 
        pattern="^(main_menu|back|consultant|projects|about|calculator|faq|consultation|contacts|my_projects|create_tz|create_bot_guide|settings|setup_timeweb|setup_bot_token|send_bot_token|get_telegram_id|get_chat_id|send_chat_id|detailed_chat_instructions|timeweb_registered|admin_console|admin_money|upload_receipt|transaction_.*|my_transactions|view_income|view_expenses|money_analytics|money_categories)$"
    ))
    
    # Revision handlers
    app.add_handler(CallbackQueryHandler(
        revisions_handler.show_project_revisions,
        pattern="^project_revisions_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.list_project_revisions,
        pattern="^list_revisions_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.start_create_revision,
        pattern="^create_revision_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.show_revision_details,
        pattern="^revision_details_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.handle_revision_priority,
        pattern="^priority_(low|normal|high|urgent)_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.confirm_create_revision,
        pattern="^confirm_revision_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.skip_revision_files,
        pattern="^skip_files_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        revisions_handler.files_done,
        pattern="^files_done_"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫ –ø—Ä–∞–≤–æ–∫
    app.add_handler(CallbackQueryHandler(
        common_handler.handle_callback,
        pattern="^(skip_files_|files_done_|priority_|confirm_revision_|revision_details_|list_revisions_|create_revision_)"
    ))
    
    # Projects handlers
    app.add_handler(CallbackQueryHandler(
        projects_handler.show_project_details,
        pattern="^project_details_"
    ))
    
    # Portfolio handlers
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.show_project_details,
        pattern="^project_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.show_category_portfolio,
        pattern="^portfolio_category_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.show_portfolio_page,
        pattern="^page_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.show_project_gallery,
        pattern="^gallery_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.like_project,
        pattern="^like_"
    ))
    
    app.add_handler(CallbackQueryHandler(
        portfolio_handler.navigate_project,
        pattern="^portfolio_nav_"
    ))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è timeweb
    app.add_handler(CallbackQueryHandler(
        common_handler.handle_timeweb_registered,
        pattern="^timeweb_registered"
    ))
    
    app.add_handler(CallbackQueryHandler(
        common_handler.handle_timeweb_info,
        pattern="^timeweb_info$"
    ))
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º bot creation handlers...")
    # Bot creation handlers
    app.add_handler(CallbackQueryHandler(
        bot_creation_handler.show_bot_creation_guide,
        pattern="^create_bot_guide$"
    ))
    
    app.add_handler(CallbackQueryHandler(
        bot_creation_handler.show_bot_creation_steps,
        pattern="^bot_guide_steps$"
    ))
    
    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º message handlers...")
    # Message handlers - –§–û–¢–û –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ù–ê–ß–ê–õ–ê
    app.add_handler(MessageHandler(
        filters.PHOTO,
        common_handler.handle_photo
    ))
    
    # Message handlers - –í–ò–î–ï–û –û–ë–†–ê–ë–û–¢–ß–ò–ö
    app.add_handler(MessageHandler(
        filters.VIDEO,
        common_handler.handle_video
    ))
    
    # Message handlers - –î–û–ö–£–ú–ï–ù–¢–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö  
    app.add_handler(MessageHandler(
        filters.ATTACHMENT,
        common_handler.handle_document
    ))
    
    # Message handlers - –¢–ï–ö–°–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö (–∏—Å–∫–ª—é—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.PHOTO & ~filters.VIDEO,
        common_handler.handle_text_input
    ))
    
    # Message handlers - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–ü–û–°–õ–ï–î–ù–ò–ô)
    app.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND & ~filters.PHOTO & ~filters.VIDEO & ~filters.ATTACHMENT,
        common_handler.handle_any_message
    ))
    
    # –£–±–∏—Ä–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    
    # Error handler
    app.add_error_handler(error_handler)
    
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = get_settings()
        
        if not settings.BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–µ–º persistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        persistence_file = Path("data/bot_persistence.pkl")
        persistence_file.parent.mkdir(exist_ok=True)
        
        persistence = PicklePersistence(filepath=str(persistence_file))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder() \
            .token(settings.BOT_TOKEN) \
            .persistence(persistence) \
            .build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º notification_service —Å –±–æ—Ç–æ–º
        from app.services.notification_service import notification_service
        notification_service.set_bot(app.bot)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(app)
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await app.run_polling(
            drop_pending_updates=True,
            allowed_updates=['message', 'callback_query', 'inline_query']
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
