from fastapi import APIRouter, Depends, Header, HTTPException, Form, File, UploadFile
from sqlalchemy.orm import Session
from typing import Optional, List
import hmac
import hashlib
import urllib.parse
from datetime import datetime, timedelta
import os
import uuid
import shutil

from ..database.database import get_db, get_or_create_user, create_project
from ..database.models import User, Project, ProjectRevision, RevisionMessage, RevisionMessageFile, RevisionFile
from ..config.settings import get_settings

router = APIRouter(prefix="/api/miniapp", tags=["miniapp"])
settings = get_settings()


def verify_telegram_web_app_data(init_data: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
    """
    try:
        # –ü–∞—Ä—Å–∏–º init_data
        parsed_data = dict(urllib.parse.parse_qsl(init_data))

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à
        received_hash = parsed_data.pop('hash', None)
        if not received_hash:
            raise HTTPException(status_code=401, detail="No hash provided")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ–∑–¥–∞–µ–º data-check-string
        data_check_arr = [f"{k}={v}" for k, v in sorted(parsed_data.items())]
        data_check_string = '\n'.join(data_check_arr)

        # –°–æ–∑–¥–∞–µ–º secret_key
        secret_key = hmac.new(
            "WebAppData".encode(),
            settings.BOT_TOKEN.encode(),
            hashlib.sha256
        ).digest()

        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
        if calculated_hash != received_hash:
            raise HTTPException(status_code=401, detail="Invalid hash")

        return parsed_data

    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Verification failed: {str(e)}")


async def get_current_user(
    x_telegram_init_data: Optional[str] = Header(None),
    db: Session = Depends(get_db)
) -> User:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram init data
    """
    if not x_telegram_init_data:
        raise HTTPException(status_code=401, detail="No Telegram data provided")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    parsed_data = verify_telegram_web_app_data(x_telegram_init_data)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    import json
    user_data = json.loads(parsed_data.get('user', '{}'))

    if not user_data:
        raise HTTPException(status_code=401, detail="No user data")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_or_create_user(
        db=db,
        telegram_id=user_data['id'],
        username=user_data.get('username'),
        first_name=user_data.get('first_name'),
        last_name=user_data.get('last_name')
    )

    return user


# === –ü–†–û–ï–ö–¢–´ ===

@router.get("/projects")
async def get_user_projects(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç Mini App: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id={current_user.id}, telegram_id={current_user.telegram_id}, username={current_user.username}")

    projects = db.query(Project).filter(
        Project.user_id == current_user.id
    ).order_by(Project.created_at.desc()).all()

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
    if projects:
        for p in projects[:3]:
            print(f"  - ID: {p.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {p.title}")

    return [project.to_dict() for project in projects]


@router.get("/projects/{project_id}")
async def get_project(
    project_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    project = db.query(Project).filter(
        Project.id == project_id,
        Project.user_id == current_user.id
    ).first()

    if not project:
        raise HTTPException(status_code=404, detail="Project not found")

    return project.to_dict()


@router.get("/projects/stats")
async def get_projects_stats(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
    projects = db.query(Project).filter(
        Project.user_id == current_user.id
    ).all()

    stats = {
        'total': len(projects),
        'in_progress': sum(1 for p in projects if p.status in ['in_progress', 'testing']),
        'completed': sum(1 for p in projects if p.status == 'completed'),
        'total_cost': sum(p.final_cost or p.estimated_cost or 0 for p in projects)
    }

    return stats


@router.get("/revisions/stats")
async def get_all_revisions_stats(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_projects = db.query(Project).filter(
        Project.user_id == current_user.id
    ).all()

    project_ids = [p.id for p in user_projects]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    revisions = db.query(ProjectRevision).filter(
        ProjectRevision.project_id.in_(project_ids)
    ).all() if project_ids else []

    # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∫–∏ (–Ω–µ completed –∏ –Ω–µ rejected)
    open_revisions = sum(1 for r in revisions if r.status not in ['completed', 'rejected', 'approved'])

    stats = {
        'total': len(revisions),
        'open': open_revisions,
        'pending': sum(1 for r in revisions if r.status == 'pending'),
        'in_progress': sum(1 for r in revisions if r.status == 'in_progress'),
        'completed': sum(1 for r in revisions if r.status in ['completed', 'approved']),
        'needs_rework': sum(1 for r in revisions if r.status == 'needs_rework'),
    }

    return stats


@router.post("/projects/quick")
async def create_quick_project(
    data: dict,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—é–¥–∂–µ—Ç–∞
    budget = data.get('budget', '')
    estimated_cost = 0.0
    if "–î–æ 50" in budget:
        estimated_cost = 50000.0
    elif "50-100" in budget or "50 000 - 100 000" in budget:
        estimated_cost = 75000.0
    elif "100-200" in budget or "100 000 - 200 000" in budget:
        estimated_cost = 150000.0
    elif "200-500" in budget or "200 000 - 500 000" in budget:
        estimated_cost = 350000.0
    elif "–ë–æ–ª–µ–µ 500" in budget:
        estimated_cost = 500000.0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ deadline
    deadline_str = data.get('deadline', '')
    days_to_add = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–µ—Å—è—Ü

    if "–±—ã—Å—Ç—Ä–µ–µ" in deadline_str.lower():
        days_to_add = 7
    elif "–º–µ—Å—è—Ü–∞" in deadline_str.lower():
        days_to_add = 30
    elif "1-3" in deadline_str:
        days_to_add = 60
    elif "3-6" in deadline_str:
        days_to_add = 120
    elif "6" in deadline_str:
        days_to_add = 180

    planned_end_date = datetime.utcnow() + timedelta(days=days_to_add)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    project_data = {
        'title': data['title'],
        'description': data['description'],
        'project_type': data['project_type'],
        'status': 'new',
        'estimated_cost': estimated_cost,
        'complexity': 'medium',
        'planned_end_date': planned_end_date,
        'structured_tz': {
            'quick_request': True,
            'budget': budget,
            'deadline': deadline_str,
        }
    }

    project = create_project(db, current_user.id, project_data)
    db.commit()

    return project.to_dict()


# === –ü–†–ê–í–ö–ò ===

@router.get("/projects/{project_id}/revisions")
async def get_project_revisions(
    project_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    project = db.query(Project).filter(
        Project.id == project_id,
        Project.user_id == current_user.id
    ).first()

    if not project:
        raise HTTPException(status_code=404, detail="Project not found")

    revisions = db.query(ProjectRevision).filter(
        ProjectRevision.project_id == project_id
    ).order_by(ProjectRevision.created_at.desc()).all()

    return {
        'revisions': [
            {
                'id': r.id,
                'project_id': r.project_id,
                'revision_number': r.revision_number,
                'title': r.title,
                'description': r.description,
                'status': r.status,
                'priority': r.priority,
                'progress': r.progress if r.progress is not None else 0,
                'time_spent_seconds': r.time_spent_seconds if r.time_spent_seconds is not None else 0,
                'estimated_time': r.estimated_time,
                'actual_time': r.actual_time,
                'created_by_id': r.created_by_id,
                'assigned_to_id': r.assigned_to_id,
                'assigned_to_username': r.assigned_to.username if r.assigned_to else None,
                'project_title': project.title,
                'created_at': r.created_at.isoformat() if r.created_at else None,
                'updated_at': r.updated_at.isoformat() if r.updated_at else None,
                'completed_at': r.completed_at.isoformat() if r.completed_at else None,
            }
            for r in revisions
        ]
    }


@router.get("/revisions/{revision_id}")
async def get_revision(
    revision_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏"""
    revision = db.query(ProjectRevision).filter(
        ProjectRevision.id == revision_id,
        ProjectRevision.created_by_id == current_user.id
    ).first()

    if not revision:
        raise HTTPException(status_code=404, detail="Revision not found")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
    project = db.query(Project).filter(Project.id == revision.project_id).first()

    return {
        'revision': {
            'id': revision.id,
            'project_id': revision.project_id,
            'project_title': project.title if project else None,
            'revision_number': revision.revision_number,
            'title': revision.title,
            'description': revision.description,
            'status': revision.status,
            'priority': revision.priority,
            'progress': revision.progress if revision.progress is not None else 0,
            'time_spent_seconds': revision.time_spent_seconds if revision.time_spent_seconds is not None else 0,
            'estimated_time': revision.estimated_time,
            'actual_time': revision.actual_time,
            'created_by_id': revision.created_by_id,
            'assigned_to_id': revision.assigned_to_id,
            'assigned_to_username': revision.assigned_to.username if revision.assigned_to else None,
            'created_at': revision.created_at.isoformat() if revision.created_at else None,
            'updated_at': revision.updated_at.isoformat() if revision.updated_at else None,
            'completed_at': revision.completed_at.isoformat() if revision.completed_at else None,
        }
    }


@router.post("/revisions")
async def create_revision(
    project_id: int = Form(...),
    title: str = Form(...),
    description: str = Form(...),
    priority: str = Form('normal'),
    files: List[UploadFile] = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∞–≤–∫—É —Å —Ñ–∞–π–ª–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    project = db.query(Project).filter(
        Project.id == project_id,
        Project.user_id == current_user.id
    ).first()

    if not project:
        raise HTTPException(status_code=404, detail="Project not found")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∞–≤–∫–∏
    max_revision_number = db.query(ProjectRevision.revision_number).filter(
        ProjectRevision.project_id == project_id
    ).order_by(ProjectRevision.revision_number.desc()).first()

    next_revision_number = (max_revision_number[0] if max_revision_number else 0) + 1

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∫—É
    revision = ProjectRevision(
        project_id=project_id,
        revision_number=next_revision_number,
        title=title,
        description=description,
        priority=priority,
        status='pending',
        created_by_id=current_user.id
    )

    db.add(revision)
    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∞–≤–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    saved_files = []
    if files:
        upload_dir = f"uploads/revisions/{revision.id}"
        os.makedirs(upload_dir, exist_ok=True)

        for file in files:
            if file.filename:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
                file_ext = os.path.splitext(file.filename)[1]
                unique_name = f"{uuid.uuid4()}{file_ext}"
                file_path = os.path.join(upload_dir, unique_name)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, "wb") as buffer:
                    shutil.copyfileobj(file.file, buffer)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_type = 'image' if file.content_type and file.content_type.startswith('image/') else \
                           'video' if file.content_type and file.content_type.startswith('video/') else 'document'

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                revision_file = RevisionFile(
                    revision_id=revision.id,
                    filename=unique_name,
                    original_filename=file.filename,
                    file_type=file_type,
                    file_size=os.path.getsize(file_path),
                    file_path=file_path,
                    uploaded_by_type='client',
                    uploaded_by_user_id=current_user.id
                )
                db.add(revision_file)
                saved_files.append(revision_file)

    db.commit()
    db.refresh(revision)

    return {
        'id': revision.id,
        'project_id': revision.project_id,
        'revision_number': revision.revision_number,
        'title': revision.title,
        'description': revision.description,
        'status': revision.status,
        'priority': revision.priority,
        'created_at': revision.created_at.isoformat() if revision.created_at else None,
        'files': [
            {
                'id': f.id,
                'filename': f.filename,
                'original_filename': f.original_filename,
                'file_type': f.file_type,
                'file_size': f.file_size,
                'file_url': f'/{f.file_path}',
            }
            for f in saved_files
        ]
    }


@router.get("/projects/{project_id}/revisions/stats")
async def get_revision_stats(
    project_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    project = db.query(Project).filter(
        Project.id == project_id,
        Project.user_id == current_user.id
    ).first()

    if not project:
        raise HTTPException(status_code=404, detail="Project not found")

    revisions = db.query(ProjectRevision).filter(
        ProjectRevision.project_id == project_id
    ).all()

    stats = {
        'total': len(revisions),
        'pending': sum(1 for r in revisions if r.status == 'pending'),
        'in_progress': sum(1 for r in revisions if r.status == 'in_progress'),
        'completed': sum(1 for r in revisions if r.status == 'completed'),
        'rejected': sum(1 for r in revisions if r.status == 'rejected'),
    }

    return {'stats': stats}


@router.get("/revisions/{revision_id}/messages")
async def get_revision_messages(
    revision_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∏ (—á–∞—Ç)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∞–≤–∫–µ
    revision = db.query(ProjectRevision).filter(
        ProjectRevision.id == revision_id,
        ProjectRevision.created_by_id == current_user.id
    ).first()

    if not revision:
        raise HTTPException(status_code=404, detail="Revision not found")

    messages = db.query(RevisionMessage).filter(
        RevisionMessage.revision_id == revision_id
    ).order_by(RevisionMessage.created_at.asc()).all()

    return {
        'messages': [
            {
                'id': m.id,
                'revision_id': m.revision_id,
                'sender_type': m.sender_type,
                'sender_user_id': m.sender_user_id,
                'message': m.message,
                'is_internal': m.is_internal,
                'created_at': m.created_at.isoformat() if m.created_at else None,
                'files': [
                    {
                        'id': f.id,
                        'filename': f.filename,
                        'original_filename': f.original_filename,
                        'file_type': f.file_type,
                        'file_size': f.file_size,
                        'file_path': f.file_path,
                        'file_url': f'/{f.file_path}',
                    }
                    for f in m.files
                ] if hasattr(m, 'files') and m.files else []
            }
            for m in messages
        ]
    }


@router.post("/revisions/{revision_id}/messages")
async def send_revision_message(
    revision_id: int,
    message: str = Form(...),
    files: List[UploadFile] = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–∞–≤–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∞–≤–∫–µ
    revision = db.query(ProjectRevision).filter(
        ProjectRevision.id == revision_id,
        ProjectRevision.created_by_id == current_user.id
    ).first()

    if not revision:
        raise HTTPException(status_code=404, detail="Revision not found")

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message = RevisionMessage(
        revision_id=revision_id,
        sender_type='client',
        sender_user_id=current_user.id,
        message=message,
        is_internal=False
    )

    db.add(new_message)
    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    saved_files = []
    if files:
        upload_dir = f"uploads/revisions/messages"
        os.makedirs(upload_dir, exist_ok=True)

        for file in files:
            if file.filename:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
                file_ext = os.path.splitext(file.filename)[1]
                unique_name = f"{uuid.uuid4()}{file_ext}"
                file_path = os.path.join(upload_dir, unique_name)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, "wb") as buffer:
                    shutil.copyfileobj(file.file, buffer)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_type = 'image' if file.content_type and file.content_type.startswith('image/') else \
                           'video' if file.content_type and file.content_type.startswith('video/') else 'other'

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                message_file = RevisionMessageFile(
                    message_id=new_message.id,
                    filename=unique_name,
                    original_filename=file.filename,
                    file_type=file_type,
                    file_size=os.path.getsize(file_path),
                    file_path=file_path
                )
                db.add(message_file)
                saved_files.append(message_file)

    db.commit()
    db.refresh(new_message)

    return {
        'message': {
            'id': new_message.id,
            'revision_id': new_message.revision_id,
            'sender_type': new_message.sender_type,
            'sender_user_id': new_message.sender_user_id,
            'message': new_message.message,
            'is_internal': new_message.is_internal,
            'created_at': new_message.created_at.isoformat() if new_message.created_at else None,
            'files': [
                {
                    'id': f.id,
                    'filename': f.filename,
                    'original_filename': f.original_filename,
                    'file_type': f.file_type,
                    'file_size': f.file_size,
                    'file_path': f.file_path,
                    'file_url': f'/{f.file_path}',
                }
                for f in saved_files
            ]
        }
    }


@router.patch("/revisions/{revision_id}/progress")
async def update_revision_progress(
    revision_id: int,
    data: dict,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)"""
    revision = db.query(ProjectRevision).filter(
        ProjectRevision.id == revision_id
    ).first()

    if not revision:
        raise HTTPException(status_code=404, detail="Revision not found")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if hasattr(revision, 'progress'):
        revision.progress = data['progress']

    db.commit()
    db.refresh(revision)

    return {
        'revision': {
            'id': revision.id,
            'progress': getattr(revision, 'progress', 0),
        }
    }


@router.patch("/revisions/{revision_id}/status")
async def update_revision_status(
    revision_id: int,
    data: dict,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)"""
    revision = db.query(ProjectRevision).filter(
        ProjectRevision.id == revision_id
    ).first()

    if not revision:
        raise HTTPException(status_code=404, detail="Revision not found")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    revision.status = data['status']

    if data['status'] == 'completed':
        revision.completed_at = datetime.utcnow()

    db.commit()
    db.refresh(revision)

    return {
        'revision': {
            'id': revision.id,
            'status': revision.status,
            'completed_at': revision.completed_at.isoformat() if revision.completed_at else None,
        }
    }
