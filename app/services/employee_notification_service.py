"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import asyncio
from datetime import datetime, timedelta, time
from typing import List, Dict, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func
import pytz

from ..database.database import get_db_context
from ..database.models import AdminUser, Project
from ..database.crm_models import Lead, Deal, Client
from ..database.notification_models import (
    EmployeeNotificationSettings, 
    NotificationQueue, 
    NotificationLog
)
from ..services.notification_service import notification_service
from ..config.logging import get_logger
from ..config.settings import settings

logger = get_logger(__name__)

class EmployeeNotificationService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.timezone = pytz.timezone('Europe/Moscow')  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        
    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
    
    def get_employee_settings(self, db: Session, admin_user_id: int) -> Optional[EmployeeNotificationSettings]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        return db.query(EmployeeNotificationSettings).filter(
            EmployeeNotificationSettings.admin_user_id == admin_user_id
        ).first()
    
    def create_employee_settings(self, db: Session, admin_user_id: int, 
                                telegram_user_id: str, **kwargs) -> EmployeeNotificationSettings:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        existing = self.get_employee_settings(db, admin_user_id)
        if existing:
            return self.update_employee_settings(db, admin_user_id, 
                                               telegram_user_id=telegram_user_id, **kwargs)
        
        settings = EmployeeNotificationSettings(
            admin_user_id=admin_user_id,
            telegram_user_id=str(telegram_user_id),
            **kwargs
        )
        
        db.add(settings)
        db.commit()
        db.refresh(settings)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_user_id} (TG: {telegram_user_id})")
        return settings
    
    def update_employee_settings(self, db: Session, admin_user_id: int, **kwargs) -> EmployeeNotificationSettings:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        settings = self.get_employee_settings(db, admin_user_id)
        if not settings:
            raise ValueError(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        for key, value in kwargs.items():
            if hasattr(settings, key):
                setattr(settings, key, value)
        
        settings.updated_at = datetime.utcnow()
        db.commit()
        
        return settings
    
    def get_all_employee_settings(self, db: Session) -> List[EmployeeNotificationSettings]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        return db.query(EmployeeNotificationSettings).filter(
            EmployeeNotificationSettings.notifications_enabled == True
        ).all()
    
    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ===
    
    def is_work_time(self, settings: EmployeeNotificationSettings, 
                     priority: str = 'normal') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # –°—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if priority in ['urgent', 'high'] and settings.urgent_notifications_always:
            return True
        
        now = datetime.now(self.timezone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
        if now.weekday() >= 5 and not settings.weekend_notifications:  # 5=—Å—É–±–±–æ—Ç–∞, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
        try:
            work_start = datetime.strptime(settings.work_hours_start, '%H:%M').time()
            work_end = datetime.strptime(settings.work_hours_end, '%H:%M').time()
            current_time = now.time()
            
            return work_start <= current_time <= work_end
        except:
            return True  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    
    # === –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
    
    async def create_notification(self, db: Session, telegram_user_id: str,
                                notification_type: str, title: str, message: str,
                                priority: str = 'normal', entity_type: str = None,
                                entity_id: str = None, action_url: str = None,
                                metadata: Dict = None, group_key: str = None,
                                admin_user_id: int = None, delay_minutes: int = 0):
        """–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        scheduled_at = datetime.utcnow()
        if delay_minutes > 0:
            scheduled_at += timedelta(minutes=delay_minutes)
        
        notification = NotificationQueue(
            telegram_user_id=str(telegram_user_id),
            admin_user_id=admin_user_id,
            notification_type=notification_type,
            priority=priority,
            title=title,
            message=message,
            action_url=action_url,
            entity_type=entity_type,
            entity_id=str(entity_id) if entity_id else None,
            metadata=metadata or {},
            group_key=group_key,
            scheduled_at=scheduled_at
        )
        
        db.add(notification)
        db.commit()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_type} –¥–ª—è {telegram_user_id}")
        return notification
    
    # === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–ø—Ä–æ–µ–∫—Ç—ã) ===
    
    async def notify_project_assigned(self, db: Session, project_id: int, executor_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        settings = self.get_employee_settings(db, executor_id)
        if not settings or not settings.project_assigned:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project = db.query(Project).filter(Project.id == project_id).first()
        if not project:
            return
        
        title = "üéØ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω"
        message = f"""
üìã **{project.title}**

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {project.estimated_cost:,}‚ÇΩ
‚è± –í—Ä–µ–º—è: {project.estimated_hours} —á–∞—Å–æ–≤
üìÖ –î–µ–¥–ª–∞–π–Ω: {project.deadline.strftime('%d.%m.%Y') if project.deadline else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üîß **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {project.complexity}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
{project.description[:200]}{'...' if len(project.description) > 200 else ''}

üëÜ –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        """
        
        action_url = f"http://147.45.215.199:8001/admin/projects/{project_id}"
        
        await self.create_notification(
            db=db,
            telegram_user_id=settings.telegram_user_id,
            admin_user_id=executor_id,
            notification_type='project_assigned',
            title=title,
            message=message.strip(),
            priority='high',
            entity_type='project',
            entity_id=str(project_id),
            action_url=action_url,
            metadata={
                'project_title': project.title,
                'project_cost': project.estimated_cost,
                'project_hours': project.estimated_hours
            }
        )
    
    async def notify_project_status_changed(self, db: Session, project_id: int, old_status: str, new_status: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        project = db.query(Project).filter(Project.id == project_id).first()
        if not project or not project.assigned_executor_id:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        settings = self.get_employee_settings(db, project.assigned_executor_id)
        if not settings or not settings.project_status_changed:
            return
        
        status_names = {
            'new': 'üÜï –ù–æ–≤—ã–π',
            'review': 'üëÄ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç',
            'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
            'testing': 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
        }
        
        title = "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω"
        message = f"""
üìã **{project.title}**

üîÑ **–°—Ç–∞—Ç—É—Å:** {status_names.get(old_status, old_status)} ‚Üí {status_names.get(new_status, new_status)}

{self._get_status_action_message(new_status)}
        """
        
        priority = 'high' if new_status in ['accepted', 'in_progress'] else 'normal'
        
        await self.create_notification(
            db=db,
            telegram_user_id=settings.telegram_user_id,
            admin_user_id=project.assigned_executor_id,
            notification_type='project_status_changed',
            title=title,
            message=message.strip(),
            priority=priority,
            entity_type='project',
            entity_id=str(project_id),
            action_url=f"http://147.45.215.199:8001/admin/projects/{project_id}",
            metadata={
                'project_title': project.title,
                'old_status': old_status,
                'new_status': new_status
            }
        )
    
    def _get_status_action_message(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        messages = {
            'accepted': 'üöÄ –ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω—è—Ç! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É.',
            'in_progress': '‚ö° –ü—Ä–æ–µ–∫—Ç –≤ —Ä–∞–±–æ—Ç–µ. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å.',
            'testing': 'üß™ –ü—Ä–æ–µ–∫—Ç –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏.',
            'completed': 'üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
            'cancelled': 'üòî –ü—Ä–æ–µ–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.',
        }
        return messages.get(status, '')
    
    # === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤ (Avito) ===
    
    async def notify_avito_new_message(self, db: Session, chat_id: str, client_name: str, 
                                     message_text: str, is_urgent: bool = False):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å Avito"""
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Avito
        salespeople = db.query(EmployeeNotificationSettings).join(AdminUser).filter(
            and_(
                AdminUser.role == 'salesperson',
                EmployeeNotificationSettings.notifications_enabled == True,
                EmployeeNotificationSettings.avito_new_message == True
            )
        ).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        owner_settings = db.query(EmployeeNotificationSettings).join(AdminUser).filter(
            AdminUser.role == 'owner'
        ).first()
        
        if owner_settings:
            salespeople.append(owner_settings)
        
        if not salespeople:
            logger.warning("–ù–µ—Ç –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Avito")
            return
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        preview_text = message_text[:100] + "..." if len(message_text) > 100 else message_text
        
        title = "üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Avito"
        if is_urgent:
            title = "üö® –°–†–û–ß–ù–û! –°–æ–æ–±—â–µ–Ω–∏–µ Avito"
        
        message = f"""
üë§ **–ö–ª–∏–µ–Ω—Ç:** {client_name}
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** {preview_text}

üì± **–ß–∞—Ç:** `{chat_id}`
üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üëÜ –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        """
        
        priority = 'urgent' if is_urgent else 'high'
        action_url = f"http://147.45.215.199:8001/admin/avito"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º
        for settings in salespeople:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if is_urgent and not settings.avito_urgent_message:
                continue
            
            await self.create_notification(
                db=db,
                telegram_user_id=settings.telegram_user_id,
                admin_user_id=settings.admin_user_id,
                notification_type='avito_new_message',
                title=title,
                message=message.strip(),
                priority=priority,
                entity_type='avito_chat',
                entity_id=chat_id,
                action_url=action_url,
                group_key=f"avito_chat_{chat_id}",
                metadata={
                    'chat_id': chat_id,
                    'client_name': client_name,
                    'message_preview': preview_text,
                    'is_urgent': is_urgent
                }
            )
    
    async def notify_avito_unread_reminder(self, db: Session, chat_id: str, client_name: str, 
                                         unread_count: int, last_message_time: datetime):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Avito"""
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        salespeople = db.query(EmployeeNotificationSettings).join(AdminUser).filter(
            and_(
                AdminUser.role.in_(['owner', 'salesperson']),
                EmployeeNotificationSettings.notifications_enabled == True,
                EmployeeNotificationSettings.avito_unread_reminder == True
            )
        ).all()
        
        if not salespeople:
            return
        
        # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        time_diff = datetime.utcnow() - last_message_time
        hours_passed = int(time_diff.total_seconds() // 3600)
        
        title = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ Avito"
        message = f"""
üë§ **–ö–ª–∏–µ–Ω—Ç:** {client_name}
üì¨ **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:** {unread_count}
‚è± **–ù–µ –æ—Ç–≤–µ—á–∞–µ–º:** {hours_passed} —á–∞—Å(–æ–≤)

üî• **–í–ê–ñ–ù–û:** –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞!

üëÜ –°—Ä–æ—á–Ω–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if hours_passed >= 2:
            priority = 'urgent'
            title = "üö® –ö–†–ò–¢–ò–ß–ù–û: " + title
        elif hours_passed >= 1:
            priority = 'high'
        else:
            priority = 'normal'
        
        action_url = f"http://147.45.215.199:8001/admin/avito"
        
        for settings in salespeople:
            await self.create_notification(
                db=db,
                telegram_user_id=settings.telegram_user_id,
                admin_user_id=settings.admin_user_id,
                notification_type='avito_unread_reminder',
                title=title,
                message=message.strip(),
                priority=priority,
                entity_type='avito_chat',
                entity_id=chat_id,
                action_url=action_url,
                group_key=f"avito_reminder_{chat_id}",
                metadata={
                    'chat_id': chat_id,
                    'client_name': client_name,
                    'unread_count': unread_count,
                    'hours_passed': hours_passed
                }
            )
    
    # === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
    
    async def process_notification_queue(self, db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        now = datetime.utcnow()
        notifications = db.query(NotificationQueue).filter(
            and_(
                NotificationQueue.status == 'pending',
                NotificationQueue.scheduled_at <= now,
                NotificationQueue.retry_count < NotificationQueue.max_retries
            )
        ).order_by(
            NotificationQueue.priority.desc(),
            NotificationQueue.scheduled_at
        ).limit(50).all()
        
        for notification in notifications:
            try:
                await self._send_notification(db, notification)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}: {str(e)}")
                await self._handle_failed_notification(db, notification, str(e))
    
    async def _send_notification(self, db: Session, notification: NotificationQueue):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        settings = db.query(EmployeeNotificationSettings).filter(
            EmployeeNotificationSettings.telegram_user_id == notification.telegram_user_id
        ).first()
        
        if settings and not self.is_work_time(settings, notification.priority):
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π —á–∞—Å
            next_work_time = self._get_next_work_time(settings)
            notification.scheduled_at = next_work_time
            db.commit()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = f"**{notification.title}**\n\n{notification.message}"
        
        if notification.action_url:
            full_message += f"\n\n[üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ]({notification.action_url})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ notification_service
        success = await notification_service.send_user_notification(
            int(notification.telegram_user_id),
            full_message,
            parse_mode='Markdown'
        )
        
        if success:
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            notification.status = 'sent'
            notification.sent_at = datetime.utcnow()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            log_entry = NotificationLog(
                telegram_user_id=notification.telegram_user_id,
                admin_user_id=notification.admin_user_id,
                notification_type=notification.notification_type,
                title=notification.title,
                message=notification.message,
                status='sent',
                entity_type=notification.entity_type,
                entity_id=notification.entity_id
            )
            db.add(log_entry)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
            if notification.group_key:
                db.query(NotificationQueue).filter(
                    and_(
                        NotificationQueue.group_key == notification.group_key,
                        NotificationQueue.id != notification.id,
                        NotificationQueue.status == 'pending'
                    )
                ).update({'status': 'cancelled'})
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification.telegram_user_id}")
            
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram")
        
        db.commit()
    
    async def _handle_failed_notification(self, db: Session, notification: NotificationQueue, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É"""
        
        notification.retry_count += 1
        
        if notification.retry_count >= notification.max_retries:
            notification.status = 'failed'
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            log_entry = NotificationLog(
                telegram_user_id=notification.telegram_user_id,
                admin_user_id=notification.admin_user_id,
                notification_type=notification.notification_type,
                title=notification.title,
                message=notification.message,
                status='failed',
                error_message=error,
                entity_type=notification.entity_type,
                entity_id=notification.entity_id
            )
            db.add(log_entry)
            
        else:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            notification.scheduled_at = datetime.utcnow() + timedelta(minutes=5)
        
        db.commit()
    
    def _get_next_work_time(self, settings: EmployeeNotificationSettings) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
        now = datetime.now(self.timezone)
        
        try:
            work_start = datetime.strptime(settings.work_hours_start, '%H:%M').time()
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–µ –ø—Ä–æ—à–ª–æ
            if now.weekday() < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
                today_start = datetime.combine(now.date(), work_start)
                if now < today_start:
                    return today_start.replace(tzinfo=None)
            
            # –ò–Ω–∞—á–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            days_ahead = 1
            if now.weekday() >= 4:  # –ü—è—Ç–Ω–∏—Ü–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ
                days_ahead = 7 - now.weekday()  # –î–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            
            next_work_day = now + timedelta(days=days_ahead)
            return datetime.combine(next_work_day.date(), work_start).replace(tzinfo=None)
            
        except:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —á–∞—Å
            return datetime.utcnow() + timedelta(hours=1)
    
    async def notify_project_deadline_reminder(
        self,
        db: Session,
        project_id: int,
        executor_id: int,
        project_title: str,
        deadline: datetime,
        is_overdue: bool = False
    ):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –¥–µ–¥–ª–∞–π–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        settings = self.get_employee_settings(db, executor_id)
        if not settings or not settings.notifications_enabled:
            return
        
        if is_overdue and not settings.project_overdue:
            return
        elif not is_overdue and not settings.project_deadline_reminder:
            return
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã - –≤—Å–µ–≥–¥–∞ —Å—Ä–æ—á–Ω—ã–µ
        is_urgent = is_overdue or settings.urgent_notifications_always
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ —Å—Ä–æ—á–Ω—ã—Ö)
        if not is_urgent and not self.is_work_time(settings):
            return
        
        if is_overdue:
            title = f"üî¥ –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!"
            time_info = f"–î–µ–¥–ª–∞–π–Ω –±—ã–ª: {deadline.strftime('%d.%m.%Y %H:%M')}"
            priority = 'high'
        else:
            title = f"‚è∞ –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞"
            time_info = f"–î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}"
            priority = 'normal'
        
        message = f"""**{project_title}**

{time_info}

üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç: http://147.45.215.199:8001/admin/projects/"""
        
        await self.create_notification(
            db=db,
            telegram_user_id=settings.telegram_user_id,
            admin_user_id=executor_id,
            notification_type='project_deadline_reminder' if not is_overdue else 'project_overdue',
            title=title,
            message=message,
            entity_type='project',
            entity_id=str(project_id),
            priority=priority,
            action_url=f"http://147.45.215.199:8001/admin/projects/{project_id}"
        )
    
    async def notify_avito_unread_reminder(
        self,
        db: Session,
        chat_id: str,
        sender_name: str,
        message_text: str,
        time_ago: str,
        chat_url: str
    ):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Avito"""
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ Avito
        salespeople = db.query(AdminUser).filter(
            AdminUser.role.in_(['salesperson', 'sales'])
        ).all()
        
        for salesperson in salespeople:
            settings = self.get_employee_settings(db, salesperson.id)
            if not settings or not settings.notifications_enabled or not settings.avito_unread_reminder:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if not self.is_work_time(settings) and not settings.urgent_notifications_always:
                continue
            
            title = f"‚è∞ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Avito"
            message = f"""–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç **{sender_name}**

üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** {message_text}  
üïí **–ü–æ–ª—É—á–µ–Ω–æ:** {time_ago}

‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"""
            
            await self.create_notification(
                db=db,
                telegram_user_id=settings.telegram_user_id,
                admin_user_id=salesperson.id,
                notification_type='avito_unread_reminder',
                title=title,
                message=message,
                entity_type='avito_chat',
                entity_id=chat_id,
                priority='high',  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                group_key=f"avito_reminder_{chat_id}",  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç—É
                action_url=chat_url
            )


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
employee_notification_service = EmployeeNotificationService()