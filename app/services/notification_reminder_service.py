"""
–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json

from ..services.avito_service import get_avito_service
from ..services.employee_notification_service import employee_notification_service
from ..database.database import get_db_context
from ..database.models import Project, AdminUser
from ..database.notification_models import EmployeeNotificationSettings
from ..config.settings import settings

logger = logging.getLogger(__name__)

class NotificationReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    
    def __init__(self):
        self.reminder_active = False
        self.last_avito_check: Dict[str, datetime] = {}  # chat_id -> last_check_time
        self.unread_messages: Dict[str, Dict] = {}  # chat_id -> message_data
        
    async def start_reminder_service(self, check_interval: int = 300):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.reminder_active = True
        logger.info(f"üîî –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {check_interval} —Å–µ–∫—É–Ω–¥")
        
        while self.reminder_active:
            try:
                await self.check_avito_unread_reminders()
                await self.check_project_deadlines()
                await asyncio.sleep(check_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_reminder_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.reminder_active = False
        logger.info("üîï –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_avito_unread_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Avito –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            avito_service = get_avito_service()
            if not avito_service:
                logger.debug("Avito service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats = await avito_service.get_chats()
            if not chats:
                logger.debug("–ß–∞—Ç—ã Avito –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(chats)} —á–∞—Ç–æ–≤ –Ω–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            for chat in chats:
                await self.check_chat_for_unread_reminders(chat)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Avito: {e}")
    
    async def check_chat_for_unread_reminders(self, chat):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = str(chat.id)
        current_user_id = 216012096  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            avito_service = get_avito_service()
            messages = await avito_service.get_chat_messages_no_cache(chat_id)
            
            if not messages:
                return
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ –æ—Ç –Ω–∞—Å)
            last_client_message = None
            our_response = None
            
            for message in reversed(messages):  # –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
                if message.author_id != current_user_id and not last_client_message:
                    last_client_message = message
                elif message.author_id == current_user_id and not our_response:
                    our_response = message
                    break
            
            if not last_client_message:
                return  # –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            should_remind = False
            
            if not our_response:
                # –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤–æ–æ–±—â–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                message_time = last_client_message.created_at
                if isinstance(message_time, str):
                    message_time = datetime.fromisoformat(message_time.replace('Z', '+00:00'))
                
                time_since_message = datetime.utcnow() - message_time.replace(tzinfo=None)
                should_remind = time_since_message.total_seconds() > 1800  # 30 –º–∏–Ω—É—Ç
                
            elif our_response.created_at < last_client_message.created_at:
                # –ù–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —Ä–∞–Ω—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                message_time = last_client_message.created_at
                if isinstance(message_time, str):
                    message_time = datetime.fromisoformat(message_time.replace('Z', '+00:00'))
                
                time_since_message = datetime.utcnow() - message_time.replace(tzinfo=None)
                should_remind = time_since_message.total_seconds() > 1800  # 30 –º–∏–Ω—É—Ç
            
            if should_remind:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
                last_reminder = self.last_avito_check.get(chat_id)
                if last_reminder:
                    time_since_reminder = datetime.utcnow() - last_reminder
                    if time_since_reminder.total_seconds() < 1800:  # –ù–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
                        return
                
                await self.send_avito_unread_reminder(chat, last_client_message)
                self.last_avito_check[chat_id] = datetime.utcnow()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ {chat_id} –Ω–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_avito_unread_reminder(self, chat, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Avito"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            current_user_id = 216012096
            
            for user in chat.users:
                if user['id'] != current_user_id:
                    user_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    break
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
            message_text = message.content.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
            if len(message_text) > 100:
                message_text = message_text[:100] + "..."
            
            # –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message_time = message.created_at
            if isinstance(message_time, str):
                message_time = datetime.fromisoformat(message_time.replace('Z', '+00:00'))
            
            time_ago = datetime.utcnow() - message_time.replace(tzinfo=None)
            if time_ago.total_seconds() < 3600:
                time_str = f"{int(time_ago.total_seconds() / 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
            else:
                time_str = f"{int(time_ago.total_seconds() / 3600)} —á –Ω–∞–∑–∞–¥"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º
            with get_db_context() as db:
                await employee_notification_service.notify_avito_unread_reminder(
                    db=db,
                    chat_id=str(chat.id),
                    sender_name=user_name,
                    message_text=message_text,
                    time_ago=time_str,
                    chat_url="http://147.45.215.199:8001/admin/avito/"
                )
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
    
    async def check_project_deadlines(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            with get_db_context() as db:
                now = datetime.utcnow()
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç—ã —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ (–≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
                upcoming_deadline = now + timedelta(hours=24)
                projects_due_soon = db.query(Project).filter(
                    Project.deadline.isnot(None),
                    Project.deadline <= upcoming_deadline,
                    Project.deadline > now,
                    Project.status.notin_(['completed', 'cancelled', 'on_hold']),
                    Project.assigned_executor_id.isnot(None)
                ).all()
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                overdue_projects = db.query(Project).filter(
                    Project.deadline.isnot(None),
                    Project.deadline < now,
                    Project.status.notin_(['completed', 'cancelled', 'on_hold']),
                    Project.assigned_executor_id.isnot(None)
                ).all()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö
                for project in projects_due_soon:
                    await employee_notification_service.notify_project_deadline_reminder(
                        db=db,
                        project_id=project.id,
                        executor_id=project.assigned_executor_id,
                        project_title=project.title,
                        deadline=project.deadline,
                        is_overdue=False
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
                for project in overdue_projects:
                    await employee_notification_service.notify_project_deadline_reminder(
                        db=db,
                        project_id=project.id,
                        executor_id=project.assigned_executor_id,
                        project_title=project.title,
                        deadline=project.deadline,
                        is_overdue=True
                    )
                
                if projects_due_soon or overdue_projects:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö: {len(projects_due_soon)} –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è, {len(overdue_projects)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_reminder_service = NotificationReminderService()