"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telegram
"""
import asyncio
from datetime import datetime, timedelta
from typing import Optional, List
from sqlalchemy.orm import Session
from ..config.logging import get_logger
from ..database.models import Task, AdminUser, TaskComment
from ..config.settings import settings
import requests
import json

logger = get_logger(__name__)

class TaskNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    
    def __init__(self):
        self.bot_token = settings.BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
    async def send_telegram_message(self, chat_id: int, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    async def notify_task_assigned(self, db: Session, task: Task) -> bool:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            if not task.assigned_to or not task.assigned_to.telegram_id:
                logger.warning(f"–£ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏ {task.id} –Ω–µ—Ç Telegram ID")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_task_assigned_message(task)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await self.send_telegram_message(
                chat_id=task.assigned_to.telegram_id,
                message=message
            )
            
            if success:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ {task.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.assigned_to.username}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ {task.id}: {e}")
            return False

    async def notify_task_deadline_reminder(self, db: Session, task: Task) -> bool:
        """–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ –∑–∞–¥–∞—á–∏"""
        try:
            if not task.assigned_to or not task.assigned_to.telegram_id:
                return False
                
            if task.status == "completed":
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è
            if not task.deadline:
                return False
                
            time_until_deadline = task.deadline - datetime.utcnow()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞, 4 —á–∞—Å–∞ –∏ 1 —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
            if time_until_deadline.total_seconds() <= 0:
                # –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
                message = self._format_task_overdue_message(task)
            elif time_until_deadline.days == 0 and time_until_deadline.seconds <= 3600:
                # –ú–µ–Ω–µ–µ —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                message = self._format_task_urgent_reminder_message(task, "1 —á–∞—Å")
            elif time_until_deadline.days == 0 and time_until_deadline.seconds <= 14400:
                # –ú–µ–Ω–µ–µ 4 —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                message = self._format_task_urgent_reminder_message(task, "4 —á–∞—Å–∞")
            elif time_until_deadline.days <= 1:
                # –ú–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                message = self._format_task_urgent_reminder_message(task, "24 —á–∞—Å–∞")
            else:
                return False  # –ù–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await self.send_telegram_message(
                chat_id=task.assigned_to.telegram_id,
                message=message
            )
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ {task.id}: {e}")
            return False

    async def notify_task_status_changed(self, db: Session, task: Task, old_status: str, comment: Optional[str] = None) -> bool:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ completed
            if task.status == "completed" and task.created_by and task.created_by.telegram_id:
                message = self._format_task_completed_message(task)
                
                success = await self.send_telegram_message(
                    chat_id=task.created_by.telegram_id,
                    message=message
                )
                
                if success:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é {task.created_by.username}")
                
                return success
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            return False

    async def notify_new_task_comment(self, db: Session, task: Task, comment: TaskComment, current_user: dict = None) -> bool:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ

        –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
        - –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è) -> —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (owner)
        - –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ -> —É–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å
            notify_users = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            is_admin_comment = current_user and current_user.get("role") == "owner"

            if is_admin_comment:
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ -> —É–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                if (task.assigned_to and
                    task.assigned_to.telegram_id and
                    task.assigned_to.id != comment.author_id):
                    notify_users.append(task.assigned_to)
                    logger.info(f"–ê–¥–º–∏–Ω –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ {task.id}, —É–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {task.assigned_to.username}")
            else:
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ -> —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∞–¥–º–∏–Ω)
                if (task.created_by and
                    task.created_by.telegram_id and
                    task.created_by.id != comment.author_id and
                    task.created_by.role == "owner"):
                    notify_users.append(task.created_by)
                    logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ {task.id}, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ {task.created_by.username}")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã
                # –ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–∏–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏

            if not notify_users:
                logger.warning(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ {task.id}")
                return True

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_task_comment_message(task, comment)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            success_count = 0
            for user in notify_users:
                success = await self.send_telegram_message(
                    chat_id=user.telegram_id,
                    message=message
                )
                if success:
                    success_count += 1

            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ {task.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count}/{len(notify_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            return success_count > 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ {task.id}: {e}")
            return False

    def _format_task_assigned_message(self, task: Task) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        priority_emoji = {
            "low": "üü¢",
            "normal": "üü°", 
            "high": "üü†",
            "urgent": "üî¥"
        }
        
        emoji = priority_emoji.get(task.priority, "üü°")
        
        message = f"""
{emoji} <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{task.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority.upper()}

üë§ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> {task.created_by.username if task.created_by else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""

        if task.deadline:
            deadline_str = task.deadline.strftime("%d.%m.%Y –≤ %H:%M")
            message += f"\n‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
            time_until = task.deadline - datetime.utcnow()
            if time_until.days > 0:
                message += f" ({time_until.days} –¥–Ω.)"
            elif time_until.seconds > 3600:
                hours = time_until.seconds // 3600
                message += f" ({hours} —á.)"
            else:
                message += " (–º–µ–Ω–µ–µ —á–∞—Å–∞!)"

        if task.estimated_hours:
            message += f"\n‚è± <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:</b> {task.estimated_hours} —á."

        message += f"\n\nüîó <b>ID –∑–∞–¥–∞—á–∏:</b> #{task.id}"
        message += "\n\nüì± –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"
        
        return message.strip()

    def _format_task_urgent_reminder_message(self, task: Task, time_left: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ"""
        message = f"""
‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –î–ï–î–õ–ê–ô–ù–ï!</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.title}

üö® <b>–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}

üìÖ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task.deadline.strftime("%d.%m.%Y –≤ %H:%M")}

üìå <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.upper()}

üîó <b>ID –∑–∞–¥–∞—á–∏:</b> #{task.id}

‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è!
"""
        return message.strip()

    def _format_task_overdue_message(self, task: Task) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        overdue_time = datetime.utcnow() - task.deadline
        
        if overdue_time.days > 0:
            overdue_str = f"{overdue_time.days} –¥–Ω."
        elif overdue_time.seconds > 3600:
            hours = overdue_time.seconds // 3600
            overdue_str = f"{hours} —á."
        else:
            overdue_str = "–º–µ–Ω–µ–µ —á–∞—Å–∞"
        
        message = f"""
üî¥ <b>–ó–ê–î–ê–ß–ê –ü–†–û–°–†–û–ß–ï–ù–ê!</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.title}

‚è∞ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞:</b> {overdue_str}

üìÖ <b>–î–µ–¥–ª–∞–π–Ω –±—ã–ª:</b> {task.deadline.strftime("%d.%m.%Y –≤ %H:%M")}

üìå <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.upper()}

üîó <b>ID –∑–∞–¥–∞—á–∏:</b> #{task.id}

‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!
"""
        return message.strip()

    def _format_task_completed_message(self, task: Task) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        message = f"""
‚úÖ <b>–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}

üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {task.assigned_to.username if task.assigned_to else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {task.completed_at.strftime("%d.%m.%Y –≤ %H:%M") if task.completed_at else '–°–µ–π—á–∞—Å'}

üîó <b>ID –∑–∞–¥–∞—á–∏:</b> #{task.id}
"""

        if task.deadline:
            if task.completed_at and task.completed_at <= task.deadline:
                message += "\nüéØ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Å—Ä–æ–∫!"
            else:
                message += "\n‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º"

        return message.strip()

    def _format_task_comment_message(self, task: Task, comment: TaskComment) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
        message = f"""
üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.title}

üë§ <b>–ê–≤—Ç–æ—Ä:</b> {comment.author.username if comment.author else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
{comment.comment}
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        if comment.attachments and len(comment.attachments) > 0:
            message += f"\n\nüìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {len(comment.attachments)}"
            for idx, attachment in enumerate(comment.attachments, 1):
                file_type_emoji = "üñº" if attachment.get("type") == "image" else "üìÑ"
                message += f"\n   {file_type_emoji} {attachment.get('original_filename', '–§–∞–π–ª ' + str(idx))}"

        message += f"\n\nüîó <b>ID –∑–∞–¥–∞—á–∏:</b> #{task.id}"
        message += "\n\nüì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"

        return message.strip()

    async def check_and_send_deadline_reminders(self, db: Session) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
            now = datetime.utcnow()
            
            # –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ 25 —á–∞—Å–æ–≤ (—Å –∑–∞–ø–∞—Å–æ–º)
            upcoming_deadline = now + timedelta(hours=25)
            
            tasks_with_deadlines = db.query(Task).filter(
                Task.status.in_(["pending", "in_progress"]),
                Task.deadline.isnot(None),
                Task.deadline <= upcoming_deadline,
                Task.assigned_to_id.isnot(None)
            ).all()
            
            sent_count = 0
            
            for task in tasks_with_deadlines:
                try:
                    success = await self.notify_task_deadline_reminder(db, task)
                    if success:
                        sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
                    continue
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö")
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∑–∞–¥–∞—á: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
task_notification_service = TaskNotificationService()