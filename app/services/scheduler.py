# app/services/scheduler.py
import asyncio
import schedule
import time
from datetime import datetime
from threading import Thread
from sqlalchemy.orm import Session

from ..database.database import SessionLocal
from ..config.logging import get_logger
from .project_automation import ProjectAutomationService

logger = get_logger(__name__)


class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self._setup_schedule()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = Thread(target=self._run_scheduler, daemon=True)
        self.thread.start()
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join(timeout=5)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 09:00
        schedule.every().day.at("09:00").do(self._run_daily_checks)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
        schedule.every(4).hours.do(self._check_overdue_projects)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 18:00
        schedule.every().day.at("18:00").do(self._check_financial_status)
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00
        schedule.every().monday.at("10:00").do(self._generate_weekly_report)
        
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
                time.sleep(60)
    
    def _run_daily_checks(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...")
        
        try:
            db = SessionLocal()
            automation = ProjectAutomationService(db)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(automation.run_daily_checks())
            loop.close()
            
            db.close()
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}")
    
    def _check_overdue_projects(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        
        try:
            db = SessionLocal()
            automation = ProjectAutomationService(db)
            
            overdue = automation.check_overdue_projects()
            if overdue:
                logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(overdue)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(overdue)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!"
                
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(automation.send_notification(message))
                loop.close()
            
            db.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}")
    
    def _check_financial_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
        
        try:
            db = SessionLocal()
            automation = ProjectAutomationService(db)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            unpaid_projects = automation.check_unpaid_projects()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
            unpaid_executors = automation.check_unpaid_executors()
            
            if unpaid_projects or unpaid_executors:
                message = "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç:</b>\n\n"
                
                if unpaid_projects:
                    total_debt = sum(p['remaining'] for p in unpaid_projects)
                    message += f"üìå –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(unpaid_projects)}\n"
                    message += f"   –û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {total_debt:,.0f} ‚ÇΩ\n\n"
                
                if unpaid_executors:
                    total_debt = sum(e['remaining'] for e in unpaid_executors)
                    message += f"üë∑ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏: {len(unpaid_executors)}\n"
                    message += f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_debt:,.0f} ‚ÇΩ\n"
                
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(automation.send_notification(message))
                loop.close()
            
            db.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    def _generate_weekly_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        try:
            db = SessionLocal()
            automation = ProjectAutomationService(db)
            
            summary = automation.get_automation_summary()
            
            message = "üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
            message += f"üìÅ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {summary.get('total_projects', 0)}\n"
            message += f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {summary.get('overdue_count', 0)}\n"
            message += f"üí∏ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {summary.get('unpaid_projects_count', 0)}\n"
            message += f"üë∑ –î–æ–ª–≥–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º: {summary.get('unpaid_executors_count', 0)}\n\n"
            message += f"üí∞ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary.get('total_unpaid_clients', 0):,.0f} ‚ÇΩ\n"
            message += f"üí∞ –ö –≤—ã–ø–ª–∞—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º: {summary.get('total_unpaid_executors', 0):,.0f} ‚ÇΩ\n"
            
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(automation.send_notification(message))
            loop.close()
            
            db.close()
            logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    
    def run_task_now(self, task_name: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        tasks = {
            'daily_checks': self._run_daily_checks,
            'overdue_projects': self._check_overdue_projects,
            'financial_status': self._check_financial_status,
            'weekly_report': self._generate_weekly_report
        }
        
        if task_name in tasks:
            logger.info(f"–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {task_name}")
            tasks[task_name]()
            return True
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_name}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = SchedulerService()