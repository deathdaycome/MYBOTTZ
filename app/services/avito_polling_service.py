"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Avito –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json

from ..services.avito_service import get_avito_service
from ..services.notification_service import NotificationService
from ..config.settings import settings

logger = logging.getLogger(__name__)

class AvitoPollingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è polling –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Avito"""
    
    def __init__(self):
        self.notification_service = NotificationService()
        self.last_check: Dict[str, datetime] = {}
        self.known_messages: Dict[str, set] = {}  # chat_id -> set of message IDs
        self.auto_response_enabled = False
        self.polling_active = False
        self._initialize_bot()
    
    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not settings.BOT_TOKEN:
                logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return
                
            if not settings.ADMIN_CHAT_ID:
                logger.error("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return
                
            from telegram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            self.notification_service.set_bot(bot)
            logger.info(f"Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ADMIN_CHAT_ID: {settings.ADMIN_CHAT_ID}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        
    async def start_polling(self, interval: int = 30):
        """–ó–∞–ø—É—Å–∫ polling —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (—Å–µ–∫—É–Ω–¥—ã)"""
        self.polling_active = True
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Avito polling —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
        
        while self.polling_active:
            try:
                await self.check_new_messages()
                await asyncio.sleep(interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        self.polling_active = False
        logger.info("Avito polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_new_messages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
        try:
            avito_service = get_avito_service()  # –£–±–∏—Ä–∞–µ–º await - —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            if not avito_service:
                logger.warning("Avito service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats = await avito_service.get_chats()
            if not chats:
                logger.info("–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(chats)} —á–∞—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            for chat in chats:
                await self.check_chat_for_new_messages(chat)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    async def check_chat_for_new_messages(self, chat):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
        chat_id = chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞—Ä—è
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è polling)
            avito_service = get_avito_service()  # –£–±–∏—Ä–∞–µ–º await
            messages = await avito_service.get_chat_messages_no_cache(chat_id)
            
            if not messages:
                return
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º set –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
            if chat_id not in self.known_messages:
                self.known_messages[chat_id] = set()
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for msg in messages:
                    self.known_messages[chat_id].add(msg.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
                return
            
            # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_messages = []
            for msg in messages:
                if msg.id not in self.known_messages[chat_id]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
                    new_messages.append(msg)
                    self.known_messages[chat_id].add(msg.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if new_messages:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
                for message in new_messages:
                    await self.process_new_message(chat, message)
            else:
                logger.debug(f"–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id} –Ω–µ—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ {chat_id}: {e}")
    
    async def process_new_message(self, chat, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
        current_user_id = 216012096  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ –æ—Ç –Ω–∞—Å)
        if message.author_id == current_user_id:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
            return
            
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç {message.author_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self.send_telegram_notification(chat, message)
        
        # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.auto_response_enabled:
            await self.send_auto_response(chat_id, message)
    
    async def send_telegram_notification(self, chat, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            current_user_id = 216012096
            
            for user in chat.users:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
                if user['id'] != current_user_id:
                    user_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    break
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
            message_text = message.content.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
            if len(message_text) > 100:
                message_text = message_text[:100] + "..."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_text = f"""
üîî <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Avito</b>

üë§ <b>–û—Ç:</b> {user_name}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_text}

üîó <a href="http://147.45.215.199:8001/admin/avito/">–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</a>
            """
            
            await self.notification_service.send_admin_notification(notification_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_auto_response(self, chat_id: str, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            message_text = message.content.get('text', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
            if not message_text:
                return
                
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint)
            from ..services.openai_service import OpenAIService
            
            ai_service = OpenAIService()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
            prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ Telegram –±–æ—Ç–æ–≤ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.

–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: "{message_text}"

–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 100 —Å–ª–æ–≤). –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –≥–æ—Ç–æ–≤—ã–º –ø–æ–º–æ—á—å.
–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è.
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ —É—Å–ª—É–≥–∞—Ö - –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Å—É–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.
"""
            
            ai_response = await ai_service.generate_response_with_model(
                prompt,
                model="openai/gpt-4o-mini"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Avito API
            avito_service = get_avito_service()  # –£–±–∏—Ä–∞–µ–º await
            if avito_service:
                success = await avito_service.send_message(chat_id, ai_response)
                if success:
                    logger.info(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {chat_id}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {e}")
    
    def set_auto_response(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        self.auto_response_enabled = enabled
        logger.info(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
polling_service = AvitoPollingService()