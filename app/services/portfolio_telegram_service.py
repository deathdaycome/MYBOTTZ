"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ Telegram –∫–∞–Ω–∞–ª
"""

import os
import asyncio
from datetime import datetime
from typing import Optional, List
import telegram
from telegram.constants import ParseMode
from sqlalchemy.orm import Session

from ..database.models import Portfolio
from ..config.settings import settings
from ..config.logging import get_logger

logger = get_logger(__name__)

class PortfolioTelegramService:
    def __init__(self):
        self.bot_token = settings.BOT_TOKEN
        self.portfolio_channel_id = settings.PORTFOLIO_CHANNEL_ID if hasattr(settings, 'PORTFOLIO_CHANNEL_ID') else None
        self.bot = None
        
        if self.bot_token:
            self.bot = telegram.Bot(token=self.bot_token)
    
    async def publish_portfolio_item(self, portfolio_item: Portfolio, db: Session) -> dict:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            portfolio_item: –û–±—ä–µ–∫—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            if not self.bot:
                return {"success": False, "error": "Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
            
            if not self.portfolio_channel_id:
                return {"success": False, "error": "ID –∫–∞–Ω–∞–ª–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = self._format_portfolio_message(portfolio_item)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            if portfolio_item.main_image and os.path.exists(f"uploads/portfolio/{portfolio_item.main_image}"):
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                with open(f"uploads/portfolio/{portfolio_item.main_image}", 'rb') as photo:
                    message = await self.bot.send_photo(
                        chat_id=self.portfolio_channel_id,
                        photo=photo,
                        caption=message_text,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                message = await self.bot.send_message(
                    chat_id=self.portfolio_channel_id,
                    text=message_text,
                    parse_mode=ParseMode.MARKDOWN_V2,
                    disable_web_page_preview=False
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if portfolio_item.image_paths and len(portfolio_item.image_paths) > 0:
                await self._send_additional_images(portfolio_item.image_paths, message.message_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            portfolio_item.is_published = True
            portfolio_item.telegram_message_id = message.message_id
            portfolio_item.published_at = datetime.utcnow()
            portfolio_item.telegram_channel_id = self.portfolio_channel_id
            db.commit()
            
            logger.info(f"Portfolio item {portfolio_item.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {self.portfolio_channel_id}")
            
            return {
                "success": True, 
                "message_id": message.message_id,
                "channel_id": self.portfolio_channel_id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ Telegram: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_additional_images(self, image_paths: List[str], reply_to_message_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            media_group = []
            for image_path in image_paths[:9]:  # Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
                if os.path.exists(f"uploads/portfolio/{image_path}"):
                    with open(f"uploads/portfolio/{image_path}", 'rb') as photo:
                        media_group.append(telegram.InputMediaPhoto(media=photo))
            
            if media_group:
                await self.bot.send_media_group(
                    chat_id=self.portfolio_channel_id,
                    media=media_group,
                    reply_to_message_id=reply_to_message_id
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def _format_portfolio_message(self, portfolio_item: Portfolio) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
        def escape_markdown(text: str) -> str:
            if not text:
                return ""
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2
            escape_chars = r'_*[]()~`>#+-=|{}.!'
            for char in escape_chars:
                text = text.replace(char, f'\\{char}')
            return text
        
        title = escape_markdown(portfolio_item.title)
        description = escape_markdown(portfolio_item.description[:300] + "..." if len(portfolio_item.description) > 300 else portfolio_item.description)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_parts = [
            f"üöÄ *{title}*",
            "",
            f"üìù {description}",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        if portfolio_item.technologies:
            technologies = escape_markdown(portfolio_item.technologies)
            text_parts.extend([
                f"‚öôÔ∏è *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:* {technologies}",
                ""
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if portfolio_item.client_name:
            client_name = escape_markdown(portfolio_item.client_name)
            text_parts.extend([
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* @{client_name}" if client_name.startswith('@') else f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {client_name}",
                ""
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if portfolio_item.development_time:
            text_parts.extend([
                f"‚è± *–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:* {portfolio_item.development_time} –¥–Ω–µ–π",
                ""
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        links = []
        if portfolio_item.demo_link:
            demo_link = escape_markdown(portfolio_item.demo_link)
            links.append(f"[üîó –î–µ–º–æ]({portfolio_item.demo_link})")
        
        if portfolio_item.repository_link:
            repo_link = escape_markdown(portfolio_item.repository_link)
            links.append(f"[üìÅ –ö–æ–¥]({portfolio_item.repository_link})")
        
        if links:
            text_parts.append(" | ".join(links))
            text_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_icons = {
            'telegram_bots': 'ü§ñ',
            'web_development': 'üåê', 
            'mobile_apps': 'üì±',
            'ai_integration': 'üß†',
            'automation': '‚ö°',
            'ecommerce': 'üõí',
            'other': 'üîß'
        }
        
        category_icon = category_icons.get(portfolio_item.category, 'üîß')
        category_name = portfolio_item.category.replace('_', ' ').title()
        category_name = escape_markdown(category_name)
        
        text_parts.extend([
            f"{category_icon} *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category_name}",
            "",
            "üìû *–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π –ø—Ä–æ–µ–∫—Ç:* @your\\_username"
        ])
        
        return "\n".join(text_parts)
    
    async def update_published_item(self, portfolio_item: Portfolio, db: Session) -> dict:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –∫–∞–Ω–∞–ª–µ
        """
        try:
            if not portfolio_item.is_published or not portfolio_item.telegram_message_id:
                return {"success": False, "error": "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
            
            message_text = self._format_portfolio_message(portfolio_item)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            await self.bot.edit_message_text(
                chat_id=self.portfolio_channel_id,
                message_id=portfolio_item.telegram_message_id,
                text=message_text,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –ë–î
            portfolio_item.published_at = datetime.utcnow()
            db.commit()
            
            return {"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")
            return {"success": False, "error": str(e)}
    
    async def delete_published_item(self, portfolio_item: Portfolio, db: Session) -> dict:
        """
        –£–¥–∞–ª—è–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        try:
            if not portfolio_item.is_published or not portfolio_item.telegram_message_id:
                return {"success": False, "error": "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            await self.bot.delete_message(
                chat_id=self.portfolio_channel_id,
                message_id=portfolio_item.telegram_message_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            portfolio_item.is_published = False
            portfolio_item.telegram_message_id = None
            portfolio_item.published_at = None
            db.commit()
            
            return {"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            return {"success": False, "error": str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
portfolio_telegram_service = PortfolioTelegramService()