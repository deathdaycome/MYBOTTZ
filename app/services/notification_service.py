import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Union
from telegram import Bot
from telegram.error import TelegramError

from ..config.settings import settings
from ..config.logging import get_logger, log_api_call
from ..database.database import get_db_context
from ..database.models import User, Project, AdminUser

logger = get_logger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot = None):
        self.bot = bot
        self.admin_chat_id = settings.ADMIN_CHAT_ID
        
    def set_bot(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.bot = bot
    
    async def send_admin_notification(self, message: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not self.admin_chat_id or not self.bot:
            logger.warning("–ê–¥–º–∏–Ω —á–∞—Ç ID –∏–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=message,
                parse_mode=parse_mode
            )
            
            log_api_call("Telegram", "send_admin_notification", True)
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except TelegramError as e:
            log_api_call("Telegram", "send_admin_notification", False)
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False
    
    async def send_user_notification(self, user_id: int, message: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.bot:
            logger.warning("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=parse_mode
            )
            
            log_api_call("Telegram", "send_user_notification", True)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except TelegramError as e:
            log_api_call("Telegram", "send_user_notification", False)
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_telegram_notification(self, user_id: int, message: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram (–∞–ª–∏–∞—Å –¥–ª—è send_user_notification)"""
        return await self.send_user_notification(user_id, message, parse_mode)
    
    async def notify_new_project(self, project: Project, user: User) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ"""
        message = f"""
üÜï <b>–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç!</b>

üìã <b>ID:</b> #{project.id}
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project.title}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{user.username or '–Ω–µ—Ç'})
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {project.estimated_cost:,}‚ÇΩ
üîß <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {project.complexity}
‚è± <b>–í—Ä–µ–º—è:</b> {project.estimated_hours} —á–∞—Å–æ–≤

üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{project.description[:200]}{'...' if len(project.description) > 200 else ''}

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:</b>
‚Ä¢ Telegram ID: {user.telegram_id}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
        """
        
        return await self.send_admin_notification(message)
    
    async def notify_project_status_changed(self, project: Project, old_status: str, user: User) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        status_names = {
            'new': '–ù–æ–≤—ã–π',
            'review': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            'accepted': '–ü—Ä–∏–Ω—è—Ç',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'testing': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        }
        
        status_emojis = {
            'new': 'üÜï',
            'review': 'üëÄ',
            'accepted': '‚úÖ',
            'in_progress': 'üîÑ',
            'testing': 'üß™',
            'completed': 'üéâ',
            'cancelled': '‚ùå'
        }
        
        old_status_name = status_names.get(old_status, old_status)
        new_status_name = status_names.get(project.status, project.status)
        new_emoji = status_emojis.get(project.status, 'üìä')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message = f"""
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> #{project.id} - {project.title}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{user.username or '–Ω–µ—Ç'})
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {old_status_name} ‚Üí {new_status_name}
        """
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        client_message = f"""
{new_emoji} <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.title}
üîÑ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {new_status_name}

{self._get_status_description(project.status)}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        admin_sent = await self.send_admin_notification(admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegram_id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client_sent = False
        if user and user.telegram_id:
            client_sent = await self.send_user_notification(user.telegram_id, client_message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if client_sent:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {user.telegram_id} –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {user.telegram_id}")
        else:
            logger.warning(f"User not found or missing telegram_id for project {project.id}")
            
        if admin_sent:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project.id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
        return client_sent
    
    def _get_status_description(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        descriptions = {
            'new': '–í–∞—à –ø—Ä–æ–µ–∫—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.',
            'review': '–ú—ã –∏–∑—É—á–∞–µ–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏ –≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            'accepted': '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.',
            'in_progress': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ú—ã –±—É–¥–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.',
            'testing': '–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–∫–æ—Ä–æ –ø—Ä–∏—à–ª–µ–º –≤–∞–º –¥–µ–º–æ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.',
            'completed': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!',
            'cancelled': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–µ–∫—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.'
        }
        
        return descriptions.get(status, '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.')
    
    async def notify_error(self, error_message: str, context: Dict[str, Any] = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_message}

<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        if context:
            message += "\n\n<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>\n"
            for key, value in context.items():
                message += f"‚Ä¢ {key}: {value}\n"
        
        return await self.send_admin_notification(message)
    
    async def notify_new_user(self, user: User) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        telegram_id_str = str(user.telegram_id) if user.telegram_id else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        message = f"""
üë§ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>

<b>ID:</b> {telegram_id_str}
<b>–ò–º—è:</b> {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>Username:</b> @{user.username or '–Ω–µ—Ç'}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        """
        
        return await self.send_admin_notification(message)
    
    async def notify_consultation_request(self, user: User, topic: str, message_text: str = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        telegram_id_str = str(user.telegram_id) if user.telegram_id else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        message = f"""
üí¨ <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{user.username or '–Ω–µ—Ç'})
üì± <b>Telegram ID:</b> {telegram_id_str}
üéØ <b>–¢–µ–º–∞:</b> {topic}

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
        """
        
        if message_text:
            message += f"\n\nüìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_text}"
        
        return await self.send_admin_notification(message)
    
    async def send_daily_report(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            with get_db_context() as db:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now().date()
                
                new_projects_count = db.query(Project).filter(
                    Project.created_at >= today
                ).count()
                
                new_users_count = db.query(User).filter(
                    User.registration_date >= today
                ).count()
                
                # –ü—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                in_progress_count = db.query(Project).filter(
                    Project.status == 'in_progress'
                ).count()
                
                completed_today_count = db.query(Project).filter(
                    Project.status == 'completed',
                    Project.updated_at >= today
                ).count()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_projects = db.query(Project).count()
                total_users = db.query(User).count()
            
            message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>
‚Ä¢ üÜï –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {new_projects_count}
‚Ä¢ üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users_count}
‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {completed_today_count}

<b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>
‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_count} –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {total_projects}
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}

<b>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            return await self.send_admin_notification(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def send_reminder(self, user_id: int, reminder_type: str, data: Dict[str, Any] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        reminders = {
            'project_feedback': """
üìù <b>–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ!</b>

–í–∞—à –ø—Ä–æ–µ–∫—Ç "{title}" –∑–∞–≤–µ—Ä—à–µ–Ω. –ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä.
            """,
            
            'project_update': """
üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É</b>

–í–∞—à –ø—Ä–æ–µ–∫—Ç "{title}" –≤ —Ä–∞–±–æ—Ç–µ —É–∂–µ {days} –¥–Ω–µ–π. 

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}
–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {estimated_days} –¥–Ω–µ–π
            """,
            
            'consultation_followup': """
üí¨ <b>–ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?</b>

–ù–µ–¥–∞–≤–Ω–æ –º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—Å –ø–æ –≤–æ–ø—Ä–æ—Å—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞. 

–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç - –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!
            """
        }
        
        template = reminders.get(reminder_type)
        if not template:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_type}")
            return False
        
        try:
            message = template.format(**(data or {}))
            return await self.send_user_notification(user_id, message)
            
        except KeyError as e:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_type}: {e}")
            return False
    
    async def broadcast_message(self, user_ids: List[int], message: str, parse_mode: str = 'HTML') -> Dict[str, int]:
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.bot:
            logger.warning("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return {'sent': 0, 'failed': 0}
        
        sent_count = 0
        failed_count = 0
        
        for user_id in user_ids:
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode=parse_mode
                )
                sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                await asyncio.sleep(0.1)
                
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed_count += 1
        
        # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        await self.send_admin_notification(
            f"üì§ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}\n"
            f"üìä –í—Å–µ–≥–æ: {len(user_ids)}"
        )
        
        return {'sent': sent_count, 'failed': failed_count}
    
    async def notify_high_load(self, metric: str, value: Union[int, float], threshold: Union[int, float]) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"""
        message = f"""
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ</b>

<b>–ú–µ—Ç—Ä–∏–∫–∞:</b> {metric}
<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {value}
<b>–ü–æ—Ä–æ–≥:</b> {threshold}
<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.
        """
        
        return await self.send_admin_notification(message)
    
    async def notify_service_status(self, service: str, status: str, details: str = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–∏—Å–∞"""
        status_emojis = {
            'up': '‚úÖ',
            'down': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'maintenance': 'üîß'
        }
        
        emoji = status_emojis.get(status, 'üìä')
        
        message = f"""
{emoji} <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {service}</b>

<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status.upper()}
<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        if details:
            message += f"\n\n<b>–î–µ—Ç–∞–ª–∏:</b> {details}"
        
        return await self.send_admin_notification(message)
    
    async def notify_new_revision(self, revision, project: Project, client_user: User) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø—Ä–∞–≤–∫–µ"""
        priority_emojis = {
            'low': 'üü¢',
            'normal': 'üîµ',
            'high': 'üü°',
            'urgent': 'üî¥'
        }
        
        priority_names = {
            'low': '–ù–∏–∑–∫–∏–π',
            'normal': '–û–±—ã—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'urgent': '–°—Ä–æ—á–Ω—ã–π'
        }
        
        priority_emoji = priority_emojis.get(revision.priority, 'üìù')
        priority_name = priority_names.get(revision.priority, revision.priority)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
        admin_message = f"""
üìù <b>–ù–æ–≤–∞—è –ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É</b>

{priority_emoji} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_name}
üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> #{project.id} - {project.title}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{client_user.username or '–Ω–µ—Ç'})
üî¢ <b>–ü—Ä–∞–≤–∫–∞:</b> #{revision.revision_number}

üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{revision.description[:300]}{'...' if len(revision.description) > 300 else ''}

‚è∞ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {revision.created_at.strftime('%d.%m.%Y %H:%M')}

{'üîí <b>–°—Ç–∞—Ç—É—Å:</b> –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' if not project.assigned_executor_id else 'üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> –ù–∞–∑–Ω–∞—á–µ–Ω'}
        """
        
        return await self.send_admin_notification(admin_message)
    
    async def notify_revision_status_changed(self, revision, project: Project, client_user: User, old_status: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏"""
        status_names = {
            'open': '–û—Ç–∫—Ä—ã—Ç–∞',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        }
        
        status_emojis = {
            'open': 'üìù',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'rejected': '‚ùå'
        }
        
        old_status_name = status_names.get(old_status, old_status)
        new_status_name = status_names.get(revision.status, revision.status)
        new_emoji = status_emojis.get(revision.status, 'üìä')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        client_message = f"""
{new_emoji} <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∫–µ</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.title}
üî¢ <b>–ü—Ä–∞–≤–∫–∞:</b> #{revision.revision_number}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {new_status_name}

üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏:</b>
{revision.description[:200]}{'...' if len(revision.description) > 200 else ''}

{self._get_revision_status_description(revision.status)}
        """
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message = f"""
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> #{project.id} - {project.title}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{client_user.username or '–Ω–µ—Ç'})
üî¢ <b>–ü—Ä–∞–≤–∫–∞:</b> #{revision.revision_number}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {old_status_name} ‚Üí {new_status_name}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        admin_sent = await self.send_admin_notification(admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegram_id —É –∫–ª–∏–µ–Ω—Ç–∞
        client_sent = False
        if client_user and client_user.telegram_id:
            client_sent = await self.send_user_notification(client_user.telegram_id, client_message)
        else:
            logger.warning(f"Client user not found or missing telegram_id for project {project.id}")
        
        return admin_sent and client_sent
    
    async def notify_revision_message(self, revision, project: Project, message, sender_user: User, recipient_user: User) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ø—Ä–∞–≤–∫–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏–º–µ—é—Ç telegram_id
        if not recipient_user or not recipient_user.telegram_id:
            logger.warning(f"Recipient user not found or missing telegram_id for revision {revision.id}")
            return False
            
        if not sender_user:
            sender_name = "–ö–æ–º–∞–Ω–¥–∞"
            sender_type = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        else:
            sender_name = sender_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            if hasattr(sender_user, 'telegram_id') and sender_user.telegram_id:
                sender_type = "–∫–ª–∏–µ–Ω—Ç" if sender_user.telegram_id == project.user_id else "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            else:
                sender_type = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        
        message_text = f"""
üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∫–µ</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.title}
üî¢ <b>–ü—Ä–∞–≤–∫–∞:</b> #{revision.revision_number}
üë§ <b>–û—Ç:</b> {sender_name} ({sender_type})

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message.message[:300]}{'...' if len(message.message) > 300 else ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> {message.created_at.strftime('%d.%m.%Y %H:%M')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await self.send_user_notification(recipient_user.telegram_id, message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        await self._send_revision_message_images(recipient_user.telegram_id, message, sender_name, sender_type)
        
        return result
    
    def _get_revision_status_description(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        descriptions = {
            'open': 'üìã –ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            'in_progress': 'üîÑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.',
            'completed': 'üéâ –ü—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
            'rejected': '‚ùå –ü—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.'
        }
        return descriptions.get(status, '')
    
    async def _send_revision_message_images(self, user_id: int, message, sender_name: str, sender_type: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∏"""
        try:
            from ..database.database import get_db_context
            from ..database.models import RevisionMessageFile
            import os
            from pathlib import Path
            
            with get_db_context() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                message_files = db.query(RevisionMessageFile).filter(
                    RevisionMessageFile.message_id == message.id
                ).all()
                
                for file in message_files:
                    if file.file_type == 'image':
                        file_path = Path(file.file_path)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if file_path.exists():
                            try:
                                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                                caption = f"üì∏ –û—Ç: {sender_name} ({sender_type})\n"
                                caption += f"üìÖ {message.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                                caption += f"üìé {file.original_filename}"
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                with open(file_path, 'rb') as photo:
                                    await self.bot.send_photo(
                                        chat_id=user_id,
                                        photo=photo,
                                        caption=caption,
                                        parse_mode='HTML'
                                    )
                                    
                                logger.info(f"Image sent to user {user_id}: {file.original_filename}")
                                    
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file.original_filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        else:
                            logger.warning(f"Image file not found: {file.file_path}")
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _send_revision_message_images: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def notify_admin(message: str) -> bool:
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return await notification_service.send_admin_notification(message)

async def notify_user(user_id: int, message: str) -> bool:
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await notification_service.send_user_notification(user_id, message)

async def notify_error(error: str, context: Dict[str, Any] = None) -> bool:
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return await notification_service.notify_error(error, context)