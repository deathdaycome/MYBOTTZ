import logging
import asyncio
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
    PicklePersistence,
    ContextTypes,
)

from app.config.settings import get_settings
from app.config.logging import get_logger
from app.bot.handlers.start import StartHandler
from app.bot.handlers.admin import AdminHandler, admin_command, stats_command, report_command
from app.bot.handlers.consultant import ConsultantHandler
from app.bot.handlers.projects import ProjectsHandler
from app.bot.handlers.revisions import RevisionsHandler
from app.bot.handlers.revision_chat_handlers import RevisionChatHandlers
from app.bot.handlers.tz_creation import TZCreationHandler
from app.bot.handlers.common import CommonHandler
from app.bot.handlers.portfolio import PortfolioHandler
from app.bot.routing import get_callback_router
from app.admin.app import admin_router, templates
from app.database.database import get_db, SessionLocal, init_db
from app.utils.helpers import format_datetime, format_currency, time_ago
from app.services.avito_polling_service import polling_service

# –õ–æ–≥–≥–µ—Ä –¥–ª—è main
logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# init_db()  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å portfolio

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
try:
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    from startup_db_fix import ensure_db_columns
    ensure_db_columns()
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
except Exception as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î: {e}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    print("=" * 80)
    print("üöÄüöÄüöÄ LIFESPAN STARTUP –ù–ê–ß–ê–õ–°–Ø!!!")
    print("=" * 80)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç –ù–ê–ü–†–Ø–ú–£–Æ –±–µ–∑ create_task
    try:
        print("=" * 80)
        print("üì±üì±üì± –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ü–£–°–ö TELEGRAM-–ë–û–¢–ê –ù–ê–ü–†–Ø–ú–£–Æ!!!")
        print("=" * 80)
        logger.info("üì± –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        await bot_instance.application.initialize()
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot_instance.application.start()
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        async def start_polling_with_logging():
            try:
                print("üì°üì°üì° –ó–∞–ø—É—Å–∫ UPDATER.start_polling()...")
                await bot_instance.application.updater.start_polling(
                    allowed_updates=["message", "callback_query"],
                    drop_pending_updates=True
                )
                print("‚úÖ Updater –∑–∞–ø—É—â–µ–Ω, polling —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print("‚è≥ –ñ–¥—ë–º updates –æ—Ç Telegram...")

                # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å polling alive
                while True:
                    await asyncio.sleep(60)
                    print("üíì Polling –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

            except Exception as e:
                print(f"‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –í POLLING: {e}")
                import traceback
                traceback.print_exc()

        asyncio.create_task(start_polling_with_logging())
        print("‚úÖ‚úÖ‚úÖ POLLING TASK –°–û–ó–î–ê–ù! –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")

    except Exception as e:
        print("=" * 80)
        print(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}")
        print("=" * 80)
        logger.error(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}", exc_info=True)
        import traceback
        traceback.print_exc()
        raise
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    try:
        from app.services.scheduler import scheduler
        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö
    try:
        from app.services.task_scheduler import task_scheduler
        await task_scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Avito polling —Å–µ—Ä–≤–∏—Å
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º Avito polling service...")
        asyncio.create_task(polling_service.start_polling())
        logger.info("‚úÖ Avito polling service –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Avito polling: {e}")
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram-–±–æ—Ç–∞
    bot_instance.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram-–±–æ—Ç–∞...")
    await bot_instance.stop()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        from app.services.scheduler import scheduler
        scheduler.stop()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö
    try:
        from app.services.task_scheduler import task_scheduler
        await task_scheduler.stop()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# --- FastAPI App Initialization ---
app = FastAPI(
    title="Bot Business Card Admin",
    description="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è Telegram-–±–æ—Ç–∞ –≤–∏–∑–∏—Ç–∫–∏.",
    version="0.1.0",
    lifespan=lifespan
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://nikolaevcodev.ru",
        "http://nikolaevcodev.ru",
        "http://147.45.215.199:8000",
        "https://147.45.215.199:8000",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    import time
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å —Å –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    logger.info(f"HTTP {request.method} {request.url.path} - {request.client.host}")
    logger.debug(f"Query params: {request.query_params}")
    logger.debug(f"Headers: {dict(request.headers)}")
    
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å
    process_time = time.time() - start_time
    logger.info(f"HTTP {request.method} {request.url.path} - {response.status_code} - {process_time:.2f}s")
    
    if response.status_code == 404:
        logger.warning(f"404 Not Found: {request.url.path}")
    
    return response

# Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è templates –≤ request.state
@app.middleware("http")
async def add_templates(request: Request, call_next):
    request.state.templates = templates
    response = await call_next(request)
    return response

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /admin
app.include_router(admin_router, prefix="/admin")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API –¥–ª—è Telegram Mini App
from app.api.miniapp import router as miniapp_router
app.include_router(miniapp_router)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="app/static"), name="static")
app.mount("/admin/static", StaticFiles(directory="app/admin/static"), name="admin_static")
# –ü–æ–¥–∫–ª—é—á–∞–µ–º uploads –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —Ñ–∞–π–ª–æ–≤
app.mount("/uploads", StaticFiles(directory="/app/uploads"), name="uploads")
# –ü–æ–¥–∫–ª—é—á–∞–µ–º Mini App
app.mount("/", StaticFiles(directory="miniapp/dist", html=True), name="miniapp")

# --- Telegram Bot Initialization ---
class TelegramBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ª–æ–≥–≥–µ—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        self.settings = get_settings()
        self.logger = logging.getLogger(__name__)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è httpx - –§–ò–ö–° –°–ï–¢–ï–í–´–• –ü–†–û–ë–õ–ï–ú!
        from telegram.request import HTTPXRequest
        import httpx

        # –°–æ–∑–¥–∞—ë–º request —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        request = HTTPXRequest(
            connection_pool_size=100,
            connect_timeout=30.0,
            read_timeout=30.0,
            write_timeout=30.0,
            pool_timeout=30.0,
            http_version="1.1"
        )

        persistence = PicklePersistence(filepath=self.settings.bot_persistence_file)
        self.application = (
            Application.builder()
            .token(self.settings.bot_token)
            .persistence(persistence)
            .request(request)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π request
            .get_updates_request(request)  # –ò –¥–ª—è get_updates —Ç–æ–∂–µ
            .build()
        )
        
        self.setup_handlers()
        self.setup_jinja()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""

        # –ì–õ–û–ë–ê–õ–¨–ù–´–ô –õ–û–ì–ì–ï–† –í–°–ï–• UPDATES - –°–ê–ú–´–ô –ü–ï–†–í–´–ô!
        async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–õ–æ–≥–∏—Ä—É–µ—Ç –í–°–ï updates –æ—Ç Telegram"""
            print("=" * 80)
            print(f"üîîüîîüîî –ü–û–õ–£–ß–ï–ù UPDATE –û–¢ TELEGRAM!")
            print(f"Update ID: {update.update_id}")
            if update.message:
                print(f"üì® –¢–∏–ø: MESSAGE, —Ç–µ–∫—Å—Ç: {update.message.text}")
            if update.callback_query:
                print(f"üîò –¢–∏–ø: CALLBACK_QUERY, data: {update.callback_query.data}")
            print("=" * 80)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü–ï–†–í–´–ú!
        from telegram.ext import TypeHandler
        self.application.add_handler(TypeHandler(Update, log_all_updates), group=-1)

        start_handler = StartHandler()
        admin_handler_instance = AdminHandler()
        consultant_handler_instance = ConsultantHandler()
        projects_handler_instance = ProjectsHandler()
        revisions_handler_instance = RevisionsHandler()
        revision_chat_handler_instance = RevisionChatHandlers()  # –î–û–ë–ê–í–õ–ï–ù!
        tz_creation_handler_instance = TZCreationHandler()
        common_handler_instance = CommonHandler()
        portfolio_handler_instance = PortfolioHandler()

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        router = get_callback_router()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        if len(router.routes) == 0:
            self.register_callback_routes(router, start_handler, admin_handler_instance,
                                        consultant_handler_instance, projects_handler_instance,
                                        revisions_handler_instance, revision_chat_handler_instance,
                                        tz_creation_handler_instance,
                                        common_handler_instance, portfolio_handler_instance)

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ (–°–ê–ú–´–ô –ü–ï–†–í–´–ô!)
        async def settings_interceptor(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            user_id = update.effective_user.id
            message_text = update.message.text if update.message else ""
            
            # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –ø—É—Å—Ç—å –ø—Ä–æ—Ö–æ–¥—è—Ç –∫ CommandHandler
            if message_text.startswith('/'):
                await common_handler_instance.handle_text_input(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if context.user_data.get('waiting_bot_token_settings'):
                await common_handler_instance.save_bot_token_settings(update, context)
                return
                
            if context.user_data.get('waiting_timeweb_settings'):
                await common_handler_instance.save_timeweb_settings(update, context)
                return
                
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
            await common_handler_instance.handle_text_input(update, context)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–ï–†–í–´–ú–ò!)
        self.application.add_handler(CommandHandler("start", start_handler.start))
        self.application.add_handler(CommandHandler("help", start_handler.help))
        self.application.add_handler(CommandHandler("menu", start_handler.menu))
        self.application.add_handler(CommandHandler("cancel", start_handler.cancel))
        
        # –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• CALLBACK'–û–í –ß–ï–†–ï–ó –†–û–£–¢–ï–†
        self.application.add_handler(CallbackQueryHandler(router.route))

        # MessageHandler –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        from app.bot.handlers.quick_project_request import QuickProjectRequestHandler
        quick_project_handler_instance = QuickProjectRequestHandler()

        async def text_message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–†–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                quick_state = context.user_data.get('quick_project_state')

                if quick_state == 'waiting_project_name':
                    await quick_project_handler_instance.handle_project_name(update, context)
                    return
                elif quick_state == 'waiting_project_description':
                    await quick_project_handler_instance.handle_project_description(update, context)
                    return
                elif quick_state == 'waiting_project_budget':
                    await quick_project_handler_instance.handle_project_budget(update, context)
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if context.user_data.get('waiting_bot_token_settings'):
                    await common_handler_instance.save_bot_token_settings(update, context)
                    return

                if context.user_data.get('waiting_timeweb_settings'):
                    await common_handler_instance.save_timeweb_settings(update, context)
                    return

                # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                await common_handler_instance.handle_text_input(update, context)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ text_message_router: {e}")
                await common_handler_instance.handle_text_input(update, context)

        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_router))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", admin_command))
        self.application.add_handler(CommandHandler("stats", stats_command))
        self.application.add_handler(CommandHandler("report", report_command))
        
        # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ç–æ –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–æ–∫ (–í–ö–õ–Æ–ß–ê–ï–ú!)
        self.application.add_handler(MessageHandler(
            filters.PHOTO, 
            common_handler_instance.handle_photo
        ))
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¢–ó –∏ –ø—Ä–∞–≤–æ–∫
        async def document_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                tz_data = context.user_data.get('tz_creation', {})
                if tz_data.get('method') == 'upload':
                    await tz_creation_handler_instance.handle_file_upload(update, context)
                    return
                
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                await common_handler_instance.handle_document(update, context)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ document_router: {e}")
        
        self.application.add_handler(MessageHandler(filters.ATTACHMENT & ~filters.VOICE, document_router))
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¢–ó
        async def voice_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó –≥–æ–ª–æ—Å–æ–º
                tz_data = context.user_data.get('tz_creation', {})
                if tz_data.get('method') == 'voice':
                    await tz_creation_handler_instance.handle_voice_input(update, context)
                    return
                
                # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¢–ó - –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await common_handler_instance.handle_voice(update, context)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ voice_router: {e}")
        
        self.application.add_handler(MessageHandler(filters.VOICE, voice_router))
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –¢–ó, –ø—Ä–∞–≤–æ–∫ –∏ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async def universal_text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó —Ç–µ–∫—Å—Ç–æ–º
                tz_data = context.user_data.get('tz_creation', {})
                if tz_data.get('method') == 'text':
                    await tz_creation_handler_instance.handle_text_input(update, context)
                    return
                elif tz_data.get('method') == 'own':
                    await tz_creation_handler_instance.handle_own_tz_input(update, context)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–∫
                step = context.user_data.get('creating_revision_step')
                if step == 'title':
                    await revisions_handler_instance.handle_revision_title(update, context)
                    return
                elif step == 'description':
                    await revisions_handler_instance.handle_revision_description(update, context)
                    return
                
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                await common_handler_instance.handle_text_input(update, context)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ universal_text_router: {e}")
        
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & ~filters.PHOTO, 
            universal_text_router
        ))
    
    def register_callback_routes(self, router, start_handler, admin_handler, consultant_handler,
                               projects_handler, revisions_handler, revision_chat_handler, tz_handler, common_handler, portfolio_handler):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ callback –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Ä–æ—É—Ç–µ—Ä–µ"""
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1 (–°–ê–ú–´–ô –í–´–°–û–ö–ò–ô): –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ ID-based –º–∞—Ä—à—Ä—É—Ç—ã
        
        # –ü—Ä–æ–µ–∫—Ç—ã - –¥–µ—Ç–∞–ª–∏ –∏ —á–∞—Ç (–æ—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ)
        router.register(r"^project_details_\d+$", projects_handler.show_project_details, 
                       priority=10, description="–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID")
        router.register(r"^project_chat_\d+$", projects_handler.show_project_chat,
                       priority=10, description="–ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞")
        
        # –ü—Ä–∞–≤–∫–∏ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        router.register(r"^project_revisions_\d+$", revisions_handler.show_project_revisions,
                       priority=10, description="–ü—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID")
        router.register(r"^list_revisions_\d+$", revisions_handler.list_project_revisions,
                       priority=10, description="–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞")
        router.register(r"^create_revision_\d+$", revisions_handler.start_create_revision,
                       priority=10, description="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
        router.register(r"^confirm_revision_\d+$", revisions_handler.confirm_create_revision,
                       priority=10, description="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏")
        router.register(r"^revision_details_\d+$", revisions_handler.show_revision_details,
                       priority=10, description="–î–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∫–∏")
        router.register(r"^files_done_\d+$", revisions_handler.files_done,
                       priority=10, description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∫–∏")
        router.register(r"^skip_files_\d+$", revisions_handler.skip_revision_files,
                       priority=10, description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∫–∏")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–∞–≤–æ–∫
        router.register(r"^priority_(low|normal|high|urgent)_\d+$", revisions_handler.handle_revision_priority,
                       priority=10, description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–≤–∫–∏")

        # –ß–ê–¢ –ü–†–ê–í–û–ö - –ù–û–í–´–ï –•–ï–ù–î–õ–ï–†–´!
        router.register(r"^revision_chat_\d+$", revision_chat_handler.show_revision_chat,
                       priority=10, description="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø—Ä–∞–≤–∫–∏")
        router.register(r"^revision_write_\d+$", revision_chat_handler.start_write_message,
                       priority=10, description="–ù–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–∞–≤–∫–∏")
        router.register(r"^revision_close_chat_\d+$", revision_chat_handler.close_chat,
                       priority=10, description="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç –ø—Ä–∞–≤–∫–∏")
        router.register(r"^my_revisions$", revision_chat_handler.show_all_my_revisions,
                       priority=10, description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        router.register(r"^revision_approve_\d+$", revision_chat_handler.approve_revision,
                       priority=10, description="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∫—É")
        router.register(r"^revision_reject_\d+$", revision_chat_handler.reject_revision,
                       priority=10, description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")
        router.register(r"^revision_client_approve_\d+$", revision_chat_handler.client_approve_revision,
                       priority=10, description="–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∫—É")
        router.register(r"^revision_client_reject_\d+$", revision_chat_handler.client_reject_revision,
                       priority=10, description="–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∫—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")
        router.register(r"^revision_cancel_reject_\d+$", revision_chat_handler.cancel_reject_revision,
                       priority=10, description="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")

        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–µ–∫—Ç—ã –æ–±—â–∏–µ
        router.register(r"^list_projects$", projects_handler.show_user_projects,
                       priority=20, description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –û–¢–ö–õ–Æ–ß–ï–ù–û (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª)
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç callback'–æ–≤)
        # router.register(r"^portfolio_(telegram|whatsapp|web|integration|featured|all)$", portfolio_handler.select_category,
        #                priority=25, description="–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
        # # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç callback'–æ–≤)
        # router.register(r"^portfolio_(telegram_bots|web_development|mobile_apps|ai_integration|automation|ecommerce|other|featured)$", portfolio_handler.show_category_portfolio,
        #                priority=30, description="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
        # router.register(r"^project_\d+$", portfolio_handler.show_project_details,
        #                priority=30, description="–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ") 
        # router.register(r"^gallery_\d+$", portfolio_handler.show_project_gallery,
        #                priority=30, description="–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞")
        # router.register(r"^like_\d+$", portfolio_handler.like_project,
        #                priority=30, description="–õ–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç")
        # router.register(r"^portfolio_page_\d+$", portfolio_handler.show_portfolio_page,
        #                priority=30, description="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
        # # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        # router.register(r"^portfolio_nav_\d+$", portfolio_handler.navigate_project,
        #                priority=30, description="–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3.5: Quick Request (–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢!)
        from app.bot.handlers.quick_project_request import QuickProjectRequestHandler
        quick_handler = QuickProjectRequestHandler()
        router.register(r"^quick_request$", quick_handler.show_quick_request_menu,
                       priority=35, description="–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞")
        router.register(r"^quick_(telegram|miniapp|whatsapp|android|ios)$", quick_handler.handle_quick_request,
                       priority=35, description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        router.register(r"^budget_(50000|100000|200000|500000|500000plus|unknown)$", quick_handler.handle_project_budget,
                       priority=35, description="–í—ã–±–æ—Ä –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        router.register(r"^deadline_(asap|month|3months|6months|6plus|flexible)$", quick_handler.handle_project_deadline,
                       priority=35, description="–í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")

        # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –¢–ó Creation (ConversationHandler –º–∞—Ä—à—Ä—É—Ç—ã)
        router.register(r"^create_tz$", tz_handler.show_tz_creation_menu,
                       priority=40, description="–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        router.register(r"^tz_(text|voice|step_by_step|upload|own)$", tz_handler.select_tz_method,
                       priority=40, description="–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó")
        
        # –ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¢–ó - –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        router.register(r"^step_", tz_handler.handle_step_answer,
                       priority=40, description="–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ—à–∞–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¢–ó")
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –¢–ó
        router.register(r"^(review_|edit_own_tz|tz_save)", tz_handler.handle_review_action,
                       priority=40, description="–î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –¢–ó")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 5: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–û
        # router.register(r"^consultation$", consultant_handler.start_consultation,
        #                priority=50, description="–ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        router.register(r"^(ask_question|example_questions)$", common_handler.handle_callback,
                       priority=50, description="AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - –≤–æ–ø—Ä–æ—Å—ã")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω–æ–µ 
        router.register(r"^(setup_timeweb|setup_bot_token|send_bot_token|get_telegram_id|get_chat_id|send_chat_id|detailed_chat_instructions|setup_telegram_id)$", common_handler.handle_callback,
                       priority=60, description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        router.register(r"^(bot_enter_token|bot_guide_steps)$", common_handler.handle_callback,
                       priority=60, description="–§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
        router.register(r"^timeweb_info$", common_handler.handle_timeweb_info,
                       priority=60, description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Timeweb")
        router.register(r"^timeweb_registered$", common_handler.handle_timeweb_registered,
                       priority=60, description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Timeweb")
        router.register(r"^bot_creation_help$", common_handler.handle_bot_creation_help,
                       priority=60, description="–ü–æ–º–æ—â—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞")
        router.register(r"^bot_creation_understood$", common_handler.handle_bot_creation_understood,
                       priority=60, description="–ü–æ–Ω—è–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 6.5: –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        router.register(r"^admin_console$", common_handler.handle_callback,
                       priority=65, description="–ê–¥–º–∏–Ω –∫–æ–Ω—Å–æ–ª—å")
        router.register(r"^admin_money$", common_handler.handle_callback,
                       priority=65, description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏")
        router.register(r"^upload_receipt$", common_handler.handle_callback,
                       priority=65, description="–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞")
        router.register(r"^transaction_(income|expense)_\d+$", common_handler.handle_callback,
                       priority=65, description="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        router.register(r"^transaction_type_(income|expense)$", common_handler.handle_callback,
                       priority=65, description="–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ OCR")
        router.register(r"^category_\d+$", common_handler.handle_callback,
                       priority=65, description="–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        router.register(r"^back_to_transaction_type$", common_handler.handle_callback,
                       priority=65, description="–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        router.register(r"^(my_transactions|view_income|view_expenses|money_analytics|money_categories)$", 
                       common_handler.handle_callback, priority=65, description="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 7 (–°–ê–ú–´–ô –ù–ò–ó–ö–ò–ô): –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        router.register(r"^main_menu$", start_handler.start,
                       priority=70, description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        router.register(r"^(calculator|faq|contacts|my_projects|consultant|settings|create_bot_guide)$", 
                       common_handler.handle_callback, priority=70, description="–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        logger.info(f"üîÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(router.routes)} callback –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        conflicts = router.validate_all_patterns()
        if conflicts:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö: {conflicts}")
        else:
            logger.info("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # ConversationHandler –¥–ª—è –¢–ó —Ç–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–æ—É—Ç–µ—Ä - —É–¥–∞–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    def create_portfolio_conversation_handler(self, portfolio_handler, start_handler):
        return ConversationHandler(
            entry_points=[CallbackQueryHandler(portfolio_handler.show_portfolio_page, pattern="^portfolio_")],
            states={
                portfolio_handler.CATEGORY: [CallbackQueryHandler(portfolio_handler.select_category, pattern="^category_")],
                portfolio_handler.PROJECT: [CallbackQueryHandler(portfolio_handler.select_project, pattern="^project_")],
            },
            fallbacks=[CommandHandler("cancel", start_handler.cancel)]
        )

    def setup_jinja(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        templates.env.globals['format_datetime'] = format_datetime
        templates.env.globals['format_currency'] = format_currency
        templates.env.globals['time_ago'] = time_ago

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        print("=" * 80)
        print("ü§ñü§ñü§ñ –ú–ï–¢–û–î RUN() –í–´–ó–í–ê–ù!")
        print("=" * 80)
        self.logger.info("ü§ñü§ñü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        try:
            print("ü§ñ –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self.logger.info("ü§ñ –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            await self.application.initialize()
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            self.logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

            self.logger.info("ü§ñ –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            await self.application.start()
            self.logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

            self.logger.info("ü§ñ –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ polling...")
            await self.application.updater.start_polling()
            self.logger.info("‚úÖ‚úÖ‚úÖ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –ü–û–õ–£–ß–ê–ï–¢ UPDATES!")
        except Exception as e:
            self.logger.error(f"‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}", exc_info=True)
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        try:
            if self.application.updater and self.application.updater.running:
                await self.application.updater.stop()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            if self.application.running:
                await self.application.stop()
        except RuntimeError as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "This Application is not running!"
            if "not running" not in str(e).lower():
                raise
            self.logger.warning(f"–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

# --- Telegram Bot Initialization ---
bot_instance = TelegramBot()


# --- Webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ---
@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞."""
    data = await request.json()
    update = Update.de_json(data, bot_instance.application.bot)
    await bot_instance.application.process_update(update)
    return {"status": "ok"}

@app.get("/ping")
async def ping():
    """–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    return {"message": "pong"}

# –ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è admin_router (–¥–∞—à–±–æ—Ä–¥)

@app.get("/test")
async def test():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã."""
    try:
        import sys
        return {
            "status": "ok", 
            "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "python_version": sys.version,
            "app_name": app.title
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/admin-test")
async def admin_test():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∫–∏."""
    try:
        routes = []
        for route in app.routes:
            if hasattr(route, 'path'):
                routes.append(route.path)
        return {"status": "ok", "message": "–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞", "routes": routes}
    except Exception as e:
        return {"status": "error", "error": str(e), "message": "–û—à–∏–±–∫–∞ –≤ admin-test"}

@app.get("/admin-debug")
async def admin_debug():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∫–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    try:
        routes_info = []
        for route in app.routes:
            if hasattr(route, 'path'):
                route_info = {
                    "path": route.path,
                    "name": route.name if hasattr(route, 'name') else None
                }
                if hasattr(route, 'methods'):
                    route_info["methods"] = list(route.methods) if route.methods else []
                routes_info.append(route_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        routes_info.sort(key=lambda x: x['path'])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        admin_routes = [r for r in routes_info if r['path'].startswith('/admin')]
        
        return {
            "status": "ok", 
            "message": "–ê–¥–º–∏–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            "total_routes": len(routes_info),
            "admin_routes_count": len(admin_routes),
            "admin_routes": admin_routes[:20],  # –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            "all_routes": routes_info[:50]  # –ü–µ—Ä–≤—ã–µ 50 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        }
    except Exception as e:
        import traceback
        return {
            "status": "error",
            "error": str(e),
            "traceback": traceback.format_exc(),
            "message": "–û—à–∏–±–∫–∞ –≤ admin-debug"
        }


if __name__ == "__main__":
    import uvicorn
    settings = get_settings()
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {settings.server_host}:{settings.server_port}")
    
    uvicorn.run(
        "app.main:app",
        host=settings.server_host,
        port=settings.server_port,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        log_level="info"
    )