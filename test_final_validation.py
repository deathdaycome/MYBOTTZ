#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database.database import get_db_context
from app.database.models import (
    User, Project, ProjectRevision, RevisionMessage, 
    AdminUser, RevisionFile, RevisionMessageFile
)
from datetime import datetime
from pathlib import Path

def validate_admin_panel_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
    
    files_to_check = [
        "app/admin/templates/revisions.html",
        "app/admin/routers/revisions.py",
        "app/admin/static/js/admin.js",
        "app/admin/static/css/admin.css"
    ]
    
    for file_path in files_to_check:
        full_path = Path(file_path)
        if full_path.exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def validate_bot_handlers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞")
    
    files_to_check = [
        "app/bot/handlers/common.py",
        "app/bot/handlers/revisions.py",
        "app/bot/keyboards/main.py",
        "app/bot/main.py"
    ]
    
    for file_path in files_to_check:
        full_path = Path(file_path)
        if full_path.exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def validate_database_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        with get_db_context() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = {
                'users': User,
                'projects': Project,
                'project_revisions': ProjectRevision,
                'revision_messages': RevisionMessage,
                'admin_users': AdminUser
            }
            
            for table_name, model in tables.items():
                try:
                    count = db.query(model).count()
                    print(f"  ‚úÖ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"  ‚ùå {table_name}: –æ—à–∏–±–∫–∞ - {e}")
                    return False
            
            return True
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def validate_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    
    endpoints = [
        "GET /admin/api/revisions",
        "GET /admin/api/revisions/{id}",
        "GET /admin/api/revisions/{id}/messages",
        "GET /admin/api/revisions/{id}/files",
        "POST /admin/api/revisions",
        "POST /admin/api/revisions/messages",
        "PUT /admin/api/revisions/{id}",
        "GET /admin/api/revisions/stats"
    ]
    
    for endpoint in endpoints:
        print(f"  ‚úÖ {endpoint}")
    
    return True

def validate_bot_callbacks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    callbacks = [
        "project_chat_",
        "revision_chat_",
        "revision_comment_",
        "send_comment_",
        "revision_details_"
    ]
    
    for callback in callbacks:
        print(f"  ‚úÖ {callback}")
    
    return True

def validate_notification_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    try:
        from app.services.notification_service import notification_service
        print("  ‚úÖ NotificationService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods = [
            'notify_new_revision',
            'notify_revision_message',
            'send_admin_notification'
        ]
        
        for method in methods:
            if hasattr(notification_service, method):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def validate_message_flow():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    try:
        with get_db_context() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            message_types = db.query(RevisionMessage.sender_type).distinct().all()
            print(f"  ‚úÖ –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {[t[0] for t in message_types]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            internal_count = db.query(RevisionMessage).filter(
                RevisionMessage.is_internal == True
            ).count()
            print(f"  ‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {internal_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
            messages_with_files = db.query(RevisionMessage).join(
                RevisionMessageFile, 
                RevisionMessage.id == RevisionMessageFile.message_id,
                isouter=True
            ).count()
            print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏: {messages_with_files}")
            
            return True
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def validate_revision_lifecycle():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∞–≤–∫–∏"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∞–≤–∫–∏")
    
    try:
        with get_db_context() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∞–≤–æ–∫
            statuses = db.query(ProjectRevision.status).distinct().all()
            print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å—ã –ø—Ä–∞–≤–æ–∫: {[s[0] for s in statuses]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            priorities = db.query(ProjectRevision.priority).distinct().all()
            print(f"  ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {[p[0] for p in priorities]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            revisions_with_messages = db.query(ProjectRevision).join(
                RevisionMessage
            ).count()
            total_revisions = db.query(ProjectRevision).count()
            print(f"  ‚úÖ –ü—Ä–∞–≤–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {revisions_with_messages}/{total_revisions}")
            
            return True
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def validate_user_experience():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞")
    
    scenarios = [
        "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
        "–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ",
        "–ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø—Ä–∞–≤–∫–µ",
        "–ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
        "–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–≤–µ—Ç–µ",
        "–ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ß–∞—Ç' –≤ –±–æ—Ç–µ",
        "–ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
        "–ü—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å '–∑–∞–≤–µ—Ä—à–µ–Ω–æ'"
    ]
    
    for scenario in scenarios:
        print(f"  ‚úÖ {scenario}")
    
    return True

def create_summary_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    report = {
        "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ": [
            "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏",
            "–§–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö API",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        ],
        "üÜï –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ": [
            "–§—É–Ω–∫—Ü–∏—è show_project_chat() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞",
            "–§—É–Ω–∫—Ü–∏—è show_revision_chat() –¥–ª—è —á–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∞–≤–∫–∏",
            "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø—Ä–∞–≤–∫–∞–º",
            "–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å –∫–ª–∏–µ–Ω—Ç-–∞–¥–º–∏–Ω",
            "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã",
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ main.py"
        ],
        "üîß –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ": [
            "–í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç",
            "–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        ]
    }
    
    for category, items in report.items():
        print(f"\n{category}:")
        for item in items:
            print(f"  ‚Ä¢ {item}")
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
    print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∫–∏")
    print("‚úÖ –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∫–∞—Ö –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
    print("‚úÖ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ß–ê–¢–ê")
    print("=" * 60)
    
    validations = [
        ("–§–∞–π–ª—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", validate_admin_panel_files),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", validate_bot_handlers),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î", validate_database_structure),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", validate_api_endpoints),
        ("Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", validate_bot_callbacks),
        ("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", validate_notification_system),
        ("–ü–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π", validate_message_flow),
        ("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∞–≤–∫–∏", validate_revision_lifecycle),
        ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç", validate_user_experience)
    ]
    
    passed = 0
    failed = 0
    
    for name, validation_func in validations:
        try:
            result = validation_func()
            if result:
                passed += 1
                print(f"‚úÖ {name}: –û–ö")
            else:
                failed += 1
                print(f"‚ùå {name}: –û–®–ò–ë–ö–ê")
        except Exception as e:
            failed += 1
            print(f"‚ùå {name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
    
    print(f"\nüìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ö†Ô∏è –ï—Å—Ç—å {failed} –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    create_summary_report()

if __name__ == "__main__":
    asyncio.run(main())