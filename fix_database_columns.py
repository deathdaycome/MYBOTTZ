#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import text, inspect
from app.database.database import get_db_context
from app.config.logging import get_logger

logger = get_logger(__name__)

def fix_database():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    logger.info("=== –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    with get_db_context() as db:
        inspector = inspect(db.bind)
        
        try:
            # 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –¢–ê–ë–õ–ò–¶–£ CLIENTS - –¥–æ–±–∞–≤–ª—è–µ–º Avito –∫–æ–ª–æ–Ω–∫–∏
            if inspector.has_table('clients'):
                logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É clients...")
                client_columns = [col['name'] for col in inspector.get_columns('clients')]
                
                avito_client_columns = [
                    ('avito_chat_id', 'TEXT'),
                    ('avito_user_id', 'TEXT'),
                    ('avito_status', 'TEXT'),
                    ('avito_dialog_history', 'TEXT'),
                    ('avito_notes', 'TEXT'),
                    ('avito_follow_up', 'TEXT'),
                    ('telegram_user_id', 'TEXT')
                ]
                
                for col_name, col_type in avito_client_columns:
                    if col_name not in client_columns:
                        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º {col_name} –≤ clients")
                        db.execute(text(f"ALTER TABLE clients ADD COLUMN {col_name} {col_type}"))
                        logger.info(f"‚úì {col_name} –¥–æ–±–∞–≤–ª–µ–Ω")
                    else:
                        logger.info(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ clients")
            
            # 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –¢–ê–ë–õ–ò–¶–£ LEADS - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if inspector.has_table('leads'):
                logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É leads...")
                lead_columns = [col['name'] for col in inspector.get_columns('leads')]
                
                if 'source_type' not in lead_columns:
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º source_type –≤ leads")
                    db.execute(text("ALTER TABLE leads ADD COLUMN source_type TEXT"))
                    logger.info("‚úì source_type –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    logger.info("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ source_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ leads")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ projects
            if inspector.has_table('projects'):
                project_columns = [col['name'] for col in inspector.get_columns('projects')]
                
                if 'source_deal_id' not in project_columns:
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º source_deal_id –≤ projects")
                    db.execute(text("ALTER TABLE projects ADD COLUMN source_deal_id INTEGER"))
                    logger.info("‚úì source_deal_id –¥–æ–±–∞–≤–ª–µ–Ω")
                
                if 'paid_amount' not in project_columns:
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º paid_amount –≤ projects")
                    db.execute(text("ALTER TABLE projects ADD COLUMN paid_amount REAL DEFAULT 0.0"))
                    logger.info("‚úì paid_amount –¥–æ–±–∞–≤–ª–µ–Ω")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ finance_transactions
            if inspector.has_table('finance_transactions'):
                finance_columns = [col['name'] for col in inspector.get_columns('finance_transactions')]
                
                if 'account' not in finance_columns:
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º account –≤ finance_transactions")
                    db.execute(text("ALTER TABLE finance_transactions ADD COLUMN account VARCHAR(50) DEFAULT 'card'"))
                    logger.info("‚úì account –¥–æ–±–∞–≤–ª–µ–Ω")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ deals
            if inspector.has_table('deals'):
                deal_columns = [col['name'] for col in inspector.get_columns('deals')]
                
                if 'converted_to_project_id' not in deal_columns:
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º converted_to_project_id –≤ deals")
                    db.execute(text("ALTER TABLE deals ADD COLUMN converted_to_project_id INTEGER"))
                    logger.info("‚úì converted_to_project_id –¥–æ–±–∞–≤–ª–µ–Ω")
            
            db.commit()
            logger.info("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û ===")
            logger.info("üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            db.rollback()
            raise

if __name__ == "__main__":
    fix_database()