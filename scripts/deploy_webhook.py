#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è
–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫: /var/www/webhook/deploy_webhook.py
"""

import os
import json
import subprocess
import hmac
import hashlib
from flask import Flask, request, jsonify
import logging

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_SECRET = "your-webhook-secret-key-2024"  # –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç
REPO_PATH = "/var/www/bot_business_card"
BRANCH = "main"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def verify_signature(payload, signature, secret):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ GitHub webhook"""
    expected_signature = 'sha256=' + hmac.new(
        secret.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(expected_signature, signature)

def deploy():
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        os.chdir(REPO_PATH)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        subprocess.run(["pkill", "-f", "python.*run.py"], check=False)
        subprocess.run(["screen", "-S", "bot_app", "-X", "quit"], check=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥...")
        result = subprocess.run([
            "git", "fetch", "origin"
        ], capture_output=True, text=True)
        
        result = subprocess.run([
            "git", "reset", "--hard", f"origin/{BRANCH}"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            raise Exception(f"Git update failed: {result.stderr}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        subprocess.run([
            "pip3", "install", "--user", "-r", "requirements.txt"
        ], check=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
        logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        subprocess.run([
            "python3", "-c", 
            "from app.database.database import init_database; init_database(); print('DB OK')"
        ], check=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        subprocess.run([
            "screen", "-dmS", "bot_app", 
            "bash", "-c", f"cd {REPO_PATH} && python3 run.py > app.log 2>&1"
        ], check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
        import time
        time.sleep(5)
        
        result = subprocess.run([
            "curl", "-f", "http://localhost:8000/"
        ], capture_output=True, check=False)
        
        if result.returncode == 0:
            logger.info("‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –Ω–æ HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        return False

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub webhook"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = request.headers.get('X-Hub-Signature-256', '')
    payload = request.get_data()
    
    if not verify_signature(payload, signature, WEBHOOK_SECRET):
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
        return jsonify({'error': 'Invalid signature'}), 403
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        data = json.loads(payload)
    except json.JSONDecodeError:
        return jsonify({'error': 'Invalid JSON'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ push –≤ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É
    if data.get('ref') != f'refs/heads/{BRANCH}':
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º push –≤ –≤–µ—Ç–∫—É: {data.get('ref')}")
        return jsonify({'message': 'Branch ignored'}), 200
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç {data.get('pusher', {}).get('name', 'unknown')}")
    
    if deploy():
        return jsonify({'message': 'Deploy successful'}), 200
    else:
        return jsonify({'error': 'Deploy failed'}), 500

@app.route('/status', methods=['GET'])
def status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        result = subprocess.run(['pgrep', '-f', 'python.*run.py'], 
                              capture_output=True, text=True)
        process_running = result.returncode == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
        result = subprocess.run(['curl', '-f', 'http://localhost:8000/'], 
                              capture_output=True, check=False)
        http_ok = result.returncode == 0
        
        return jsonify({
            'process_running': process_running,
            'http_ok': http_ok,
            'status': 'OK' if process_running and http_ok else 'ERROR'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9999, debug=False)