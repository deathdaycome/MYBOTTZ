#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è
–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫: /var/www/webhook/deploy_webhook.py
"""

import os
import json
import subprocess
import hmac
import hashlib
from flask import Flask, request, jsonify
import logging

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_SECRET = "your-webhook-secret-key-2024"  # –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç
REPO_PATH = "/var/www/bot_business_card"
BRANCH = "main"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def verify_signature(payload, signature, secret):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ GitHub webhook"""
    expected_signature = 'sha256=' + hmac.new(
        secret.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(expected_signature, signature)

def deploy():
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        os.chdir(REPO_PATH)
        
        # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫—Ä–æ–º–µ webhook)
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å—ã run.py (–ù–ï webhook!)
        subprocess.run(["pkill", "-f", "python.*run.py"], check=False)
        subprocess.run(["pkill", "-f", "python3.*run.py"], check=False)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ screen —Å–µ—Å—Å–∏–∏ —Å –±–æ—Ç–æ–º
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º pgrep –¥–ª—è –ø–æ–∏—Å–∫–∞ webhook –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        result = subprocess.run(['pgrep', '-f', 'python.*run.py'], 
                              capture_output=True, text=True)
        if result.stdout.strip():
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid.isdigit():
                    subprocess.run(['kill', pid], check=False)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º screen —Å–µ—Å—Å–∏–∏
        subprocess.run(["screen", "-S", "bot_app", "-X", "quit"], check=False)
        subprocess.run(["pkill", "-f", "SCREEN.*bot_app"], check=False)
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç 8000 (–ù–ï —Ç—Ä–æ–≥–∞–µ–º 9999 - webhook!)
        logger.info("–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 8000...")
        subprocess.run(["fuser", "-k", "8000/tcp"], check=False)
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        import time
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        result = subprocess.run(['pgrep', '-f', 'python.*run.py'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω—ã, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º...")
            subprocess.run(["pkill", "-9", "-f", "python.*run.py"], check=False)
            time.sleep(2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥...")
        result = subprocess.run([
            "git", "fetch", "origin"
        ], capture_output=True, text=True)
        
        result = subprocess.run([
            "git", "reset", "--hard", f"origin/{BRANCH}"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            raise Exception(f"Git update failed: {result.stderr}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        subprocess.run([
            "pip3", "install", "--user", "-r", "requirements.txt"
        ], check=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
        logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        subprocess.run([
            "python3", "-c", 
            "from app.database.database import init_database; init_database(); print('DB OK')"
        ], check=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω (–ù–ï —Ç—Ä–æ–≥–∞–µ–º 9999 - webhook!)
        result = subprocess.run(['lsof', '-ti', ':8000'], 
                              capture_output=True, text=True)
        if result.stdout.strip():
            logger.info("–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 8000...")
            subprocess.run(['kill', '-9'] + result.stdout.strip().split('\n'), 
                         check=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ screen —Å–µ—Å—Å–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ screen —Å–µ—Å—Å–∏–∏...")
        
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(REPO_PATH):
            raise Exception(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {REPO_PATH} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ run.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        run_py_path = os.path.join(REPO_PATH, "run.py")
        if not os.path.exists(run_py_path):
            raise Exception(f"–§–∞–π–ª {run_py_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –£–±–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ screen —Å–µ—Å—Å–∏–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        subprocess.run(["screen", "-S", "bot_app", "-X", "quit"], check=False)
        time.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é screen —Å–µ—Å—Å–∏—é
        cmd = [
            "screen", "-dmS", "bot_app", 
            "bash", "-c", f"cd {REPO_PATH} && python3 run.py > app.log 2>&1"
        ]
        
        logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ screen: {result.stderr}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å screen —Å–µ—Å—Å–∏—é: {result.stderr}")
        
        logger.info("Screen —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(5):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            time.sleep(3)  # –ú–µ–Ω—å—à–µ –∂–¥–µ–º –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/5)...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º screen —Å–µ—Å—Å–∏—é
            screen_result = subprocess.run(['screen', '-list'], 
                                         capture_output=True, text=True)
            screen_exists = 'bot_app' in screen_result.stdout
            logger.info(f"Screen —Å–µ—Å—Å–∏—è bot_app: {'–Ω–∞–π–¥–µ–Ω–∞' if screen_exists else '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å Python
            process_result = subprocess.run(['pgrep', '-f', 'python.*run.py'], 
                                          capture_output=True, text=True)
            process_running = process_result.returncode == 0
            logger.info(f"Python –ø—Ä–æ—Ü–µ—Å—Å run.py: {'–∑–∞–ø—É—â–µ–Ω' if process_running else '–ù–ï –∑–∞–ø—É—â–µ–Ω'}")
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            if not process_running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                log_path = os.path.join(REPO_PATH, "app.log")
                if os.path.exists(log_path):
                    with open(log_path, 'r') as f:
                        lines = f.readlines()
                        if lines:
                            logger.error("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ app.log:")
                            for line in lines[-5:]:
                                logger.error(f"  {line.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω)
            http_ok = False
            if process_running:
                http_result = subprocess.run([
                    "curl", "-f", "--connect-timeout", "5", "http://localhost:8000/"
                ], capture_output=True, check=False)
                http_ok = http_result.returncode == 0
                logger.info(f"HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞: {'OK' if http_ok else 'FAILED'}")
            
            if process_running and screen_exists:
                if http_ok:
                    logger.info("‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
                    return True
                else:
                    logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∏ screen –∑–∞–ø—É—â–µ–Ω—ã, HTTP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")
                    if attempt >= 2:  # –ü–æ—Å–ª–µ 3-–π –ø–æ–ø—ã—Ç–∫–∏ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                        logger.info("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
                        return True
            else:
                logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: process={process_running}, screen={screen_exists}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
                if attempt < 4:
                    logger.info("–ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
                    subprocess.run(["screen", "-S", "bot_app", "-X", "quit"], check=False)
                    time.sleep(1)
                    
                    restart_cmd = [
                        "screen", "-dmS", "bot_app", 
                        "bash", "-c", f"cd {REPO_PATH} && python3 run.py > app.log 2>&1"
                    ]
                    subprocess.run(restart_cmd, check=False)
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return False
        
        return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        return False

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub webhook"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = request.headers.get('X-Hub-Signature-256', '')
    payload = request.get_data()
    
    if not verify_signature(payload, signature, WEBHOOK_SECRET):
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
        return jsonify({'error': 'Invalid signature'}), 403
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        data = json.loads(payload)
    except json.JSONDecodeError:
        return jsonify({'error': 'Invalid JSON'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ push –≤ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É
    if data.get('ref') != f'refs/heads/{BRANCH}':
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º push –≤ –≤–µ—Ç–∫—É: {data.get('ref')}")
        return jsonify({'message': 'Branch ignored'}), 200
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç {data.get('pusher', {}).get('name', 'unknown')}")
    
    if deploy():
        return jsonify({'message': 'Deploy successful'}), 200
    else:
        return jsonify({'error': 'Deploy failed'}), 500

@app.route('/status', methods=['GET'])
def status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        result = subprocess.run(['pgrep', '-f', 'python.*run.py'], 
                              capture_output=True, text=True)
        process_running = result.returncode == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
        result = subprocess.run(['curl', '-f', 'http://localhost:8000/'], 
                              capture_output=True, check=False)
        http_ok = result.returncode == 0
        
        return jsonify({
            'process_running': process_running,
            'http_ok': http_ok,
            'status': 'OK' if process_running and http_ok else 'ERROR'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9999, debug=False)