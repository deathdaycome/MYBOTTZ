#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü CRM –∏ –∞—É–¥–∏—Ç-–ª–æ–≥–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
from app.database.database import Base
from app.database.models import *
from app.database.crm_models import *
from app.database.automation_models import *
from app.database.audit_models import *
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
try:
    from app.database.document_models import *
except ImportError:
    pass  # –ú–æ–¥–µ–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ crm_models
try:
    from app.database.finance_models import *
except ImportError:
    pass  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ crm_models
from app.database.rbac_models import *
try:
    from app.database.report_models import *
except ImportError:
    pass  # –ú–æ–¥–µ–ª–∏ –æ—Ç—á–µ—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ crm_models
from app.config.logging import get_logger

logger = get_logger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = "sqlite:///./admin_panel.db"


def create_all_tables():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü CRM –∏ –∞—É–¥–∏—Ç-–ª–æ–≥–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        engine = create_engine(DATABASE_URL, echo=False)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' 
                ORDER BY name
            """))
            tables = result.fetchall()
            
            print(f"\nüìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: {len(tables)}")
            print("\n–ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã CRM:")
            crm_tables = [t[0] for t in tables if any(x in t[0] for x in ['client', 'lead', 'deal', 'activity', 'communication'])]
            for table in crm_tables:
                print(f"  ‚úì {table}")
            
            print("\n–¢–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:")
            auto_tables = [t[0] for t in tables if any(x in t[0] for x in ['automation', 'notification', 'workflow'])]
            for table in auto_tables:
                print(f"  ‚úì {table}")
            
            print("\n–¢–∞–±–ª–∏—Ü—ã –∞—É–¥–∏—Ç–∞:")
            audit_tables = [t[0] for t in tables if 'audit' in t[0]]
            for table in audit_tables:
                print(f"  ‚úì {table}")
            
            print("\n–¢–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            doc_tables = [t[0] for t in tables if 'document' in t[0]]
            for table in doc_tables:
                print(f"  ‚úì {table}")
            
            print("\n–¢–∞–±–ª–∏—Ü—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤:")
            finance_tables = [t[0] for t in tables if any(x in t[0] for x in ['invoice', 'payment', 'expense', 'budget'])]
            for table in finance_tables:
                print(f"  ‚úì {table}")
            
            print("\n–¢–∞–±–ª–∏—Ü—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:")
            rbac_tables = [t[0] for t in tables if any(x in t[0] for x in ['role', 'permission', 'user_role'])]
            for table in rbac_tables:
                print(f"  ‚úì {table}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def migrate_existing_data():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        engine = create_engine(DATABASE_URL, echo=False)
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("\nüìù –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        from app.database.rbac_models import Role, Permission
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª–∏
        existing_roles = session.query(Role).count()
        if existing_roles == 0:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
            roles_data = [
                {
                    'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'code': 'admin',
                    'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ',
                    'is_system': True
                },
                {
                    'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                    'code': 'manager',
                    'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Å–¥–µ–ª–∫–∞–º–∏',
                    'is_system': True
                },
                {
                    'name': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                    'code': 'executor',
                    'description': '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á',
                    'is_system': True
                },
                {
                    'name': '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å',
                    'code': 'observer',
                    'description': '–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä',
                    'is_system': True
                }
            ]
            
            for role_data in roles_data:
                role = Role(**role_data)
                session.add(role)
            
            session.commit()
            print(f"  ‚úì –°–æ–∑–¥–∞–Ω–æ {len(roles_data)} –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π")
        else:
            print(f"  ‚Ñπ –†–æ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {existing_roles}")
        
        # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º –≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        from app.database.models import TelegramUser
        from app.database.crm_models import Client, ClientType, ClientStatus
        
        tg_users = session.query(TelegramUser).all()
        migrated_clients = 0
        
        for tg_user in tg_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
            existing_client = session.query(Client).filter(
                Client.telegram_id == str(tg_user.telegram_id)
            ).first()
            
            if not existing_client:
                client = Client(
                    name=tg_user.first_name or f"User_{tg_user.telegram_id}",
                    type=ClientType.INDIVIDUAL,
                    status=ClientStatus.ACTIVE if tg_user.active_subscription else ClientStatus.INACTIVE,
                    telegram_id=str(tg_user.telegram_id),
                    telegram_username=tg_user.username,
                    source='telegram',
                    created_at=tg_user.registration_date or datetime.utcnow(),
                    tags=['telegram_user', 'migrated']
                )
                session.add(client)
                migrated_clients += 1
        
        session.commit()
        print(f"  ‚úì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_clients} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–¥–µ–ª–∫–∏
        print("\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–¥–µ–ª–∫–∏...")
        from app.database.models import Project
        from app.database.crm_models import Deal, DealStatus, DealStage
        
        projects = session.query(Project).all()
        migrated_deals = 0
        
        for project in projects:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
            client = session.query(Client).filter(
                Client.telegram_id == str(project.user.telegram_id)
            ).first() if project.user else None
            
            if client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–¥–µ–ª–∫–∞
                existing_deal = session.query(Deal).filter(
                    Deal.project_id == project.id
                ).first()
                
                if not existing_deal:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
                    if project.status in ['completed', 'paid']:
                        deal_status = DealStatus.WON
                        deal_stage = DealStage.CLOSED_WON
                    elif project.status == 'cancelled':
                        deal_status = DealStatus.LOST
                        deal_stage = DealStage.CLOSED_LOST
                    elif project.status in ['in_progress', 'testing']:
                        deal_status = DealStatus.IN_PROGRESS
                        deal_stage = DealStage.CONTRACT
                    else:
                        deal_status = DealStatus.NEW
                        deal_stage = DealStage.INITIAL_CONTACT
                    
                    deal = Deal(
                        title=project.title,
                        client_id=client.id,
                        project_id=project.id,
                        amount=float(project.estimated_cost) if project.estimated_cost else 0,
                        status=deal_status,
                        stage=deal_stage,
                        probability=100 if deal_status == DealStatus.WON else 50,
                        expected_close_date=project.planned_end_date,
                        actual_close_date=project.end_date if project.status == 'completed' else None,
                        created_at=project.created_at or datetime.utcnow(),
                        tags=['migrated_from_project']
                    )
                    session.add(deal)
                    migrated_deals += 1
        
        session.commit()
        print(f"  ‚úì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_deals} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–¥–µ–ª–∫–∏")
        
        # 4. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç-–ª–æ–≥–µ
        print("\nüìù –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç-–ª–æ–≥–µ...")
        from app.database.audit_models import AuditLog, AuditActionType
        
        audit_entry = AuditLog(
            action_type=AuditActionType.SETTING_CHANGE,
            description="–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CRM –∏ –∞—É–¥–∏—Ç-–ª–æ–≥–∞",
            success='success',
            extra_metadata={
                'migration': 'crm_and_audit',
                'migrated_clients': migrated_clients,
                'migrated_deals': migrated_deals,
                'timestamp': datetime.utcnow().isoformat()
            }
        )
        session.add(audit_entry)
        session.commit()
        print("  ‚úì –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç-–ª–æ–≥–µ")
        
        # 5. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("\nüìù –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        from app.database.document_models import DocumentTemplate, DocumentType
        
        existing_templates = session.query(DocumentTemplate).count()
        if existing_templates == 0:
            templates = [
                {
                    'name': '–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É',
                    'type': DocumentType.CONTRACT,
                    'content': '''
                        <h1>–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É ‚Ññ{{ contract_number }}</h1>
                        <p>–≥. –ú–æ—Å–∫–≤–∞, {{ date }}</p>
                        <p>{{ client_name }}, –∏–º–µ–Ω—É–µ–º—ã–π –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º "–ó–∞–∫–∞–∑—á–∏–∫", –∏ BotDev, –∏–º–µ–Ω—É–µ–º—ã–π –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", –∑–∞–∫–ª—é—á–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –æ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º:</p>
                        <h2>1. –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞</h2>
                        <p>{{ project_description }}</p>
                        <h2>2. –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç</h2>
                        <p>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {{ amount }} —Ä—É–±.</p>
                    ''',
                    'variables': ['contract_number', 'date', 'client_name', 'project_description', 'amount'],
                    'is_active': True,
                    'is_system': True
                },
                {
                    'name': '–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É',
                    'type': DocumentType.INVOICE,
                    'content': '''
                        <h1>–°—á–µ—Ç ‚Ññ{{ invoice_number }} –æ—Ç {{ date }}</h1>
                        <p>–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: {{ client_name }}</p>
                        <table>
                            <tr><th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¶–µ–Ω–∞</th><th>–°—É–º–º–∞</th></tr>
                            <tr><td>{{ service_name }}</td><td>1</td><td>{{ amount }}</td><td>{{ amount }}</td></tr>
                        </table>
                        <p><strong>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {{ amount }} —Ä—É–±.</strong></p>
                    ''',
                    'variables': ['invoice_number', 'date', 'client_name', 'service_name', 'amount'],
                    'is_active': True,
                    'is_system': True
                },
                {
                    'name': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    'type': DocumentType.PROPOSAL,
                    'content': '''
                        <h1>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h1>
                        <p>–£–≤–∞–∂–∞–µ–º—ã–π {{ client_name }}!</p>
                        <p>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:</p>
                        <p>{{ proposal_content }}</p>
                        <p>–°—Ç–æ–∏–º–æ—Å—Ç—å: {{ amount }} —Ä—É–±.</p>
                        <p>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {{ deadline }}</p>
                    ''',
                    'variables': ['client_name', 'proposal_content', 'amount', 'deadline'],
                    'is_active': True,
                    'is_system': True
                }
            ]
            
            for template_data in templates:
                template = DocumentTemplate(**template_data)
                session.add(template)
            
            session.commit()
            print(f"  ‚úì –°–æ–∑–¥–∞–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"  ‚Ñπ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {existing_templates}")
        
        # 6. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("\nüìù –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        from app.database.automation_models import AutomationRule, AutomationType, TriggerType
        
        existing_rules = session.query(AutomationRule).count()
        if existing_rules == 0:
            rules = [
                {
                    'name': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç',
                    'type': AutomationType.LEAD_FOLLOWUP,
                    'trigger_type': TriggerType.EVENT_BASED,
                    'conditions': {
                        'event_type': 'lead_created',
                        'checks': []
                    },
                    'actions': [
                        {
                            'type': 'send_notification',
                            'params': {
                                'channel': 'email',
                                'template_id': 1
                            }
                        }
                    ],
                    'is_active': True,
                    'priority': 8
                },
                {
                    'name': '–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π —ç—Ç–∞–ø',
                    'type': AutomationType.DEAL_STAGE_CHANGE,
                    'trigger_type': TriggerType.EVENT_BASED,
                    'conditions': {
                        'event_type': 'deal_stage_changed',
                        'checks': []
                    },
                    'actions': [
                        {
                            'type': 'send_notification',
                            'params': {
                                'channel': 'in_app'
                            }
                        }
                    ],
                    'is_active': True,
                    'priority': 7
                }
            ]
            
            for rule_data in rules:
                rule = AutomationRule(**rule_data)
                session.add(rule)
            
            session.commit()
            print(f"  ‚úì –°–æ–∑–¥–∞–Ω–æ {len(rules)} –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        else:
            print(f"  ‚Ñπ –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {existing_rules}")
        
        session.close()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ë–î: CRM –ò –ê–£–î–ò–¢-–õ–û–ì")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if not create_all_tables():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
        return 1
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if not migrate_existing_data():
        print("\n‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1
    
    print("\n" + "=" * 60)
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    print("\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    print("  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    return 0


if __name__ == "__main__":
    exit(main())