#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É projects
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ GitHub Actions –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os

def main():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ projects"""
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_paths = ["business_card_bot.db", "data/bot.db", "./data/bot.db"]
    db_path = None
    
    for path in db_paths:
        if os.path.exists(path):
            db_path = path
            break
    
    if not db_path:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É—Ç—è—Ö: {db_paths}")
        return
        
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(projects)")
        columns = cursor.fetchall()
        existing_columns = [col[1] for col in columns]
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ projects: {len(existing_columns)}")
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        columns_to_add = [
            ('start_date', 'DATETIME DEFAULT (datetime(\'now\'))'),
            ('planned_end_date', 'DATETIME DEFAULT (datetime(\'now\', \'+7 days\'))'),
            ('actual_end_date', 'DATETIME'),
            ('prepayment_amount', 'REAL DEFAULT 0.0'),
            ('client_paid_total', 'REAL DEFAULT 0.0'), 
            ('executor_paid_total', 'REAL DEFAULT 0.0'),
            ('responsible_manager_id', 'INTEGER'),
            ('assigned_executor_id', 'INTEGER'),
            ('assigned_at', 'DATETIME')
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        for col_name, col_definition in columns_to_add:
            if col_name not in existing_columns:
                print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col_name}...")
                try:
                    cursor.execute(f"ALTER TABLE projects ADD COLUMN {col_name} {col_definition}")
                    print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                except sqlite3.OperationalError as e:
                    if "duplicate column name" in str(e):
                        print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {e}")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(projects)")
        final_columns = cursor.fetchall()
        print(f"üìã –ò—Ç–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ projects: {len(final_columns)}")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise
    finally:
        conn.close()

if __name__ == "__main__":
    main()