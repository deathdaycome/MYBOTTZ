#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è —Å PM2
–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫: /root/webhook/deploy_webhook.py
"""

import os
import json
import subprocess
import hmac
import hashlib
from flask import Flask, request, jsonify
import logging
import time

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_SECRET = "your-webhook-secret-key-2024"  # –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç
REPO_PATH = "/var/www/bot_business_card"
BRANCH = "main"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/webhook/deploy.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def verify_signature(payload, signature, secret):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ GitHub webhook"""
    expected_signature = 'sha256=' + hmac.new(
        secret.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(expected_signature, signature)

def clear_python_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Python"""
    logger.info("üßπ –û—á–∏—â–∞–µ–º –∫–µ—à Python...")
    try:
        # –£–¥–∞–ª—è–µ–º __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        subprocess.run([
            "find", REPO_PATH, "-type", "d", "-name", "__pycache__", 
            "-exec", "rm", "-rf", "{}", "+"
        ], check=False, stderr=subprocess.DEVNULL)
        
        # –£–¥–∞–ª—è–µ–º .pyc —Ñ–∞–π–ª—ã
        subprocess.run([
            "find", REPO_PATH, "-name", "*.pyc", "-delete"
        ], check=False, stderr=subprocess.DEVNULL)
        
        # –£–¥–∞–ª—è–µ–º .pyo —Ñ–∞–π–ª—ã
        subprocess.run([
            "find", REPO_PATH, "-name", "*.pyo", "-delete"
        ], check=False, stderr=subprocess.DEVNULL)
        
        logger.info("‚úÖ –ö–µ—à Python –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: {e}")

def deploy():
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è —Å PM2"""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        os.chdir(REPO_PATH)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        logger.info("üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        result = subprocess.run([
            "git", "fetch", "origin"
        ], capture_output=True, text=True)
        
        result = subprocess.run([
            "git", "reset", "--hard", f"origin/{BRANCH}"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            raise Exception(f"Git update failed: {result.stderr}")
        
        # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –∫–µ—à Python
        clear_python_cache()
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à pip
        logger.info("üßπ –û—á–∏—â–∞–µ–º –∫–µ—à pip...")
        subprocess.run(["pip", "cache", "purge"], check=False, stderr=subprocess.DEVNULL)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        logger.info("üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        venv_python = os.path.join(REPO_PATH, "venv", "bin", "python3")
        venv_pip = os.path.join(REPO_PATH, "venv", "bin", "pip")
        
        result = subprocess.run([
            venv_pip, "install", "-r", "requirements.txt", "--no-cache-dir"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
        logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        subprocess.run([
            venv_python, "-c", 
            "from app.database.database import init_database; init_database(); print('DB OK')"
        ], check=False, stderr=subprocess.DEVNULL)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        subprocess.run(["pm2", "stop", "bot-business-card"], 
                      check=False, stderr=subprocess.DEVNULL)
        time.sleep(2)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ PM2
        subprocess.run(["pm2", "delete", "bot-business-card"], 
                      check=False, stderr=subprocess.DEVNULL)
        time.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PM2
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PM2...")
        result = subprocess.run([
            "pm2", "start", "ecosystem.config.js"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            raise Exception(f"PM2 start failed: {result.stderr}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2
        subprocess.run(["pm2", "save"], check=False)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        result = subprocess.run([
            "pm2", "status", "bot-business-card"
        ], capture_output=True, text=True)
        
        if "online" in result.stdout.lower():
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            result = subprocess.run([
                "pm2", "logs", "bot-business-card", "--lines", "10", "--nostream"
            ], capture_output=True, text=True, timeout=5)
            
            if result.stdout:
                logger.info("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                for line in result.stdout.split('\n')[-10:]:
                    if line.strip():
                        logger.info(f"  {line}")
            
            return True
        else:
            logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            result = subprocess.run([
                "pm2", "logs", "bot-business-card", "--err", "--lines", "20", "--nostream"
            ], capture_output=True, text=True, timeout=5)
            
            if result.stdout:
                logger.error("‚ùå –û—à–∏–±–∫–∏:")
                for line in result.stdout.split('\n'):
                    if line.strip():
                        logger.error(f"  {line}")
            
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        return False

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub webhook"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = request.headers.get('X-Hub-Signature-256', '')
    payload = request.get_data()
    
    if not verify_signature(payload, signature, WEBHOOK_SECRET):
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
        return jsonify({'error': 'Invalid signature'}), 403
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        data = json.loads(payload)
    except json.JSONDecodeError:
        return jsonify({'error': 'Invalid JSON'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ push –≤ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É
    if data.get('ref') != f'refs/heads/{BRANCH}':
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º push –≤ –≤–µ—Ç–∫—É: {data.get('ref')}")
        return jsonify({'message': 'Branch ignored'}), 200
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç {data.get('pusher', {}).get('name', 'unknown')}")
    
    if deploy():
        return jsonify({'message': 'Deploy successful'}), 200
    else:
        return jsonify({'error': 'Deploy failed'}), 500

@app.route('/status', methods=['GET'])
def status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PM2 —Å—Ç–∞—Ç—É—Å
        result = subprocess.run([
            'pm2', 'jlist'
        ], capture_output=True, text=True)
        
        pm2_data = json.loads(result.stdout) if result.stdout else []
        app_status = None
        
        for app in pm2_data:
            if app.get('name') == 'bot-business-card':
                app_status = {
                    'status': app.get('pm2_env', {}).get('status'),
                    'uptime': app.get('pm2_env', {}).get('pm_uptime'),
                    'restarts': app.get('pm2_env', {}).get('restart_time'),
                    'cpu': app.get('monit', {}).get('cpu'),
                    'memory': app.get('monit', {}).get('memory')
                }
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
        http_ok = False
        try:
            result = subprocess.run([
                'curl', '-f', '--connect-timeout', '3', 
                'http://localhost:8001/admin/'
            ], capture_output=True, check=False)
            http_ok = result.returncode == 0
        except:
            pass
        
        return jsonify({
            'pm2_status': app_status,
            'http_ok': http_ok,
            'overall_status': 'OK' if app_status and app_status.get('status') == 'online' else 'ERROR'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/logs', methods=['GET'])
def logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
    try:
        lines = request.args.get('lines', 50, type=int)
        
        result = subprocess.run([
            'pm2', 'logs', 'bot-business-card', 
            '--lines', str(lines), '--nostream'
        ], capture_output=True, text=True, timeout=10)
        
        return jsonify({
            'logs': result.stdout,
            'errors': result.stderr
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 9999...")
    app.run(host='0.0.0.0', port=9999, debug=False)