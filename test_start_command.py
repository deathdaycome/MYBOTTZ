#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
"""
import asyncio
from unittest.mock import MagicMock, AsyncMock
from app.bot.handlers.start import StartHandler
from app.config.settings import get_settings

class MockUser:
    def __init__(self, id, username="test_user", first_name="Test", last_name="User"):
        self.id = id
        self.username = username
        self.first_name = first_name
        self.last_name = last_name

class MockMessage:
    def __init__(self, user):
        self.reply_text = AsyncMock()
        self.from_user = user

class MockUpdate:
    def __init__(self, user_id=123, username="test_user"):
        self.effective_user = MockUser(user_id, username)
        self.message = MockMessage(self.effective_user)
        self.callback_query = None

async def test_start_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_settings()
    if not settings.BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print(f"‚úÖ BOT_TOKEN: {settings.BOT_TOKEN[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    start_handler = StartHandler()
    update = MockUpdate()
    context = MagicMock()
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        await start_handler.start(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply_text –±—ã–ª –≤—ã–∑–≤–∞–Ω
        if update.message.reply_text.called:
            call_args = update.message.reply_text.call_args
            text = call_args[0][0] if call_args[0] else ""
            reply_markup = call_args[1]['reply_markup'] if 'reply_markup' in call_args[1] else None
            
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìù –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {text[:100]}...")
            
            if reply_markup:
                print("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:")
                for row in reply_markup.inline_keyboard:
                    for button in row:
                        print(f"  - {button.text}")
                return True
            else:
                print("‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        else:
            print("‚ùå reply_text –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_help_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help...")
    
    start_handler = StartHandler()
    update = MockUpdate()
    context = MagicMock()
    
    try:
        await start_handler.help(update, context)
        
        if update.message.reply_text.called:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå reply_text –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è /help")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ /help: {e}")
        return False

async def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    
    start_result = await test_start_command()
    help_result = await test_help_command()
    
    if start_result and help_result:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –±–æ—Ç–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –ó–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç (python run.py)")
        print("  2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        print("  3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
        print("  4. –õ–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main())