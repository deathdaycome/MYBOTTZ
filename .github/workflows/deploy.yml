name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Позволяет запускать workflow вручную (обновлено для принудительного деплоя)

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Удаляем старую директорию из /root если она есть
          if [ -d "/root/bot_business_card" ]; then
            echo "Удаляем старую директорию из /root..."
            rm -rf /root/bot_business_card
          fi
          
          # Переходим в правильную директорию проекта
          cd /var/www/bot_business_card
          
          # Проверяем что мы в правильной директории
          pwd
          ls -la
          
          # СОХРАНЯЕМ БАЗУ ДАННЫХ ПЕРЕД ОБНОВЛЕНИЕМ
          echo "📁 Сохраняем текущую базу данных..."
          if [ -f "business_card_bot.db" ]; then
            cp business_card_bot.db business_card_bot_backup.db
            echo "✅ База данных сохранена в business_card_bot_backup.db"
            ls -la *.db
          else
            echo "⚠️ База данных не найдена для резервного копирования"
          fi
          
          # Сохраняем локальные изменения (если есть)
          git stash
          
          # Получаем последние изменения
          git pull origin main
          
          # Обновляем .env с новым OpenRouter ключом
          echo "🔑 Обновляем OpenRouter ключ в .env..."
          if [ -f ".env" ]; then
            # Заменяем старый ключ на новый
            sed -i 's/OPENROUTER_API_KEY=.*/OPENROUTER_API_KEY=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/' .env
            echo "✅ OpenRouter ключ обновлен в .env"
          else
            echo "❌ .env файл не найден!"
          fi
          
          # Восстанавливаем локальные изменения
          git stash pop || true
          
          # ВОССТАНАВЛИВАЕМ БАЗУ ДАННЫХ ПОСЛЕ ОБНОВЛЕНИЯ
          echo "📁 Восстанавливаем базу данных..."
          if [ -f "business_card_bot_backup.db" ]; then
            cp business_card_bot_backup.db business_card_bot.db
            echo "✅ База данных восстановлена из резервной копии"
          else
            echo "⚠️ Резервная копия базы данных не найдена"
          fi
          
          # Создаем виртуальное окружение если его нет
          if [ ! -d "venv" ]; then
            echo "Создаем виртуальное окружение..."
            python3 -m venv venv
          fi
          
          # Активируем виртуальное окружение
          source venv/bin/activate
          
          # Обновляем pip и установщики
          pip install --upgrade pip setuptools wheel
          
          # Обновляем зависимости
          pip install -r requirements.txt
          
          # Дополнительно устанавливаем python-telegram-bot на случай если не установился
          pip install python-telegram-bot
          
          # Запускаем миграции базы данных если есть
          echo "🔄 Проверяем и запускаем миграции базы данных..."
          if [ -f "scripts/migrate_add_is_archived.py" ]; then
            python3 scripts/migrate_add_is_archived.py || echo "⚠️ Миграция завершена с предупреждениями"
          fi
          
          # Запускаем миграцию для добавления недостающих колонок
          echo "🔄 Запускаем миграцию для добавления недостающих колонок в projects..."
          if [ -f "scripts/migrate_add_project_dates.py" ]; then
            python3 scripts/migrate_add_project_dates.py || echo "⚠️ Миграция project_dates завершена с предупреждениями"
          fi
          
          # Запускаем новую миграцию для добавления колонок в projects
          if [ -f "app/database/migrations/011_add_project_dates.py" ]; then
            echo "🔄 Запускаем миграцию 011_add_project_dates..."
            python3 app/database/migrations/011_add_project_dates.py || echo "⚠️ Миграция 011 завершена с предупреждениями"
          fi
          
          # Запускаем миграцию для добавления всех недостающих колонок
          if [ -f "scripts/migrate_add_missing_columns.py" ]; then
            echo "🔄 Запускаем миграцию для исправления всех недостающих колонок..."
            python3 scripts/migrate_add_missing_columns.py || echo "⚠️ Миграция недостающих колонок завершена"
          fi
          
          # Запускаем миграцию для CRM таблиц
          if [ -f "scripts/migrate_add_crm_tables.py" ]; then
            echo "🔄 Запускаем миграцию для создания CRM таблиц..."
            python3 scripts/migrate_add_crm_tables.py || echo "⚠️ Миграция CRM завершена"
          fi
          
          # Проверяем наличие .env файла и токена
          if [ ! -f ".env" ]; then
            echo "⚠️ Внимание: .env файл не найден! Бот не запустится без токенов."
            echo "Скопируйте .env файл с локальной машины на сервер"
          else
            echo "✅ .env файл найден"
            # Проверяем наличие BOT_TOKEN в файле
            if grep -q "BOT_TOKEN=" .env; then
              echo "✅ BOT_TOKEN найден в .env"
              # Показываем первые символы токена для проверки (безопасно)
              grep "BOT_TOKEN=" .env | head -c 30
              echo "..."
            else
              echo "❌ BOT_TOKEN НЕ найден в .env файле!"
            fi
            # Проверяем права доступа к файлу
            ls -la .env
          fi
          
          # Очищаем кэш Python для применения изменений
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true
          
          # Выполняем миграции базы данных
          echo "🔄 Выполняем миграции базы данных..."
          if [ -f "scripts/migrate_db.py" ]; then
            chmod +x scripts/migrate_db.py
            python3 scripts/migrate_db.py
            echo "✅ Миграции выполнены"
          else
            echo "⚠️ Скрипт миграции не найден, пытаемся добавить колонку вручную..."
            # Используем однострочный Python для избежания проблем с YAML
            python3 -c "import sqlite3, os; conn = sqlite3.connect('business_card_bot.db') if os.path.exists('business_card_bot.db') else None; cursor = conn.cursor() if conn else None; cursor.execute('ALTER TABLE projects ADD COLUMN color VARCHAR(20) DEFAULT \"default\"') if cursor else None; conn.commit() if conn else None; print('✅ Миграция выполнена') if conn else print('⚠️ БД не найдена')" 2>/dev/null || echo "ℹ️ Колонка color уже существует или БД не найдена"
          fi
          
          # Полностью останавливаем и удаляем процесс
          pm2 stop bot-business-card || true
          pm2 delete bot-business-card || true
          
          # Создаем ecosystem.config.js из .env переменных
          echo "🔧 Создаем ecosystem.config.js из .env..."
          source .env
          
          cat > ecosystem.config.js << EOF
          module.exports = {
            apps: [{
              name: 'bot-business-card',
              script: '/var/www/bot_business_card/venv/bin/python',
              args: '-m app.main',
              cwd: '/var/www/bot_business_card',
              interpreter: 'none',
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '500M',
              env: {
                BOT_TOKEN: '${BOT_TOKEN}',
                TELEGRAM_BOT_TOKEN: '${TELEGRAM_BOT_TOKEN}',
                BOT_USERNAME: '${BOT_USERNAME}',
                OPENROUTER_API_KEY: '${OPENROUTER_API_KEY}',
                OPENROUTER_BASE_URL: '${OPENROUTER_BASE_URL}',
                DEFAULT_MODEL: '${DEFAULT_MODEL}',
                DATABASE_URL: '${DATABASE_URL}',
                DATABASE_ECHO: '${DATABASE_ECHO}',
                ADMIN_SECRET_KEY: '${ADMIN_SECRET_KEY}',
                ADMIN_USERNAME: '${ADMIN_USERNAME}',
                ADMIN_PASSWORD: '${ADMIN_PASSWORD}',
                ADMIN_PORT: '${ADMIN_PORT}',
                MAX_FILE_SIZE: '${MAX_FILE_SIZE}',
                UPLOAD_PATH: '${UPLOAD_PATH}',
                LOG_LEVEL: '${LOG_LEVEL}',
                LOG_FILE: '${LOG_FILE}',
                NOTIFICATION_CHAT_ID: '${NOTIFICATION_CHAT_ID}',
                ADMIN_CHAT_ID: '${ADMIN_CHAT_ID}',
                ADMIN_IDS: '${ADMIN_IDS}',
                BASE_HOURLY_RATE: '${BASE_HOURLY_RATE}',
                URGENT_MULTIPLIER: '${URGENT_MULTIPLIER}',
                REDIS_URL: '${REDIS_URL}',
                CONSULTANT_SYSTEM_PROMPT: '${CONSULTANT_SYSTEM_PROMPT}',
                CONSULTANT_MAX_TOKENS: '${CONSULTANT_MAX_TOKENS}',
                CONSULTANT_TEMPERATURE: '${CONSULTANT_TEMPERATURE}',
                AVITO_CLIENT_ID: '${AVITO_CLIENT_ID}',
                AVITO_CLIENT_SECRET: '${AVITO_CLIENT_SECRET}',
                AVITO_USER_ID: '${AVITO_USER_ID}'
              }
            }]
          };
          EOF
          
          echo "✅ ecosystem.config.js создан из .env переменных"
          
          # Запускаем PM2 с новой конфигурацией
          pm2 start ecosystem.config.js
          
          # Сохраняем конфигурацию PM2
          pm2 save
          
          # Проверяем статус
          pm2 status
          
          # Ждем немного для запуска
          sleep 3
          
          # Показываем последние логи
          pm2 logs bot-business-card --lines 20 --nostream
          
          # Показываем информацию о процессе
          pm2 info bot-business-card || true
          
          # Проверяем переменные окружения процесса
          echo "Проверка переменных окружения PM2 процесса:"
          pm2 env 0 | grep -E "(OPENROUTER|BOT_TOKEN|DATABASE_URL|ADMIN)" | head -10 || true
          
          # ПРИНУДИТЕЛЬНАЯ ПЕРЕЗАГРУЗКА для обновления переменных
          echo "🔄 ПРИНУДИТЕЛЬНО перезагружаем процесс для применения новых переменных..."
          pm2 stop bot-business-card || true
          pm2 delete bot-business-card || true
          pm2 start ecosystem.config.js
          pm2 save
          
          echo "⏳ Ждем полного запуска (10 секунд)..."
          sleep 10
          
          # Финальная проверка OpenRouter переменных
          echo "🔍 ФИНАЛЬНАЯ ПРОВЕРКА OpenRouter переменных:"
          pm2 env 0 | grep -E "(OPENROUTER)" || echo "❌ КРИТИЧЕСКАЯ ОШИБКА: OpenRouter переменные НЕ ЗАГРУЖЕНЫ!"
          
          # Проверяем что новый ключ загрузился
          echo "🔑 Проверяем новый OpenRouter ключ:"
          if pm2 env 0 | grep "OPENROUTER_API_KEY" | grep -q "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"; then
            echo "✅✅✅ НОВЫЙ OPENROUTER КЛЮЧ УСПЕШНО ЗАГРУЖЕН!"
          else
            echo "❌❌❌ ВНИМАНИЕ: Новый ключ не найден, проверьте .env файл"
          fi
          
          # Показываем финальные логи
          echo "📋 Финальные логи после перезапуска:"
          pm2 logs bot-business-card --lines 10 --nostream
          
          echo "✅ Деплой завершен успешно! Бот перезапущен через PM2"