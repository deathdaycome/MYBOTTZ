name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Позволяет запускать workflow вручную

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Удаляем старую директорию из /root если она есть
          if [ -d "/root/bot_business_card" ]; then
            echo "Удаляем старую директорию из /root..."
            rm -rf /root/bot_business_card
          fi
          
          # Переходим в правильную директорию проекта
          cd /var/www/bot_business_card
          
          # Проверяем что мы в правильной директории
          pwd
          ls -la
          
          # СОХРАНЯЕМ БАЗУ ДАННЫХ ПЕРЕД ОБНОВЛЕНИЕМ
          echo "📁 Сохраняем текущую базу данных..."
          if [ -f "business_card_bot.db" ]; then
            cp business_card_bot.db business_card_bot_backup.db
            echo "✅ База данных сохранена в business_card_bot_backup.db"
            ls -la *.db
          else
            echo "⚠️ База данных не найдена для резервного копирования"
          fi
          
          # Сохраняем локальные изменения (если есть)
          git stash
          
          # Получаем последние изменения
          git pull origin main
          
          # Восстанавливаем локальные изменения
          git stash pop || true
          
          # ВОССТАНАВЛИВАЕМ БАЗУ ДАННЫХ ПОСЛЕ ОБНОВЛЕНИЯ
          echo "📁 Восстанавливаем базу данных..."
          if [ -f "business_card_bot_backup.db" ]; then
            cp business_card_bot_backup.db business_card_bot.db
            echo "✅ База данных восстановлена из резервной копии"
          else
            echo "⚠️ Резервная копия базы данных не найдена"
          fi
          
          # Создаем виртуальное окружение если его нет
          if [ ! -d "venv" ]; then
            echo "Создаем виртуальное окружение..."
            python3 -m venv venv
          fi
          
          # Активируем виртуальное окружение
          source venv/bin/activate
          
          # Обновляем pip и установщики
          pip install --upgrade pip setuptools wheel
          
          # Обновляем зависимости
          pip install -r requirements.txt
          
          # Дополнительно устанавливаем python-telegram-bot на случай если не установился
          pip install python-telegram-bot
          
          # Проверяем наличие .env файла и токена
          if [ ! -f ".env" ]; then
            echo "⚠️ Внимание: .env файл не найден! Бот не запустится без токенов."
            echo "Скопируйте .env файл с локальной машины на сервер"
          else
            echo "✅ .env файл найден"
            # Проверяем наличие BOT_TOKEN в файле
            if grep -q "BOT_TOKEN=" .env; then
              echo "✅ BOT_TOKEN найден в .env"
              # Показываем первые символы токена для проверки (безопасно)
              grep "BOT_TOKEN=" .env | head -c 30
              echo "..."
            else
              echo "❌ BOT_TOKEN НЕ найден в .env файле!"
            fi
            # Проверяем права доступа к файлу
            ls -la .env
          fi
          
          # Очищаем кэш Python для применения изменений
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true
          
          # Выполняем миграции базы данных
          echo "🔄 Выполняем миграции базы данных..."
          if [ -f "scripts/migrate_db.py" ]; then
            chmod +x scripts/migrate_db.py
            python3 scripts/migrate_db.py
            echo "✅ Миграции выполнены"
          else
            echo "⚠️ Скрипт миграции не найден, пытаемся добавить колонку вручную..."
            # Добавляем колонку color если её нет
            python3 -c "
import sqlite3
import os
if os.path.exists('business_card_bot.db'):
    conn = sqlite3.connect('business_card_bot.db')
    cursor = conn.cursor()
    try:
        cursor.execute('ALTER TABLE projects ADD COLUMN color VARCHAR(20) DEFAULT \\"default\\"')
        conn.commit()
        print('✅ Колонка color добавлена')
    except:
        print('ℹ️ Колонка color уже существует')
    conn.close()
"
          fi
          
          # Полностью останавливаем и удаляем процесс
          pm2 stop bot-business-card || true
          pm2 delete bot-business-card || true
          
          # Создаем ecosystem.config.js с переменными окружения
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'bot-business-card',
              script: '/var/www/bot_business_card/venv/bin/python',
              args: '-m app.main',
              cwd: '/var/www/bot_business_card',
              interpreter: 'none',
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '500M',
              env: {
                BOT_TOKEN: '7881909419:AAEeAZIRYxQZxkVfKKUV5WYCemBk7qxkFP8',
                TELEGRAM_BOT_TOKEN: '7881909419:AAEeAZIRYxQZxkVfKKUV5WYCemBk7qxkFP8',
                BOT_USERNAME: 'ivan_dev_bot',
                OPENROUTER_API_KEY: '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',
                OPENROUTER_BASE_URL: 'https://openrouter.ai/api/v1',
                DEFAULT_MODEL: 'openai/gpt-4o-mini',
                DATABASE_URL: 'sqlite:///./data/bot.db',
                DATABASE_ECHO: 'False',
                ADMIN_SECRET_KEY: 'your_super_secret_key_here_make_it_long_and_random',
                ADMIN_USERNAME: 'admin',
                ADMIN_PASSWORD: 'qwerty123',
                ADMIN_PORT: '8001',
                MAX_FILE_SIZE: '10485760',
                UPLOAD_PATH: './uploads',
                LOG_LEVEL: 'INFO',
                LOG_FILE: './logs/bot.log',
                NOTIFICATION_CHAT_ID: '501613334',
                ADMIN_CHAT_ID: '501613334',
                ADMIN_IDS: '501613334',
                BASE_HOURLY_RATE: '1000',
                URGENT_MULTIPLIER: '1.3',
                REDIS_URL: 'redis://localhost:6379/0',
                CONSULTANT_SYSTEM_PROMPT: 'Ты - эксперт-консультант по разработке Telegram-ботов и чат-ботов.',
                CONSULTANT_MAX_TOKENS: '1000',
                CONSULTANT_TEMPERATURE: '0.7'
              }
            }]
          };
          EOF
          
          # Запускаем PM2 с новой конфигурацией
          pm2 start ecosystem.config.js
          
          # Сохраняем конфигурацию PM2
          pm2 save
          
          # Проверяем статус
          pm2 status
          
          # Ждем немного для запуска
          sleep 3
          
          # Показываем последние логи
          pm2 logs bot-business-card --lines 20 --nostream
          
          # Показываем информацию о процессе
          pm2 info bot-business-card || true
          
          # Проверяем переменные окружения процесса
          echo "Проверка переменных окружения PM2 процесса:"
          pm2 env 0 | grep -E "(BOT_TOKEN|DATABASE_URL|ADMIN)" | head -5 || true
          
          echo "✅ Деплой завершен успешно! Бот перезапущен через PM2"