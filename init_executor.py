#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π.

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
python init_executor.py --username executor1 --password password123 --name "–ò–≤–∞–Ω –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
"""

import asyncio
import argparse
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.database.database import get_db_connection
from app.database.models import AdminUser
from app.services.auth_service import AuthService


def create_executor(username: str, password: str, full_name: str = None):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    
    print(f"üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{username}'...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    db = next(get_db_connection())
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(AdminUser).filter(AdminUser.username == username).first()
        if existing_user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        new_executor = AdminUser(
            username=username,
            password_hash=AuthService.hash_password(password),
            first_name=full_name or username,
            role="executor",
            is_active=True,
            created_at=datetime.now()
        )
        
        db.add(new_executor)
        db.commit()
        db.refresh(new_executor)
        
        print(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"   ID: {new_executor.id}")
        print(f"   –ò–º—è: {new_executor.first_name}")
        print(f"   –†–æ–ª—å: {new_executor.role}")
        print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {new_executor.is_active}")
        print(f"   –°–æ–∑–¥–∞–Ω: {new_executor.created_at}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        db.rollback()
        return False
    finally:
        db.close()


def list_executors():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    
    print("üìã –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:")
    
    db = next(get_db_connection())
    
    try:
        executors = db.query(AdminUser).filter(AdminUser.role == "executor").all()
        
        if not executors:
            print("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(executors)}")
        print()
        
        for executor in executors:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if executor.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            print(f"   ID: {executor.id}")
            print(f"   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {executor.username}")
            print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è: {executor.first_name}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status}")
            print(f"   –°–æ–∑–¥–∞–Ω: {executor.created_at}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {executor.last_login}")
            print("   " + "-" * 40)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
    finally:
        db.close()


def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    parser.add_argument("--username", "-u", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    parser.add_argument("--password", "-p", help="–ü–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    parser.add_argument("--name", "-n", help="–ü–æ–ª–Ω–æ–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    parser.add_argument("--list", "-l", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    args = parser.parse_args()
    
    print("ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ BotDev Admin")
    print("=" * 50)
    
    if args.list:
        list_executors()
        return
    
    if not args.username or not args.password:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!")
        print("–ü—Ä–∏–º–µ—Ä: python init_executor.py -u executor1 -p password123 -n '–ò–≤–∞–Ω –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    success = create_executor(args.username, args.password, args.name)
    
    if success:
        print()
        print("üéâ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"   URL –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: http://localhost:8000/admin/")
        print(f"   –õ–æ–≥–∏–Ω: {args.username}")
        print(f"   –ü–∞—Ä–æ–ª—å: {args.password}")
        print()
        print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python init_executor.py --list")
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
